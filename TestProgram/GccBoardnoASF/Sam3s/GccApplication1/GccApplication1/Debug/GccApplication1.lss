
GccApplication1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000420  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000042c  20000000  00400420  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  2000042c  0040084c  0002042c  2**2
                  ALLOC
  3 .stack        00000404  2000046c  0040088c  0002042c  2**0
                  ALLOC
  4 .heap         00000200  20000870  00400c90  0002042c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020455  2**0
                  CONTENTS, READONLY
  7 .debug_info   000007e3  00000000  00000000  000204ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000020b  00000000  00000000  00020c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e4  00000000  00000000  00020e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000048  00000000  00000000  00020f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00020fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b8d1  00000000  00000000  00020ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000cfb  00000000  00000000  0002c8c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00037fab  00000000  00000000  0002d5bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000220  00000000  00000000  00065568  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 08 00 20 3d 01 40 00 39 01 40 00 39 01 40 00     p.. =.@.9.@.9.@.
  400010:	39 01 40 00 39 01 40 00 39 01 40 00 00 00 00 00     9.@.9.@.9.@.....
	...
  40002c:	39 01 40 00 39 01 40 00 00 00 00 00 39 01 40 00     9.@.9.@.....9.@.
  40003c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40004c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40005c:	00 00 00 00 39 01 40 00 39 01 40 00 00 00 00 00     ....9.@.9.@.....
  40006c:	39 01 40 00 39 01 40 00 00 00 00 00 39 01 40 00     9.@.9.@.....9.@.
  40007c:	39 01 40 00 00 00 00 00 00 00 00 00 39 01 40 00     9.@.........9.@.
  40008c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40009c:	39 01 40 00 39 01 40 00 39 01 40 00 00 00 00 00     9.@.9.@.9.@.....
	...
  4000b4:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  4000c4:	39 01 40 00 39 01 40 00                             9.@.9.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000042c 	.word	0x2000042c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00400420 	.word	0x00400420

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	b510      	push	{r4, lr}
  4000f8:	490c      	ldr	r1, [pc, #48]	; (40012c <frame_dummy+0x3c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00400420 	.word	0x00400420
  40012c:	20000430 	.word	0x20000430
  400130:	00400420 	.word	0x00400420
  400134:	00000000 	.word	0x00000000

00400138 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400138:	e7fe      	b.n	400138 <Dummy_Handler>
	...

0040013c <Reset_Handler>:
{
  40013c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  40013e:	4b18      	ldr	r3, [pc, #96]	; (4001a0 <Reset_Handler+0x64>)
  400140:	4a18      	ldr	r2, [pc, #96]	; (4001a4 <Reset_Handler+0x68>)
  400142:	429a      	cmp	r2, r3
  400144:	d010      	beq.n	400168 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  400146:	4b18      	ldr	r3, [pc, #96]	; (4001a8 <Reset_Handler+0x6c>)
  400148:	4a15      	ldr	r2, [pc, #84]	; (4001a0 <Reset_Handler+0x64>)
  40014a:	429a      	cmp	r2, r3
  40014c:	d20c      	bcs.n	400168 <Reset_Handler+0x2c>
  40014e:	3b01      	subs	r3, #1
  400150:	1a9b      	subs	r3, r3, r2
  400152:	f023 0303 	bic.w	r3, r3, #3
  400156:	3304      	adds	r3, #4
  400158:	4413      	add	r3, r2
  40015a:	4912      	ldr	r1, [pc, #72]	; (4001a4 <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
  40015c:	f851 0b04 	ldr.w	r0, [r1], #4
  400160:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400164:	429a      	cmp	r2, r3
  400166:	d1f9      	bne.n	40015c <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  400168:	4b10      	ldr	r3, [pc, #64]	; (4001ac <Reset_Handler+0x70>)
  40016a:	4a11      	ldr	r2, [pc, #68]	; (4001b0 <Reset_Handler+0x74>)
  40016c:	429a      	cmp	r2, r3
  40016e:	d20a      	bcs.n	400186 <Reset_Handler+0x4a>
  400170:	3b01      	subs	r3, #1
  400172:	1a9b      	subs	r3, r3, r2
  400174:	f023 0303 	bic.w	r3, r3, #3
  400178:	3304      	adds	r3, #4
  40017a:	4413      	add	r3, r2
                *pDest++ = 0;
  40017c:	2100      	movs	r1, #0
  40017e:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400182:	4293      	cmp	r3, r2
  400184:	d1fb      	bne.n	40017e <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400186:	4b0b      	ldr	r3, [pc, #44]	; (4001b4 <Reset_Handler+0x78>)
  400188:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
  40018c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400190:	4a09      	ldr	r2, [pc, #36]	; (4001b8 <Reset_Handler+0x7c>)
  400192:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400194:	4b09      	ldr	r3, [pc, #36]	; (4001bc <Reset_Handler+0x80>)
  400196:	4798      	blx	r3
        main();
  400198:	4b09      	ldr	r3, [pc, #36]	; (4001c0 <Reset_Handler+0x84>)
  40019a:	4798      	blx	r3
  40019c:	e7fe      	b.n	40019c <Reset_Handler+0x60>
  40019e:	bf00      	nop
  4001a0:	20000000 	.word	0x20000000
  4001a4:	00400420 	.word	0x00400420
  4001a8:	2000042c 	.word	0x2000042c
  4001ac:	2000046c 	.word	0x2000046c
  4001b0:	2000042c 	.word	0x2000042c
  4001b4:	00400000 	.word	0x00400000
  4001b8:	e000ed00 	.word	0xe000ed00
  4001bc:	0040027d 	.word	0x0040027d
  4001c0:	004001c5 	.word	0x004001c5

004001c4 <main>:

#include "sam.h"


int main(void)
{
  4001c4:	b410      	push	{r4}
  4001c6:	b085      	sub	sp, #20
    /* Initialize the SAM system */
    //SystemInit();
	*(int *)0x20000008 = 2;
  4001c8:	2202      	movs	r2, #2
  4001ca:	4b24      	ldr	r3, [pc, #144]	; (40025c <main+0x98>)
  4001cc:	601a      	str	r2, [r3, #0]
    /* Replace with your application code */
	REG_PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
  4001ce:	4a24      	ldr	r2, [pc, #144]	; (400260 <main+0x9c>)
  4001d0:	4b24      	ldr	r3, [pc, #144]	; (400264 <main+0xa0>)
  4001d2:	601a      	str	r2, [r3, #0]
	//now we enable the clock for peripheral #11 (PIOA p50)
	REG_PMC_PCER0 = PMC_PCER0_PID11; 
  4001d4:	3bd4      	subs	r3, #212	; 0xd4
  4001d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4001da:	601a      	str	r2, [r3, #0]
	//and enable the clock for peripheral #21 (SPI)
	REG_PMC_PCER0 = PMC_PCER0_PID21;
  4001dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4001e0:	6019      	str	r1, [r3, #0]
	//we next set the SPI pins as belonging to peripheral A (SPI) for PA11-PA14 (SPI pins)
	//first need to disable write protection (P633)
	REG_PIOA_WPMR = PIO_WPMR_WPKEY_PASSWD;
  4001e2:	4921      	ldr	r1, [pc, #132]	; (400268 <main+0xa4>)
  4001e4:	f603 23d4 	addw	r3, r3, #2772	; 0xad4
  4001e8:	6019      	str	r1, [r3, #0]
	//now we set PA11-PA14 to outside PIO contorl
	REG_PIOA_PDR = PIO_PDR_P11;
  4001ea:	3be0      	subs	r3, #224	; 0xe0
  4001ec:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR = PIO_PDR_P12;
  4001ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4001f2:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR = PIO_PDR_P13;
  4001f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4001f8:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR = PIO_PDR_P14;
  4001fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4001fe:	601a      	str	r2, [r3, #0]
	//PA11-14 are automatically initialized to PIO_ABCD0/1 = 0,0, so they will be by default assigned to peripheral A which is SPI
	//we next move to the SPI interface 
	//disabling write protection
	REG_SPI_WPMR = SPI_WPMR_WPKEY_PASSWD;
  400200:	4a1a      	ldr	r2, [pc, #104]	; (40026c <main+0xa8>)
  400202:	f5a3 2358 	sub.w	r3, r3, #884736	; 0xd8000
  400206:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
  40020a:	601a      	str	r2, [r3, #0]
	//Enabling SPI
	REG_SPI_CR = 0x00000001; //p600, SPI enabled
  40020c:	2301      	movs	r3, #1
  40020e:	4a18      	ldr	r2, [pc, #96]	; (400270 <main+0xac>)
  400210:	6013      	str	r3, [r2, #0]
	//chip select lines directly connected to peripheral device
	//mode fault detection enabled
	//WDRBT disabled
	//LLB disabled
	//PCS = 0000 (Peripheral 0 selected), means NPCS[3:0] = 1110
	REG_SPI_MR = 0x00000001;
  400212:	3204      	adds	r2, #4
  400214:	6013      	str	r3, [r2, #0]
	//We next set up the chip select register for peripheral 0 (CSR is chip select register 0)
	REG_SPI_CSR = 0x0000FF00; //test settings
  400216:	f44f 417f 	mov.w	r1, #65280	; 0xff00
  40021a:	322c      	adds	r2, #44	; 0x2c
  40021c:	6011      	str	r1, [r2, #0]
	char toSend = 0;
	char toSendArr[] = {0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21};
  40021e:	4a15      	ldr	r2, [pc, #84]	; (400274 <main+0xb0>)
  400220:	ca07      	ldmia	r2, {r0, r1, r2}
  400222:	ac04      	add	r4, sp, #16
  400224:	e904 0007 	stmdb	r4, {r0, r1, r2}
    while (1) 
    {
	//we now write to the SPI register
	//REG_SPI_TDR = 0x00000000;
	char received = *(int*) 0x40008008;
	REG_SPI_TDR = toSendArr[toSend];
  400228:	f89d 1004 	ldrb.w	r1, [sp, #4]
  40022c:	4a12      	ldr	r2, [pc, #72]	; (400278 <main+0xb4>)
  40022e:	6011      	str	r1, [r2, #0]
	toSend++;
  400230:	4618      	mov	r0, r3
	if (toSend > 11) {toSend = 0;}
	//for(int i = 0; i < 3000; i++) {
		//}
		while ( !( (REG_SPI_SR & 1) & ((REG_SPI_SR >> 9) & 1) ) ); 
  400232:	3204      	adds	r2, #4
	REG_SPI_TDR = toSendArr[toSend];
  400234:	4c10      	ldr	r4, [pc, #64]	; (400278 <main+0xb4>)
  400236:	e009      	b.n	40024c <main+0x88>
  400238:	ab04      	add	r3, sp, #16
  40023a:	4403      	add	r3, r0
  40023c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  400240:	6023      	str	r3, [r4, #0]
	toSend++;
  400242:	3001      	adds	r0, #1
  400244:	b2c0      	uxtb	r0, r0
	if (toSend > 11) {toSend = 0;}
  400246:	280c      	cmp	r0, #12
  400248:	bf28      	it	cs
  40024a:	2000      	movcs	r0, #0
		while ( !( (REG_SPI_SR & 1) & ((REG_SPI_SR >> 9) & 1) ) ); 
  40024c:	6813      	ldr	r3, [r2, #0]
  40024e:	6811      	ldr	r1, [r2, #0]
  400250:	f003 0301 	and.w	r3, r3, #1
  400254:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
  400258:	d0f8      	beq.n	40024c <main+0x88>
  40025a:	e7ed      	b.n	400238 <main+0x74>
  40025c:	20000008 	.word	0x20000008
  400260:	504d4300 	.word	0x504d4300
  400264:	400e04e4 	.word	0x400e04e4
  400268:	50494f00 	.word	0x50494f00
  40026c:	53504900 	.word	0x53504900
  400270:	40008000 	.word	0x40008000
  400274:	004003ec 	.word	0x004003ec
  400278:	4000800c 	.word	0x4000800c

0040027c <__libc_init_array>:
  40027c:	b570      	push	{r4, r5, r6, lr}
  40027e:	4e0f      	ldr	r6, [pc, #60]	; (4002bc <__libc_init_array+0x40>)
  400280:	4d0f      	ldr	r5, [pc, #60]	; (4002c0 <__libc_init_array+0x44>)
  400282:	1b76      	subs	r6, r6, r5
  400284:	10b6      	asrs	r6, r6, #2
  400286:	bf18      	it	ne
  400288:	2400      	movne	r4, #0
  40028a:	d005      	beq.n	400298 <__libc_init_array+0x1c>
  40028c:	3401      	adds	r4, #1
  40028e:	f855 3b04 	ldr.w	r3, [r5], #4
  400292:	4798      	blx	r3
  400294:	42a6      	cmp	r6, r4
  400296:	d1f9      	bne.n	40028c <__libc_init_array+0x10>
  400298:	4e0a      	ldr	r6, [pc, #40]	; (4002c4 <__libc_init_array+0x48>)
  40029a:	4d0b      	ldr	r5, [pc, #44]	; (4002c8 <__libc_init_array+0x4c>)
  40029c:	f000 f8ae 	bl	4003fc <_init>
  4002a0:	1b76      	subs	r6, r6, r5
  4002a2:	10b6      	asrs	r6, r6, #2
  4002a4:	bf18      	it	ne
  4002a6:	2400      	movne	r4, #0
  4002a8:	d006      	beq.n	4002b8 <__libc_init_array+0x3c>
  4002aa:	3401      	adds	r4, #1
  4002ac:	f855 3b04 	ldr.w	r3, [r5], #4
  4002b0:	4798      	blx	r3
  4002b2:	42a6      	cmp	r6, r4
  4002b4:	d1f9      	bne.n	4002aa <__libc_init_array+0x2e>
  4002b6:	bd70      	pop	{r4, r5, r6, pc}
  4002b8:	bd70      	pop	{r4, r5, r6, pc}
  4002ba:	bf00      	nop
  4002bc:	00400408 	.word	0x00400408
  4002c0:	00400408 	.word	0x00400408
  4002c4:	00400410 	.word	0x00400410
  4002c8:	00400408 	.word	0x00400408

004002cc <register_fini>:
  4002cc:	4b02      	ldr	r3, [pc, #8]	; (4002d8 <register_fini+0xc>)
  4002ce:	b113      	cbz	r3, 4002d6 <register_fini+0xa>
  4002d0:	4802      	ldr	r0, [pc, #8]	; (4002dc <register_fini+0x10>)
  4002d2:	f000 b805 	b.w	4002e0 <atexit>
  4002d6:	4770      	bx	lr
  4002d8:	00000000 	.word	0x00000000
  4002dc:	004002ed 	.word	0x004002ed

004002e0 <atexit>:
  4002e0:	2300      	movs	r3, #0
  4002e2:	4601      	mov	r1, r0
  4002e4:	461a      	mov	r2, r3
  4002e6:	4618      	mov	r0, r3
  4002e8:	f000 b81e 	b.w	400328 <__register_exitproc>

004002ec <__libc_fini_array>:
  4002ec:	b538      	push	{r3, r4, r5, lr}
  4002ee:	4c0a      	ldr	r4, [pc, #40]	; (400318 <__libc_fini_array+0x2c>)
  4002f0:	4d0a      	ldr	r5, [pc, #40]	; (40031c <__libc_fini_array+0x30>)
  4002f2:	1b64      	subs	r4, r4, r5
  4002f4:	10a4      	asrs	r4, r4, #2
  4002f6:	d00a      	beq.n	40030e <__libc_fini_array+0x22>
  4002f8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4002fc:	3b01      	subs	r3, #1
  4002fe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400302:	3c01      	subs	r4, #1
  400304:	f855 3904 	ldr.w	r3, [r5], #-4
  400308:	4798      	blx	r3
  40030a:	2c00      	cmp	r4, #0
  40030c:	d1f9      	bne.n	400302 <__libc_fini_array+0x16>
  40030e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400312:	f000 b87d 	b.w	400410 <_fini>
  400316:	bf00      	nop
  400318:	00400420 	.word	0x00400420
  40031c:	0040041c 	.word	0x0040041c

00400320 <__retarget_lock_acquire_recursive>:
  400320:	4770      	bx	lr
  400322:	bf00      	nop

00400324 <__retarget_lock_release_recursive>:
  400324:	4770      	bx	lr
  400326:	bf00      	nop

00400328 <__register_exitproc>:
  400328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40032c:	4d2c      	ldr	r5, [pc, #176]	; (4003e0 <__register_exitproc+0xb8>)
  40032e:	4606      	mov	r6, r0
  400330:	6828      	ldr	r0, [r5, #0]
  400332:	4698      	mov	r8, r3
  400334:	460f      	mov	r7, r1
  400336:	4691      	mov	r9, r2
  400338:	f7ff fff2 	bl	400320 <__retarget_lock_acquire_recursive>
  40033c:	4b29      	ldr	r3, [pc, #164]	; (4003e4 <__register_exitproc+0xbc>)
  40033e:	681c      	ldr	r4, [r3, #0]
  400340:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400344:	2b00      	cmp	r3, #0
  400346:	d03e      	beq.n	4003c6 <__register_exitproc+0x9e>
  400348:	685a      	ldr	r2, [r3, #4]
  40034a:	2a1f      	cmp	r2, #31
  40034c:	dc1c      	bgt.n	400388 <__register_exitproc+0x60>
  40034e:	f102 0e01 	add.w	lr, r2, #1
  400352:	b176      	cbz	r6, 400372 <__register_exitproc+0x4a>
  400354:	2101      	movs	r1, #1
  400356:	eb03 0482 	add.w	r4, r3, r2, lsl #2
  40035a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
  40035e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400362:	4091      	lsls	r1, r2
  400364:	4308      	orrs	r0, r1
  400366:	2e02      	cmp	r6, #2
  400368:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40036c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
  400370:	d023      	beq.n	4003ba <__register_exitproc+0x92>
  400372:	3202      	adds	r2, #2
  400374:	f8c3 e004 	str.w	lr, [r3, #4]
  400378:	6828      	ldr	r0, [r5, #0]
  40037a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40037e:	f7ff ffd1 	bl	400324 <__retarget_lock_release_recursive>
  400382:	2000      	movs	r0, #0
  400384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400388:	4b17      	ldr	r3, [pc, #92]	; (4003e8 <__register_exitproc+0xc0>)
  40038a:	b30b      	cbz	r3, 4003d0 <__register_exitproc+0xa8>
  40038c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400390:	f3af 8000 	nop.w
  400394:	4603      	mov	r3, r0
  400396:	b1d8      	cbz	r0, 4003d0 <__register_exitproc+0xa8>
  400398:	2000      	movs	r0, #0
  40039a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  40039e:	f04f 0e01 	mov.w	lr, #1
  4003a2:	6058      	str	r0, [r3, #4]
  4003a4:	6019      	str	r1, [r3, #0]
  4003a6:	4602      	mov	r2, r0
  4003a8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4003ac:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4003b0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
  4003b4:	2e00      	cmp	r6, #0
  4003b6:	d0dc      	beq.n	400372 <__register_exitproc+0x4a>
  4003b8:	e7cc      	b.n	400354 <__register_exitproc+0x2c>
  4003ba:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
  4003be:	4301      	orrs	r1, r0
  4003c0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
  4003c4:	e7d5      	b.n	400372 <__register_exitproc+0x4a>
  4003c6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4003ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4003ce:	e7bb      	b.n	400348 <__register_exitproc+0x20>
  4003d0:	6828      	ldr	r0, [r5, #0]
  4003d2:	f7ff ffa7 	bl	400324 <__retarget_lock_release_recursive>
  4003d6:	f04f 30ff 	mov.w	r0, #4294967295
  4003da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4003de:	bf00      	nop
  4003e0:	20000428 	.word	0x20000428
  4003e4:	004003f8 	.word	0x004003f8
  4003e8:	00000000 	.word	0x00000000
  4003ec:	6c6c6568 	.word	0x6c6c6568
  4003f0:	6f77206f 	.word	0x6f77206f
  4003f4:	21646c72 	.word	0x21646c72

004003f8 <_global_impure_ptr>:
  4003f8:	20000000                                ... 

004003fc <_init>:
  4003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4003fe:	bf00      	nop
  400400:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400402:	bc08      	pop	{r3}
  400404:	469e      	mov	lr, r3
  400406:	4770      	bx	lr

00400408 <__init_array_start>:
  400408:	004002cd 	.word	0x004002cd

0040040c <__frame_dummy_init_array_entry>:
  40040c:	004000f1                                ..@.

00400410 <_fini>:
  400410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400412:	bf00      	nop
  400414:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400416:	bc08      	pop	{r3}
  400418:	469e      	mov	lr, r3
  40041a:	4770      	bx	lr

0040041c <__fini_array_start>:
  40041c:	004000cd 	.word	0x004000cd
