


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY
    2 00000000                 EXPORT           sort
    3 00000000         sort
    4 00000000 F04F 5300       LDR              R3, =0x20000000 ;load base addr
                                                            ess of array into R
                                                            3
    5 00000004 F04F 0400       MOV              R4, #0      ;setting iteration 
                                                            number to 0
    6 00000008 F04F 0500       MOV              R5, #0      ;setting iteration 
                                                            position to 0
    7 0000000C         iteration
    8 0000000C 2C0B            CMP              R4, #11     ;if R4 is greater t
                                                            han or equal to 12,
                                                             stop program execu
                                                            tion
    9 0000000E DA13            BGE              done        ;jumping to the end
                                                             of the program
   10 00000010 F104 0401       ADD              R4, R4, #1  ;incrementing R4  
   11 00000014 F04F 0500       MOV              R5,     #0  ;setting R5 back to
                                                             0
   12 00000018         position
   13 00000018 2D0B            CMP              R5, #11     ;if R5 is greater t
                                                            han or equal to 11,
                                                             stop program execu
                                                            tion
   14 0000001A DA0C            BGE              position_done ;11 is used becau
                                                            se comparing elemen
                                                            t i and i+1: hence 
                                                            i+1=12 when i=1
   15 0000001C F105 0601       ADD              R6, R5, #1  ;compute R5+1, the 
                                                            address of the elem
                                                            ent to compare agai
                                                            nst, in R6 
   16 00000020 575F            LDRSB            R7, [R3, R5] ;load data at posi
                                                            tion R5 from the ar
                                                            ray into R7
   17 00000022 F913 8006       LDRSB            R8, [R3, R6] ;load data at posi
                                                            tion R5+1 from the 
                                                            array into R8
   18 00000026 4547            CMP              R7, R8      ;only swap when R7 
                                                            > R8
   19 00000028 DD02            BLE              swapped     ;so skip swap and j
                                                            ump to next step of
                                                             loop 
   20 0000002A F803 8005       STRB             R8, [R3, R5] ;store R7 into arr
                                                            ay position R5
   21 0000002E 559F            STRB             R7, [R3, R6] ;store R8 into arr
                                                            ay position R6
   22 00000030         swapped
   23 00000030 F105 0501       ADD              R5, R5, #1  ;incrementing R5
   24 00000034 E7F0            B                position    ;this iteration of 
                                                            the inner loop is d
                                                            one
   25 00000036         position_done
   26 00000036 E7E9            B                iteration   ;this iteration of 
                                                            the outer loop is d
                                                            one
   27 00000038         done
   28 00000038 BF00            NOP



ARM Macro Assembler    Page 2 


   29 0000003A 4770            BX               LR
   30 0000003C         
   31 0000003C                 ALIGN
   32 0000003C                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\sort2.d -o.\objects\sort2.o -I.\RTE\_Target_1 -I"C:\User
s\Kaveh Pezeshki\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include" -I
"C:\Users\Kaveh Pezeshki\AppData\Local\Arm\Packs\Atmel\SAM3S_DFP\1.0.70\sam3s\i
nclude" --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 527" --
predefine="_RTE_ SETA 1" --predefine="__SAM3S4B__ SETA 1" --list=.\listings\sor
t2.lst sort2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file sort2.s
   Uses
      None
Comment: .text unused
done 00000038

Symbol: done
   Definitions
      At line 27 in file sort2.s
   Uses
      At line 9 in file sort2.s
Comment: done used once
iteration 0000000C

Symbol: iteration
   Definitions
      At line 7 in file sort2.s
   Uses
      At line 26 in file sort2.s
Comment: iteration used once
position 00000018

Symbol: position
   Definitions
      At line 12 in file sort2.s
   Uses
      At line 24 in file sort2.s
Comment: position used once
position_done 00000036

Symbol: position_done
   Definitions
      At line 25 in file sort2.s
   Uses
      At line 14 in file sort2.s
Comment: position_done used once
sort 00000000

Symbol: sort
   Definitions
      At line 3 in file sort2.s
   Uses
      At line 2 in file sort2.s
Comment: sort used once
swapped 00000030

Symbol: swapped
   Definitions
      At line 22 in file sort2.s
   Uses
      At line 19 in file sort2.s
Comment: swapped used once
7 symbols
341 symbols in table
