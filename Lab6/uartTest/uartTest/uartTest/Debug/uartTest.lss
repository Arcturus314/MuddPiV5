
uartTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fc0  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00400fc0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000434  004013f4  00020434  2**2
                  ALLOC
  3 .stack        00000404  20000474  00401434  00020434  2**0
                  ALLOC
  4 .heap         00000200  20000878  00401838  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00002642  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005c9  00000000  00000000  00022af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000c04  00000000  00000000  000230c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000128  00000000  00000000  00023cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  00023ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000c3b7  00000000  00000000  00023f25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000c6d  00000000  00000000  000302dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0003c281  00000000  00000000  00030f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000634  00000000  00000000  0006d1cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	78 08 00 20 3d 01 40 00 39 01 40 00 39 01 40 00     x.. =.@.9.@.9.@.
  400010:	39 01 40 00 39 01 40 00 39 01 40 00 00 00 00 00     9.@.9.@.9.@.....
	...
  40002c:	39 01 40 00 39 01 40 00 00 00 00 00 39 01 40 00     9.@.9.@.....9.@.
  40003c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40004c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40005c:	00 00 00 00 39 01 40 00 39 01 40 00 00 00 00 00     ....9.@.9.@.....
  40006c:	39 01 40 00 39 01 40 00 00 00 00 00 39 01 40 00     9.@.9.@.....9.@.
  40007c:	39 01 40 00 00 00 00 00 00 00 00 00 39 01 40 00     9.@.........9.@.
  40008c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40009c:	39 01 40 00 39 01 40 00 39 01 40 00 00 00 00 00     9.@.9.@.9.@.....
	...
  4000b4:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  4000c4:	39 01 40 00 39 01 40 00                             9.@.9.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000434 	.word	0x20000434
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00400fc0 	.word	0x00400fc0

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	b510      	push	{r4, lr}
  4000f8:	490c      	ldr	r1, [pc, #48]	; (40012c <frame_dummy+0x3c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00400fc0 	.word	0x00400fc0
  40012c:	20000438 	.word	0x20000438
  400130:	00400fc0 	.word	0x00400fc0
  400134:	00000000 	.word	0x00000000

00400138 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400138:	e7fe      	b.n	400138 <Dummy_Handler>
	...

0040013c <Reset_Handler>:
{
  40013c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  40013e:	4b18      	ldr	r3, [pc, #96]	; (4001a0 <Reset_Handler+0x64>)
  400140:	4a18      	ldr	r2, [pc, #96]	; (4001a4 <Reset_Handler+0x68>)
  400142:	429a      	cmp	r2, r3
  400144:	d010      	beq.n	400168 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  400146:	4b18      	ldr	r3, [pc, #96]	; (4001a8 <Reset_Handler+0x6c>)
  400148:	4a15      	ldr	r2, [pc, #84]	; (4001a0 <Reset_Handler+0x64>)
  40014a:	429a      	cmp	r2, r3
  40014c:	d20c      	bcs.n	400168 <Reset_Handler+0x2c>
  40014e:	3b01      	subs	r3, #1
  400150:	1a9b      	subs	r3, r3, r2
  400152:	f023 0303 	bic.w	r3, r3, #3
  400156:	3304      	adds	r3, #4
  400158:	4413      	add	r3, r2
  40015a:	4912      	ldr	r1, [pc, #72]	; (4001a4 <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
  40015c:	f851 0b04 	ldr.w	r0, [r1], #4
  400160:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400164:	429a      	cmp	r2, r3
  400166:	d1f9      	bne.n	40015c <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  400168:	4b10      	ldr	r3, [pc, #64]	; (4001ac <Reset_Handler+0x70>)
  40016a:	4a11      	ldr	r2, [pc, #68]	; (4001b0 <Reset_Handler+0x74>)
  40016c:	429a      	cmp	r2, r3
  40016e:	d20a      	bcs.n	400186 <Reset_Handler+0x4a>
  400170:	3b01      	subs	r3, #1
  400172:	1a9b      	subs	r3, r3, r2
  400174:	f023 0303 	bic.w	r3, r3, #3
  400178:	3304      	adds	r3, #4
  40017a:	4413      	add	r3, r2
                *pDest++ = 0;
  40017c:	2100      	movs	r1, #0
  40017e:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400182:	4293      	cmp	r3, r2
  400184:	d1fb      	bne.n	40017e <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400186:	4b0b      	ldr	r3, [pc, #44]	; (4001b4 <Reset_Handler+0x78>)
  400188:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
  40018c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400190:	4a09      	ldr	r2, [pc, #36]	; (4001b8 <Reset_Handler+0x7c>)
  400192:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400194:	4b09      	ldr	r3, [pc, #36]	; (4001bc <Reset_Handler+0x80>)
  400196:	4798      	blx	r3
        main();
  400198:	4b09      	ldr	r3, [pc, #36]	; (4001c0 <Reset_Handler+0x84>)
  40019a:	4798      	blx	r3
  40019c:	e7fe      	b.n	40019c <Reset_Handler+0x60>
  40019e:	bf00      	nop
  4001a0:	20000000 	.word	0x20000000
  4001a4:	00400fc0 	.word	0x00400fc0
  4001a8:	20000434 	.word	0x20000434
  4001ac:	20000474 	.word	0x20000474
  4001b0:	20000434 	.word	0x20000434
  4001b4:	00400000 	.word	0x00400000
  4001b8:	e000ed00 	.word	0xe000ed00
  4001bc:	00400561 	.word	0x00400561
  4001c0:	0040042d 	.word	0x0040042d

004001c4 <pinMode>:

// Note: Upon reset, pins are configured as input I/O lines (as opposed to being
// controlled by peripheral functions), the peripheral function defaults to PERIPH_A,
// the pull-up resistor is enabled, and the pull-down resistor is disabled. All other
// optional pin functions, which are not provided in this header file, are off upon reset.
void pinMode(int pin, int function) {
  4001c4:	b410      	push	{r4}
    return pin >> 5;
  4001c6:	1144      	asrs	r4, r0, #5
    return (uint32_t) (port ? PIOB : PIOA);
  4001c8:	4a32      	ldr	r2, [pc, #200]	; (400294 <pinMode+0xd0>)
  4001ca:	4b33      	ldr	r3, [pc, #204]	; (400298 <pinMode+0xd4>)
  4001cc:	2c00      	cmp	r4, #0
  4001ce:	bf08      	it	eq
  4001d0:	4613      	moveq	r3, r2
    Pio* port = (Pio*) pinToBase(pin);
  4001d2:	461c      	mov	r4, r3
    int offset = pin % 32;
  4001d4:	4242      	negs	r2, r0
  4001d6:	f000 001f 	and.w	r0, r0, #31
  4001da:	f002 021f 	and.w	r2, r2, #31
  4001de:	bf58      	it	pl
  4001e0:	4250      	negpl	r0, r2

    switch (function) {
  4001e2:	3901      	subs	r1, #1
  4001e4:	2906      	cmp	r1, #6
  4001e6:	d853      	bhi.n	400290 <pinMode+0xcc>
  4001e8:	e8df f001 	tbb	[pc, r1]
  4001ec:	27190b04 	.word	0x27190b04
  4001f0:	4235      	.short	0x4235
  4001f2:	4c          	.byte	0x4c
  4001f3:	00          	.byte	0x00
        case INPUT:
            break;
        case OUTPUT:
            port->PIO_OER     |=  (1 << offset); // Configures an I/O line as an output
  4001f4:	2201      	movs	r2, #1
  4001f6:	fa02 f000 	lsl.w	r0, r2, r0
  4001fa:	691a      	ldr	r2, [r3, #16]
  4001fc:	4302      	orrs	r2, r0
  4001fe:	611a      	str	r2, [r3, #16]
            break;
  400200:	e046      	b.n	400290 <pinMode+0xcc>
        case PERIPH_A:
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
  400202:	2201      	movs	r2, #1
  400204:	fa02 f000 	lsl.w	r0, r2, r0
  400208:	685a      	ldr	r2, [r3, #4]
  40020a:	4302      	orrs	r2, r0
  40020c:	605a      	str	r2, [r3, #4]
            port->PIO_ABCDSR1 &= ~(1 << offset); // Sets the peripheral which controls a pin
  40020e:	43c0      	mvns	r0, r0
  400210:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400212:	4002      	ands	r2, r0
  400214:	671a      	str	r2, [r3, #112]	; 0x70
            port->PIO_ABCDSR2 &= ~(1 << offset); // Sets the peripheral which controls a pin
  400216:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400218:	4010      	ands	r0, r2
  40021a:	6758      	str	r0, [r3, #116]	; 0x74
            break;
  40021c:	e038      	b.n	400290 <pinMode+0xcc>
        case PERIPH_B:
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
  40021e:	2201      	movs	r2, #1
  400220:	fa02 f000 	lsl.w	r0, r2, r0
  400224:	685a      	ldr	r2, [r3, #4]
  400226:	4302      	orrs	r2, r0
  400228:	605a      	str	r2, [r3, #4]
            port->PIO_ABCDSR1 |=  (1 << offset); // Sets the peripheral which controls a pin
  40022a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40022c:	4302      	orrs	r2, r0
  40022e:	671a      	str	r2, [r3, #112]	; 0x70
            port->PIO_ABCDSR2 &= ~(1 << offset); // Sets the peripheral which controls a pin
  400230:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400232:	ea22 0000 	bic.w	r0, r2, r0
  400236:	6758      	str	r0, [r3, #116]	; 0x74
            break;
  400238:	e02a      	b.n	400290 <pinMode+0xcc>
        case PERIPH_C:
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
  40023a:	2201      	movs	r2, #1
  40023c:	fa02 f000 	lsl.w	r0, r2, r0
  400240:	685a      	ldr	r2, [r3, #4]
  400242:	4302      	orrs	r2, r0
  400244:	605a      	str	r2, [r3, #4]
            port->PIO_ABCDSR1 &= ~(1 << offset); // Sets the peripheral which controls a pin
  400246:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400248:	ea22 0200 	bic.w	r2, r2, r0
  40024c:	671a      	str	r2, [r3, #112]	; 0x70
            port->PIO_ABCDSR2 |=  (1 << offset); // Sets the peripheral which controls a pin
  40024e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400250:	4310      	orrs	r0, r2
  400252:	6758      	str	r0, [r3, #116]	; 0x74
            break;
  400254:	e01c      	b.n	400290 <pinMode+0xcc>
        case PERIPH_D:
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
  400256:	2201      	movs	r2, #1
  400258:	fa02 f000 	lsl.w	r0, r2, r0
  40025c:	685a      	ldr	r2, [r3, #4]
  40025e:	4302      	orrs	r2, r0
  400260:	605a      	str	r2, [r3, #4]
            port->PIO_ABCDSR1 |=  (1 << offset); // Sets the peripheral which controls a pin
  400262:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400264:	4302      	orrs	r2, r0
  400266:	671a      	str	r2, [r3, #112]	; 0x70
            port->PIO_ABCDSR2 |=  (1 << offset); // Sets the peripheral which controls a pin
  400268:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40026a:	4310      	orrs	r0, r2
  40026c:	6758      	str	r0, [r3, #116]	; 0x74
            break;
  40026e:	e00f      	b.n	400290 <pinMode+0xcc>
        case PULL_DOWN:
            port->PIO_PUDR    |=  (1 << offset); // Disables the pull-up resistor
  400270:	2201      	movs	r2, #1
  400272:	4082      	lsls	r2, r0
  400274:	6e19      	ldr	r1, [r3, #96]	; 0x60
  400276:	4311      	orrs	r1, r2
  400278:	6619      	str	r1, [r3, #96]	; 0x60
            port->PIO_PPDER   |=  (1 << offset); // Enables the pull-down resistor
  40027a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
  40027e:	430a      	orrs	r2, r1
  400280:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        case FLOATING:
            port->PIO_PUDR    |=  (1 << offset); // Disables the pull-down resistor
  400284:	2301      	movs	r3, #1
  400286:	fa03 f000 	lsl.w	r0, r3, r0
  40028a:	6e23      	ldr	r3, [r4, #96]	; 0x60
  40028c:	4303      	orrs	r3, r0
  40028e:	6623      	str	r3, [r4, #96]	; 0x60
    }
}
  400290:	bc10      	pop	{r4}
  400292:	4770      	bx	lr
  400294:	400e0e00 	.word	0x400e0e00
  400298:	400e1000 	.word	0x400e1000

0040029c <digitalWrite>:
    int offset = pin % 32;
    return ((port->PIO_PDSR) >> offset) & 1;
}

// Writes a digital voltage to a pin configured as an output I/O line
void digitalWrite(int pin, int val) {
  40029c:	b410      	push	{r4}
    return pin >> 5;
  40029e:	1144      	asrs	r4, r0, #5
    return (uint32_t) (port ? PIOB : PIOA);
  4002a0:	4a0d      	ldr	r2, [pc, #52]	; (4002d8 <digitalWrite+0x3c>)
  4002a2:	4b0e      	ldr	r3, [pc, #56]	; (4002dc <digitalWrite+0x40>)
  4002a4:	2c00      	cmp	r4, #0
  4002a6:	bf08      	it	eq
  4002a8:	4613      	moveq	r3, r2
    Pio* port = (Pio*) pinToBase(pin);
    int offset = pin % 32;
  4002aa:	4242      	negs	r2, r0
  4002ac:	f000 001f 	and.w	r0, r0, #31
  4002b0:	f002 021f 	and.w	r2, r2, #31
  4002b4:	bf58      	it	pl
  4002b6:	4250      	negpl	r0, r2
    if (val) {
  4002b8:	b939      	cbnz	r1, 4002ca <digitalWrite+0x2e>
        port->PIO_SODR |= (1 << offset);
    } else {
        port->PIO_CODR |= (1 << offset);
  4002ba:	2201      	movs	r2, #1
  4002bc:	fa02 f000 	lsl.w	r0, r2, r0
  4002c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  4002c2:	4302      	orrs	r2, r0
  4002c4:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
  4002c6:	bc10      	pop	{r4}
  4002c8:	4770      	bx	lr
        port->PIO_SODR |= (1 << offset);
  4002ca:	2201      	movs	r2, #1
  4002cc:	fa02 f000 	lsl.w	r0, r2, r0
  4002d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4002d2:	4302      	orrs	r2, r0
  4002d4:	631a      	str	r2, [r3, #48]	; 0x30
  4002d6:	e7f6      	b.n	4002c6 <digitalWrite+0x2a>
  4002d8:	400e0e00 	.word	0x400e0e00
  4002dc:	400e1000 	.word	0x400e1000

004002e0 <uartInit>:
 *	 2: Space (forced to 0)
 *	 3: Mark (forced to 1)
 *	 4: No (no parity)
 * Baud Rate =  MCK/(16*CD), CD is an unsigned short
 */	
void uartInit(int parity, int CD) {
  4002e0:	b538      	push	{r3, r4, r5, lr}
  4002e2:	460c      	mov	r4, r1
	pinMode(9, PERIPH_A);		  // Set URXD0 pin mode
  4002e4:	2102      	movs	r1, #2
  4002e6:	2009      	movs	r0, #9
  4002e8:	4d0c      	ldr	r5, [pc, #48]	; (40031c <uartInit+0x3c>)
  4002ea:	47a8      	blx	r5
	pinMode(10, PERIPH_A);		  // Set ITXD0 pin mode
  4002ec:	2102      	movs	r1, #2
  4002ee:	200a      	movs	r0, #10
  4002f0:	47a8      	blx	r5

	REG_UART_CR   |= 1 << 6; // Enable transmitter
  4002f2:	4b0b      	ldr	r3, [pc, #44]	; (400320 <uartInit+0x40>)
  4002f4:	681a      	ldr	r2, [r3, #0]
  4002f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4002fa:	601a      	str	r2, [r3, #0]
	REG_UART_CR   |= 1 << 4; // Enable receiver
  4002fc:	681a      	ldr	r2, [r3, #0]
  4002fe:	f042 0210 	orr.w	r2, r2, #16
  400302:	601a      	str	r2, [r3, #0]
	
	// Parity
	//REG_UART_MR   |= parity << 9;    
	//REG_UART_MR   &= ~(parity << 9);
	REG_UART_MR   |= 1 << 11;
  400304:	3304      	adds	r3, #4
  400306:	681a      	ldr	r2, [r3, #0]
  400308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40030c:	601a      	str	r2, [r3, #0]
	REG_UART_MR   &= ~((0x3) << 9);
  40030e:	681a      	ldr	r2, [r3, #0]
  400310:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  400314:	601a      	str	r2, [r3, #0]
	
	REG_UART_BRGR = CD;	  // Set baud rate divider
  400316:	331c      	adds	r3, #28
  400318:	601c      	str	r4, [r3, #0]
  40031a:	bd38      	pop	{r3, r4, r5, pc}
  40031c:	004001c5 	.word	0x004001c5
  400320:	400e0600 	.word	0x400e0600

00400324 <uartTx>:
}

// Transmits a character (1 byte) over UART
void uartTx(char data) {
	while (!((REG_UART_SR >> 1) & 1)); // Wait until previous data has been transmitted
  400324:	4a03      	ldr	r2, [pc, #12]	; (400334 <uartTx+0x10>)
  400326:	6813      	ldr	r3, [r2, #0]
  400328:	f013 0f02 	tst.w	r3, #2
  40032c:	d0fb      	beq.n	400326 <uartTx+0x2>
	REG_UART_THR = data; // Write data into holding register for transmit
  40032e:	4b02      	ldr	r3, [pc, #8]	; (400338 <uartTx+0x14>)
  400330:	6018      	str	r0, [r3, #0]
  400332:	4770      	bx	lr
  400334:	400e0614 	.word	0x400e0614
  400338:	400e061c 	.word	0x400e061c

0040033c <uartRx>:
}

// Returns a character (1 byte) received over UART
char uartRx() {
	while(!((REG_UART_SR) & 1)); // Wait until data has been received
  40033c:	4a04      	ldr	r2, [pc, #16]	; (400350 <uartRx+0x14>)
  40033e:	6813      	ldr	r3, [r2, #0]
  400340:	f013 0f01 	tst.w	r3, #1
  400344:	d0fb      	beq.n	40033e <uartRx+0x2>
	return (char) REG_UART_RHR; // Return received data in holding register
  400346:	4b03      	ldr	r3, [pc, #12]	; (400354 <uartRx+0x18>)
  400348:	6818      	ldr	r0, [r3, #0]
	
}
  40034a:	b2c0      	uxtb	r0, r0
  40034c:	4770      	bx	lr
  40034e:	bf00      	nop
  400350:	400e0614 	.word	0x400e0614
  400354:	400e0618 	.word	0x400e0618

00400358 <samInit>:
/////////////////////////////////////////////////////////////////////
void samInit() {
    //Many peripherals on the SAM4S are write protected: unless the correct password is written in a peripheral memory address, write access to peripheral control registers is disabled. This is done for security reasons, but is not necessary in this header file. In the first part of this function, we enable write access to the PMC, PIO, SPI, and UART by writing a password into the peripheral's Write Protect Mode Register (WPMR)

	//disabling PMC write protection (Password: "PMC")
    *((uint32_t *) REG_PMC_WPMR) = PMC_WPMR_WPKEY_PASSWD;
  400358:	4a10      	ldr	r2, [pc, #64]	; (40039c <samInit+0x44>)
  40035a:	4b11      	ldr	r3, [pc, #68]	; (4003a0 <samInit+0x48>)
  40035c:	601a      	str	r2, [r3, #0]
	//disabling PIO write protection (Password: "PIO")
    Pio* pioBaseA = (Pio*) PIOA;
    Pio* pioBaseB = (Pio*) PIOB;
    pioBaseA->PIO_WPMR = PIO_WPMR_WPKEY_PASSWD;
  40035e:	4b11      	ldr	r3, [pc, #68]	; (4003a4 <samInit+0x4c>)
  400360:	4a11      	ldr	r2, [pc, #68]	; (4003a8 <samInit+0x50>)
  400362:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    pioBaseB->PIO_WPMR = PIO_WPMR_WPKEY_PASSWD;
  400366:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40036a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	//disabling SPI write protection (Password: "SPI")
    *((uint32_t *) REG_SPI_WPMR) = SPI_WPMR_WPKEY_PASSWD;
  40036e:	4b0f      	ldr	r3, [pc, #60]	; (4003ac <samInit+0x54>)
  400370:	681b      	ldr	r3, [r3, #0]
  400372:	4a0f      	ldr	r2, [pc, #60]	; (4003b0 <samInit+0x58>)
  400374:	601a      	str	r2, [r3, #0]
	//There is no UART write protection

	//disabling timer write protection (Password: "TIM")
    Tc* tcBase0 = (Tc*) TC0;
    Tc* tcBase1 = (Tc*) TC1;
    tcBase0->TC_WPMR = TC_WPMR_WPKEY_PASSWD;
  400376:	4b0f      	ldr	r3, [pc, #60]	; (4003b4 <samInit+0x5c>)
  400378:	4a0f      	ldr	r2, [pc, #60]	; (4003b8 <samInit+0x60>)
  40037a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    tcBase1->TC_WPMR = TC_WPMR_WPKEY_PASSWD;
  40037e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
  400382:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    //Activating clocks for UART 0 (PID 8), PIO A (PID 11), SPI (PID 21), TC0 (Timer/Counter CH0) (PID 23)

	*((uint32_t *) REG_PMC_PCER0) |= (1<<8);
	*((uint32_t *) REG_PMC_PCER0) |= (1<<11);
	*((uint32_t *) REG_PMC_PCER0) |= (1<<21);
	*((uint32_t *) REG_PMC_PCER0) |= (1<<23);
  400386:	f502 224c 	add.w	r2, r2, #835584	; 0xcc000
  40038a:	f502 6282 	add.w	r2, r2, #1040	; 0x410
  40038e:	6813      	ldr	r3, [r2, #0]
  400390:	f443 0320 	orr.w	r3, r3, #10485760	; 0xa00000
  400394:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
  400398:	6013      	str	r3, [r2, #0]
  40039a:	4770      	bx	lr
  40039c:	504d4300 	.word	0x504d4300
  4003a0:	400e04e4 	.word	0x400e04e4
  4003a4:	50494f00 	.word	0x50494f00
  4003a8:	400e0e00 	.word	0x400e0e00
  4003ac:	400080e4 	.word	0x400080e4
  4003b0:	53504900 	.word	0x53504900
  4003b4:	54494d00 	.word	0x54494d00
  4003b8:	40010000 	.word	0x40010000

004003bc <transmitWebpage>:
		}	
			
    }
}

void transmitWebpage() {
  4003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(TRANSMIT_PIN, LOW);
  4003be:	2100      	movs	r1, #0
  4003c0:	2012      	movs	r0, #18
  4003c2:	4b17      	ldr	r3, [pc, #92]	; (400420 <transmitWebpage+0x64>)
  4003c4:	4798      	blx	r3
	for (int charCount = 0; charCount < webpageStartChars; charCount++) {
  4003c6:	2400      	movs	r4, #0
		uartTx(webpageStart[charCount]);
  4003c8:	4d16      	ldr	r5, [pc, #88]	; (400424 <transmitWebpage+0x68>)
  4003ca:	4e17      	ldr	r6, [pc, #92]	; (400428 <transmitWebpage+0x6c>)
		if (webpageStart[charCount] == '\n') {uartTx('\r');}
  4003cc:	270d      	movs	r7, #13
  4003ce:	e004      	b.n	4003da <transmitWebpage+0x1e>
	for (int charCount = 0; charCount < webpageStartChars; charCount++) {
  4003d0:	3401      	adds	r4, #1
  4003d2:	f240 1301 	movw	r3, #257	; 0x101
  4003d6:	429c      	cmp	r4, r3
  4003d8:	d009      	beq.n	4003ee <transmitWebpage+0x32>
		uartTx(webpageStart[charCount]);
  4003da:	682b      	ldr	r3, [r5, #0]
  4003dc:	5d18      	ldrb	r0, [r3, r4]
  4003de:	47b0      	blx	r6
		if (webpageStart[charCount] == '\n') {uartTx('\r');}
  4003e0:	682b      	ldr	r3, [r5, #0]
  4003e2:	5d1b      	ldrb	r3, [r3, r4]
  4003e4:	2b0a      	cmp	r3, #10
  4003e6:	d1f3      	bne.n	4003d0 <transmitWebpage+0x14>
  4003e8:	4638      	mov	r0, r7
  4003ea:	47b0      	blx	r6
  4003ec:	e7f0      	b.n	4003d0 <transmitWebpage+0x14>
  4003ee:	2400      	movs	r4, #0
	}
	for (int charCount = 0; charCount < webpageEndChars; charCount++) {
		uartTx(webpageEnd[charCount]);
  4003f0:	4d0c      	ldr	r5, [pc, #48]	; (400424 <transmitWebpage+0x68>)
  4003f2:	4e0d      	ldr	r6, [pc, #52]	; (400428 <transmitWebpage+0x6c>)
		if (webpageEnd[charCount] == '\n') {uartTx('\r');}
  4003f4:	270d      	movs	r7, #13
  4003f6:	e003      	b.n	400400 <transmitWebpage+0x44>
	for (int charCount = 0; charCount < webpageEndChars; charCount++) {
  4003f8:	3401      	adds	r4, #1
  4003fa:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
  4003fe:	d009      	beq.n	400414 <transmitWebpage+0x58>
		uartTx(webpageEnd[charCount]);
  400400:	686b      	ldr	r3, [r5, #4]
  400402:	5d18      	ldrb	r0, [r3, r4]
  400404:	47b0      	blx	r6
		if (webpageEnd[charCount] == '\n') {uartTx('\r');}
  400406:	686b      	ldr	r3, [r5, #4]
  400408:	5d1b      	ldrb	r3, [r3, r4]
  40040a:	2b0a      	cmp	r3, #10
  40040c:	d1f4      	bne.n	4003f8 <transmitWebpage+0x3c>
  40040e:	4638      	mov	r0, r7
  400410:	47b0      	blx	r6
  400412:	e7f1      	b.n	4003f8 <transmitWebpage+0x3c>
	}	
	digitalWrite(TRANSMIT_PIN, HIGH);
  400414:	2101      	movs	r1, #1
  400416:	2012      	movs	r0, #18
  400418:	4b01      	ldr	r3, [pc, #4]	; (400420 <transmitWebpage+0x64>)
  40041a:	4798      	blx	r3
  40041c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40041e:	bf00      	nop
  400420:	0040029d 	.word	0x0040029d
  400424:	20000000 	.word	0x20000000
  400428:	00400325 	.word	0x00400325

0040042c <main>:
int main(void) {
  40042c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400430:	b085      	sub	sp, #20
	samInit();
  400432:	4b3f      	ldr	r3, [pc, #252]	; (400530 <main+0x104>)
  400434:	4798      	blx	r3
	pinMode(LED_PIN, OUTPUT);
  400436:	2101      	movs	r1, #1
  400438:	2011      	movs	r0, #17
  40043a:	4d3e      	ldr	r5, [pc, #248]	; (400534 <main+0x108>)
  40043c:	47a8      	blx	r5
	digitalWrite(LED_PIN, HIGH);
  40043e:	2101      	movs	r1, #1
  400440:	2011      	movs	r0, #17
  400442:	4c3d      	ldr	r4, [pc, #244]	; (400538 <main+0x10c>)
  400444:	47a0      	blx	r4
	pinMode(TRANSMIT_PIN, OUTPUT);
  400446:	2101      	movs	r1, #1
  400448:	2012      	movs	r0, #18
  40044a:	47a8      	blx	r5
	digitalWrite(TRANSMIT_PIN, HIGH);
  40044c:	2101      	movs	r1, #1
  40044e:	2012      	movs	r0, #18
  400450:	47a0      	blx	r4
	uartInit(4, 25);
  400452:	2119      	movs	r1, #25
  400454:	2004      	movs	r0, #4
  400456:	4b39      	ldr	r3, [pc, #228]	; (40053c <main+0x110>)
  400458:	4798      	blx	r3
	char request[14] = "               ";
  40045a:	4b39      	ldr	r3, [pc, #228]	; (400540 <main+0x114>)
  40045c:	466c      	mov	r4, sp
  40045e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400460:	c407      	stmia	r4!, {r0, r1, r2}
  400462:	8023      	strh	r3, [r4, #0]
	transmitWebpage();
  400464:	4b37      	ldr	r3, [pc, #220]	; (400544 <main+0x118>)
  400466:	4798      	blx	r3
	int currentRequestChar = 0;
  400468:	2500      	movs	r5, #0
		currentRxState = ((REG_UART_SR) & 1);
  40046a:	4c37      	ldr	r4, [pc, #220]	; (400548 <main+0x11c>)
			character = uartRx();
  40046c:	4f37      	ldr	r7, [pc, #220]	; (40054c <main+0x120>)
			int startInString = strchr(request, requestStart);
  40046e:	4e38      	ldr	r6, [pc, #224]	; (400550 <main+0x124>)
  400470:	e010      	b.n	400494 <main+0x68>
					digitalWrite(LED_PIN, LOW);
  400472:	2100      	movs	r1, #0
  400474:	2011      	movs	r0, #17
  400476:	4b30      	ldr	r3, [pc, #192]	; (400538 <main+0x10c>)
  400478:	4798      	blx	r3
  40047a:	e041      	b.n	400500 <main+0xd4>
  40047c:	f10d 33ff 	add.w	r3, sp, #4294967295
  400480:	f10d 010d 	add.w	r1, sp, #13
					request[i] = ' ';
  400484:	2220      	movs	r2, #32
  400486:	f803 2f01 	strb.w	r2, [r3, #1]!
				for (int i = 0; i < 14; i++) {
  40048a:	428b      	cmp	r3, r1
  40048c:	d1fb      	bne.n	400486 <main+0x5a>
				transmitWebpage();				
  40048e:	4b2d      	ldr	r3, [pc, #180]	; (400544 <main+0x118>)
  400490:	4798      	blx	r3
			currentRequestChar += 1;
  400492:	3501      	adds	r5, #1
		currentRxState = ((REG_UART_SR) & 1);
  400494:	6823      	ldr	r3, [r4, #0]
		if (currentRxState == 1) { //if there is a character to read
  400496:	f013 0f01 	tst.w	r3, #1
  40049a:	d0fb      	beq.n	400494 <main+0x68>
			if(currentRequestChar == 14) {
  40049c:	2d0e      	cmp	r5, #14
  40049e:	d037      	beq.n	400510 <main+0xe4>
			character = uartRx();
  4004a0:	47b8      	blx	r7
			request[currentRequestChar] = character;
  4004a2:	ab04      	add	r3, sp, #16
  4004a4:	442b      	add	r3, r5
  4004a6:	f803 0c10 	strb.w	r0, [r3, #-16]
			int startInString = strchr(request, requestStart);
  4004aa:	213c      	movs	r1, #60	; 0x3c
  4004ac:	4668      	mov	r0, sp
  4004ae:	47b0      	blx	r6
  4004b0:	4680      	mov	r8, r0
			int endInString   = strchr(request, requestEnd);
  4004b2:	213e      	movs	r1, #62	; 0x3e
  4004b4:	4668      	mov	r0, sp
  4004b6:	47b0      	blx	r6
			if (startInString != 0 && currentRequestChar >= 2 && request[0] != requestStart) {
  4004b8:	f1b8 0f00 	cmp.w	r8, #0
  4004bc:	d0e9      	beq.n	400492 <main+0x66>
  4004be:	2d01      	cmp	r5, #1
  4004c0:	dd0f      	ble.n	4004e2 <main+0xb6>
  4004c2:	f89d 3000 	ldrb.w	r3, [sp]
  4004c6:	2b3c      	cmp	r3, #60	; 0x3c
  4004c8:	d00b      	beq.n	4004e2 <main+0xb6>
				request[0] = '<';
  4004ca:	ab04      	add	r3, sp, #16
  4004cc:	223c      	movs	r2, #60	; 0x3c
  4004ce:	f803 2d10 	strb.w	r2, [r3, #-16]!
  4004d2:	f10d 010d 	add.w	r1, sp, #13
					request[i] = ' ';
  4004d6:	2220      	movs	r2, #32
  4004d8:	f803 2f01 	strb.w	r2, [r3, #1]!
				for (int i = 1; i < 14; i++) {
  4004dc:	428b      	cmp	r3, r1
  4004de:	d1fb      	bne.n	4004d8 <main+0xac>
				currentRequestChar = 0;
  4004e0:	2500      	movs	r5, #0
			if (startInString != 0 && endInString != 0) {
  4004e2:	2800      	cmp	r0, #0
  4004e4:	d0d5      	beq.n	400492 <main+0x66>
				int ledOnInString = strstr(request, "on");
  4004e6:	491b      	ldr	r1, [pc, #108]	; (400554 <main+0x128>)
  4004e8:	4668      	mov	r0, sp
  4004ea:	f8df 8070 	ldr.w	r8, [pc, #112]	; 40055c <main+0x130>
  4004ee:	47c0      	blx	r8
  4004f0:	4681      	mov	r9, r0
				int ledOffInString = strstr(request, "off");
  4004f2:	4919      	ldr	r1, [pc, #100]	; (400558 <main+0x12c>)
  4004f4:	4668      	mov	r0, sp
  4004f6:	47c0      	blx	r8
  4004f8:	4680      	mov	r8, r0
				if(ledOnInString != 0) {
  4004fa:	f1b9 0f00 	cmp.w	r9, #0
  4004fe:	d1b8      	bne.n	400472 <main+0x46>
				if(ledOffInString != 0) {
  400500:	f1b8 0f00 	cmp.w	r8, #0
  400504:	d0ba      	beq.n	40047c <main+0x50>
					digitalWrite(LED_PIN, HIGH);
  400506:	2101      	movs	r1, #1
  400508:	2011      	movs	r0, #17
  40050a:	4b0b      	ldr	r3, [pc, #44]	; (400538 <main+0x10c>)
  40050c:	4798      	blx	r3
  40050e:	e7b5      	b.n	40047c <main+0x50>
			character = uartRx();
  400510:	47b8      	blx	r7
			request[currentRequestChar] = character;
  400512:	f10d 0810 	add.w	r8, sp, #16
  400516:	f808 0d10 	strb.w	r0, [r8, #-16]!
			int startInString = strchr(request, requestStart);
  40051a:	213c      	movs	r1, #60	; 0x3c
  40051c:	4640      	mov	r0, r8
  40051e:	47b0      	blx	r6
  400520:	4605      	mov	r5, r0
			int endInString   = strchr(request, requestEnd);
  400522:	213e      	movs	r1, #62	; 0x3e
  400524:	4640      	mov	r0, r8
  400526:	47b0      	blx	r6
			if (startInString != 0 && currentRequestChar >= 2 && request[0] != requestStart) {
  400528:	2d00      	cmp	r5, #0
  40052a:	d0b2      	beq.n	400492 <main+0x66>
				currentRequestChar = 0;
  40052c:	2500      	movs	r5, #0
  40052e:	e7d8      	b.n	4004e2 <main+0xb6>
  400530:	00400359 	.word	0x00400359
  400534:	004001c5 	.word	0x004001c5
  400538:	0040029d 	.word	0x0040029d
  40053c:	004002e1 	.word	0x004002e1
  400540:	00400d6c 	.word	0x00400d6c
  400544:	004003bd 	.word	0x004003bd
  400548:	400e0614 	.word	0x400e0614
  40054c:	0040033d 	.word	0x0040033d
  400550:	004005b1 	.word	0x004005b1
  400554:	00400d84 	.word	0x00400d84
  400558:	00400d88 	.word	0x00400d88
  40055c:	00400949 	.word	0x00400949

00400560 <__libc_init_array>:
  400560:	b570      	push	{r4, r5, r6, lr}
  400562:	4e0f      	ldr	r6, [pc, #60]	; (4005a0 <__libc_init_array+0x40>)
  400564:	4d0f      	ldr	r5, [pc, #60]	; (4005a4 <__libc_init_array+0x44>)
  400566:	1b76      	subs	r6, r6, r5
  400568:	10b6      	asrs	r6, r6, #2
  40056a:	bf18      	it	ne
  40056c:	2400      	movne	r4, #0
  40056e:	d005      	beq.n	40057c <__libc_init_array+0x1c>
  400570:	3401      	adds	r4, #1
  400572:	f855 3b04 	ldr.w	r3, [r5], #4
  400576:	4798      	blx	r3
  400578:	42a6      	cmp	r6, r4
  40057a:	d1f9      	bne.n	400570 <__libc_init_array+0x10>
  40057c:	4e0a      	ldr	r6, [pc, #40]	; (4005a8 <__libc_init_array+0x48>)
  40057e:	4d0b      	ldr	r5, [pc, #44]	; (4005ac <__libc_init_array+0x4c>)
  400580:	f000 fd0c 	bl	400f9c <_init>
  400584:	1b76      	subs	r6, r6, r5
  400586:	10b6      	asrs	r6, r6, #2
  400588:	bf18      	it	ne
  40058a:	2400      	movne	r4, #0
  40058c:	d006      	beq.n	40059c <__libc_init_array+0x3c>
  40058e:	3401      	adds	r4, #1
  400590:	f855 3b04 	ldr.w	r3, [r5], #4
  400594:	4798      	blx	r3
  400596:	42a6      	cmp	r6, r4
  400598:	d1f9      	bne.n	40058e <__libc_init_array+0x2e>
  40059a:	bd70      	pop	{r4, r5, r6, pc}
  40059c:	bd70      	pop	{r4, r5, r6, pc}
  40059e:	bf00      	nop
  4005a0:	00400fa8 	.word	0x00400fa8
  4005a4:	00400fa8 	.word	0x00400fa8
  4005a8:	00400fb0 	.word	0x00400fb0
  4005ac:	00400fa8 	.word	0x00400fa8

004005b0 <strchr>:
  4005b0:	b2c9      	uxtb	r1, r1
  4005b2:	2900      	cmp	r1, #0
  4005b4:	d041      	beq.n	40063a <strchr+0x8a>
  4005b6:	0782      	lsls	r2, r0, #30
  4005b8:	b4f0      	push	{r4, r5, r6, r7}
  4005ba:	d067      	beq.n	40068c <strchr+0xdc>
  4005bc:	7803      	ldrb	r3, [r0, #0]
  4005be:	2b00      	cmp	r3, #0
  4005c0:	d068      	beq.n	400694 <strchr+0xe4>
  4005c2:	4299      	cmp	r1, r3
  4005c4:	d037      	beq.n	400636 <strchr+0x86>
  4005c6:	1c43      	adds	r3, r0, #1
  4005c8:	e004      	b.n	4005d4 <strchr+0x24>
  4005ca:	f813 0b01 	ldrb.w	r0, [r3], #1
  4005ce:	b390      	cbz	r0, 400636 <strchr+0x86>
  4005d0:	4281      	cmp	r1, r0
  4005d2:	d02f      	beq.n	400634 <strchr+0x84>
  4005d4:	079a      	lsls	r2, r3, #30
  4005d6:	461c      	mov	r4, r3
  4005d8:	d1f7      	bne.n	4005ca <strchr+0x1a>
  4005da:	6825      	ldr	r5, [r4, #0]
  4005dc:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  4005e0:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  4005e4:	ea83 0605 	eor.w	r6, r3, r5
  4005e8:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  4005ec:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  4005f0:	ea20 0006 	bic.w	r0, r0, r6
  4005f4:	ea22 0205 	bic.w	r2, r2, r5
  4005f8:	4302      	orrs	r2, r0
  4005fa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4005fe:	d111      	bne.n	400624 <strchr+0x74>
  400600:	4620      	mov	r0, r4
  400602:	f850 6f04 	ldr.w	r6, [r0, #4]!
  400606:	ea83 0706 	eor.w	r7, r3, r6
  40060a:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  40060e:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  400612:	ea25 0507 	bic.w	r5, r5, r7
  400616:	ea22 0206 	bic.w	r2, r2, r6
  40061a:	432a      	orrs	r2, r5
  40061c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  400620:	d0ef      	beq.n	400602 <strchr+0x52>
  400622:	4604      	mov	r4, r0
  400624:	7820      	ldrb	r0, [r4, #0]
  400626:	b918      	cbnz	r0, 400630 <strchr+0x80>
  400628:	e005      	b.n	400636 <strchr+0x86>
  40062a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  40062e:	b110      	cbz	r0, 400636 <strchr+0x86>
  400630:	4281      	cmp	r1, r0
  400632:	d1fa      	bne.n	40062a <strchr+0x7a>
  400634:	4620      	mov	r0, r4
  400636:	bcf0      	pop	{r4, r5, r6, r7}
  400638:	4770      	bx	lr
  40063a:	0783      	lsls	r3, r0, #30
  40063c:	d024      	beq.n	400688 <strchr+0xd8>
  40063e:	7803      	ldrb	r3, [r0, #0]
  400640:	2b00      	cmp	r3, #0
  400642:	d0f9      	beq.n	400638 <strchr+0x88>
  400644:	1c43      	adds	r3, r0, #1
  400646:	e003      	b.n	400650 <strchr+0xa0>
  400648:	7802      	ldrb	r2, [r0, #0]
  40064a:	3301      	adds	r3, #1
  40064c:	2a00      	cmp	r2, #0
  40064e:	d0f3      	beq.n	400638 <strchr+0x88>
  400650:	0799      	lsls	r1, r3, #30
  400652:	4618      	mov	r0, r3
  400654:	d1f8      	bne.n	400648 <strchr+0x98>
  400656:	6819      	ldr	r1, [r3, #0]
  400658:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40065c:	ea22 0201 	bic.w	r2, r2, r1
  400660:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  400664:	d108      	bne.n	400678 <strchr+0xc8>
  400666:	f853 1f04 	ldr.w	r1, [r3, #4]!
  40066a:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40066e:	ea22 0201 	bic.w	r2, r2, r1
  400672:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  400676:	d0f6      	beq.n	400666 <strchr+0xb6>
  400678:	781a      	ldrb	r2, [r3, #0]
  40067a:	4618      	mov	r0, r3
  40067c:	b142      	cbz	r2, 400690 <strchr+0xe0>
  40067e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  400682:	2b00      	cmp	r3, #0
  400684:	d1fb      	bne.n	40067e <strchr+0xce>
  400686:	4770      	bx	lr
  400688:	4603      	mov	r3, r0
  40068a:	e7e4      	b.n	400656 <strchr+0xa6>
  40068c:	4604      	mov	r4, r0
  40068e:	e7a4      	b.n	4005da <strchr+0x2a>
  400690:	4618      	mov	r0, r3
  400692:	4770      	bx	lr
  400694:	4618      	mov	r0, r3
  400696:	e7ce      	b.n	400636 <strchr+0x86>

00400698 <critical_factorization>:
  400698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40069c:	f04f 0e01 	mov.w	lr, #1
  4006a0:	2500      	movs	r5, #0
  4006a2:	4674      	mov	r4, lr
  4006a4:	f04f 36ff 	mov.w	r6, #4294967295
  4006a8:	192b      	adds	r3, r5, r4
  4006aa:	428b      	cmp	r3, r1
  4006ac:	eb00 0706 	add.w	r7, r0, r6
  4006b0:	d20d      	bcs.n	4006ce <critical_factorization+0x36>
  4006b2:	5d3f      	ldrb	r7, [r7, r4]
  4006b4:	f810 c003 	ldrb.w	ip, [r0, r3]
  4006b8:	45bc      	cmp	ip, r7
  4006ba:	d22d      	bcs.n	400718 <critical_factorization+0x80>
  4006bc:	461d      	mov	r5, r3
  4006be:	2401      	movs	r4, #1
  4006c0:	eba3 0e06 	sub.w	lr, r3, r6
  4006c4:	192b      	adds	r3, r5, r4
  4006c6:	428b      	cmp	r3, r1
  4006c8:	eb00 0706 	add.w	r7, r0, r6
  4006cc:	d3f1      	bcc.n	4006b2 <critical_factorization+0x1a>
  4006ce:	f04f 0801 	mov.w	r8, #1
  4006d2:	2500      	movs	r5, #0
  4006d4:	4644      	mov	r4, r8
  4006d6:	f04f 37ff 	mov.w	r7, #4294967295
  4006da:	f8c2 e000 	str.w	lr, [r2]
  4006de:	192b      	adds	r3, r5, r4
  4006e0:	4299      	cmp	r1, r3
  4006e2:	eb00 0e07 	add.w	lr, r0, r7
  4006e6:	d90e      	bls.n	400706 <critical_factorization+0x6e>
  4006e8:	f81e e004 	ldrb.w	lr, [lr, r4]
  4006ec:	f810 c003 	ldrb.w	ip, [r0, r3]
  4006f0:	45f4      	cmp	ip, lr
  4006f2:	d918      	bls.n	400726 <critical_factorization+0x8e>
  4006f4:	461d      	mov	r5, r3
  4006f6:	2401      	movs	r4, #1
  4006f8:	eba3 0807 	sub.w	r8, r3, r7
  4006fc:	192b      	adds	r3, r5, r4
  4006fe:	4299      	cmp	r1, r3
  400700:	eb00 0e07 	add.w	lr, r0, r7
  400704:	d8f0      	bhi.n	4006e8 <critical_factorization+0x50>
  400706:	3701      	adds	r7, #1
  400708:	1c70      	adds	r0, r6, #1
  40070a:	4287      	cmp	r7, r0
  40070c:	bf24      	itt	cs
  40070e:	4638      	movcs	r0, r7
  400710:	f8c2 8000 	strcs.w	r8, [r2]
  400714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400718:	d00c      	beq.n	400734 <critical_factorization+0x9c>
  40071a:	f04f 0e01 	mov.w	lr, #1
  40071e:	462e      	mov	r6, r5
  400720:	4674      	mov	r4, lr
  400722:	4475      	add	r5, lr
  400724:	e7c0      	b.n	4006a8 <critical_factorization+0x10>
  400726:	d00b      	beq.n	400740 <critical_factorization+0xa8>
  400728:	f04f 0801 	mov.w	r8, #1
  40072c:	462f      	mov	r7, r5
  40072e:	4644      	mov	r4, r8
  400730:	4445      	add	r5, r8
  400732:	e7d4      	b.n	4006de <critical_factorization+0x46>
  400734:	4574      	cmp	r4, lr
  400736:	bf12      	itee	ne
  400738:	3401      	addne	r4, #1
  40073a:	461d      	moveq	r5, r3
  40073c:	2401      	moveq	r4, #1
  40073e:	e7b3      	b.n	4006a8 <critical_factorization+0x10>
  400740:	4544      	cmp	r4, r8
  400742:	bf12      	itee	ne
  400744:	3401      	addne	r4, #1
  400746:	461d      	moveq	r5, r3
  400748:	2401      	moveq	r4, #1
  40074a:	e7c8      	b.n	4006de <critical_factorization+0x46>

0040074c <two_way_long_needle>:
  40074c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400750:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  400754:	4616      	mov	r6, r2
  400756:	4605      	mov	r5, r0
  400758:	468b      	mov	fp, r1
  40075a:	4610      	mov	r0, r2
  40075c:	4619      	mov	r1, r3
  40075e:	aa03      	add	r2, sp, #12
  400760:	461c      	mov	r4, r3
  400762:	f7ff ff99 	bl	400698 <critical_factorization>
  400766:	4681      	mov	r9, r0
  400768:	ab03      	add	r3, sp, #12
  40076a:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  40076e:	f843 4f04 	str.w	r4, [r3, #4]!
  400772:	4293      	cmp	r3, r2
  400774:	d1fb      	bne.n	40076e <two_way_long_needle+0x22>
  400776:	b14c      	cbz	r4, 40078c <two_way_long_needle+0x40>
  400778:	1e63      	subs	r3, r4, #1
  40077a:	1e72      	subs	r2, r6, #1
  40077c:	a804      	add	r0, sp, #16
  40077e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  400782:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  400786:	f113 33ff 	adds.w	r3, r3, #4294967295
  40078a:	d2f8      	bcs.n	40077e <two_way_long_needle+0x32>
  40078c:	9903      	ldr	r1, [sp, #12]
  40078e:	464a      	mov	r2, r9
  400790:	4431      	add	r1, r6
  400792:	4630      	mov	r0, r6
  400794:	f000 fa58 	bl	400c48 <memcmp>
  400798:	2800      	cmp	r0, #0
  40079a:	d16f      	bne.n	40087c <two_way_long_needle+0x130>
  40079c:	f109 33ff 	add.w	r3, r9, #4294967295
  4007a0:	9300      	str	r3, [sp, #0]
  4007a2:	18f3      	adds	r3, r6, r3
  4007a4:	4682      	mov	sl, r0
  4007a6:	9301      	str	r3, [sp, #4]
  4007a8:	4623      	mov	r3, r4
  4007aa:	4680      	mov	r8, r0
  4007ac:	4654      	mov	r4, sl
  4007ae:	4658      	mov	r0, fp
  4007b0:	469a      	mov	sl, r3
  4007b2:	eb08 070a 	add.w	r7, r8, sl
  4007b6:	1a3a      	subs	r2, r7, r0
  4007b8:	2100      	movs	r1, #0
  4007ba:	4428      	add	r0, r5
  4007bc:	f000 f9fe 	bl	400bbc <memchr>
  4007c0:	2800      	cmp	r0, #0
  4007c2:	d156      	bne.n	400872 <two_way_long_needle+0x126>
  4007c4:	2f00      	cmp	r7, #0
  4007c6:	d054      	beq.n	400872 <two_way_long_needle+0x126>
  4007c8:	19eb      	adds	r3, r5, r7
  4007ca:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  4007ce:	ab04      	add	r3, sp, #16
  4007d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4007d4:	b14b      	cbz	r3, 4007ea <two_way_long_needle+0x9e>
  4007d6:	b124      	cbz	r4, 4007e2 <two_way_long_needle+0x96>
  4007d8:	9a03      	ldr	r2, [sp, #12]
  4007da:	4293      	cmp	r3, r2
  4007dc:	d201      	bcs.n	4007e2 <two_way_long_needle+0x96>
  4007de:	ebaa 0302 	sub.w	r3, sl, r2
  4007e2:	4498      	add	r8, r3
  4007e4:	2400      	movs	r4, #0
  4007e6:	4638      	mov	r0, r7
  4007e8:	e7e3      	b.n	4007b2 <two_way_long_needle+0x66>
  4007ea:	454c      	cmp	r4, r9
  4007ec:	4623      	mov	r3, r4
  4007ee:	bf38      	it	cc
  4007f0:	464b      	movcc	r3, r9
  4007f2:	f10a 3eff 	add.w	lr, sl, #4294967295
  4007f6:	4573      	cmp	r3, lr
  4007f8:	d213      	bcs.n	400822 <two_way_long_needle+0xd6>
  4007fa:	eb08 0203 	add.w	r2, r8, r3
  4007fe:	5ca8      	ldrb	r0, [r5, r2]
  400800:	f816 c003 	ldrb.w	ip, [r6, r3]
  400804:	442a      	add	r2, r5
  400806:	4584      	cmp	ip, r0
  400808:	eb06 0103 	add.w	r1, r6, r3
  40080c:	d006      	beq.n	40081c <two_way_long_needle+0xd0>
  40080e:	e02c      	b.n	40086a <two_way_long_needle+0x11e>
  400810:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  400814:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  400818:	4584      	cmp	ip, r0
  40081a:	d126      	bne.n	40086a <two_way_long_needle+0x11e>
  40081c:	3301      	adds	r3, #1
  40081e:	4573      	cmp	r3, lr
  400820:	d3f6      	bcc.n	400810 <two_way_long_needle+0xc4>
  400822:	454c      	cmp	r4, r9
  400824:	9900      	ldr	r1, [sp, #0]
  400826:	f080 8089 	bcs.w	40093c <two_way_long_needle+0x1f0>
  40082a:	9b00      	ldr	r3, [sp, #0]
  40082c:	eb08 0203 	add.w	r2, r8, r3
  400830:	9b01      	ldr	r3, [sp, #4]
  400832:	5ca8      	ldrb	r0, [r5, r2]
  400834:	781b      	ldrb	r3, [r3, #0]
  400836:	442a      	add	r2, r5
  400838:	4298      	cmp	r0, r3
  40083a:	d17f      	bne.n	40093c <two_way_long_needle+0x1f0>
  40083c:	9801      	ldr	r0, [sp, #4]
  40083e:	f104 3bff 	add.w	fp, r4, #4294967295
  400842:	e006      	b.n	400852 <two_way_long_needle+0x106>
  400844:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  400848:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  40084c:	45f4      	cmp	ip, lr
  40084e:	d103      	bne.n	400858 <two_way_long_needle+0x10c>
  400850:	4619      	mov	r1, r3
  400852:	1e4b      	subs	r3, r1, #1
  400854:	459b      	cmp	fp, r3
  400856:	d1f5      	bne.n	400844 <two_way_long_needle+0xf8>
  400858:	3401      	adds	r4, #1
  40085a:	428c      	cmp	r4, r1
  40085c:	d870      	bhi.n	400940 <two_way_long_needle+0x1f4>
  40085e:	9c03      	ldr	r4, [sp, #12]
  400860:	4638      	mov	r0, r7
  400862:	44a0      	add	r8, r4
  400864:	ebaa 0404 	sub.w	r4, sl, r4
  400868:	e7a3      	b.n	4007b2 <two_way_long_needle+0x66>
  40086a:	f1c9 0201 	rsb	r2, r9, #1
  40086e:	4490      	add	r8, r2
  400870:	e7b7      	b.n	4007e2 <two_way_long_needle+0x96>
  400872:	2000      	movs	r0, #0
  400874:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  400878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40087c:	eba4 0309 	sub.w	r3, r4, r9
  400880:	454b      	cmp	r3, r9
  400882:	bf38      	it	cc
  400884:	464b      	movcc	r3, r9
  400886:	f109 38ff 	add.w	r8, r9, #4294967295
  40088a:	3301      	adds	r3, #1
  40088c:	9303      	str	r3, [sp, #12]
  40088e:	eb06 0308 	add.w	r3, r6, r8
  400892:	4658      	mov	r0, fp
  400894:	f04f 0a00 	mov.w	sl, #0
  400898:	46cb      	mov	fp, r9
  40089a:	4699      	mov	r9, r3
  40089c:	eb0a 0704 	add.w	r7, sl, r4
  4008a0:	1a3a      	subs	r2, r7, r0
  4008a2:	2100      	movs	r1, #0
  4008a4:	4428      	add	r0, r5
  4008a6:	f000 f989 	bl	400bbc <memchr>
  4008aa:	2800      	cmp	r0, #0
  4008ac:	d1e1      	bne.n	400872 <two_way_long_needle+0x126>
  4008ae:	2f00      	cmp	r7, #0
  4008b0:	d0df      	beq.n	400872 <two_way_long_needle+0x126>
  4008b2:	19eb      	adds	r3, r5, r7
  4008b4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  4008b8:	ab04      	add	r3, sp, #16
  4008ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4008be:	bba3      	cbnz	r3, 40092a <two_way_long_needle+0x1de>
  4008c0:	1e60      	subs	r0, r4, #1
  4008c2:	4583      	cmp	fp, r0
  4008c4:	d215      	bcs.n	4008f2 <two_way_long_needle+0x1a6>
  4008c6:	eb0a 020b 	add.w	r2, sl, fp
  4008ca:	f815 e002 	ldrb.w	lr, [r5, r2]
  4008ce:	f816 300b 	ldrb.w	r3, [r6, fp]
  4008d2:	442a      	add	r2, r5
  4008d4:	459e      	cmp	lr, r3
  4008d6:	eb06 010b 	add.w	r1, r6, fp
  4008da:	465b      	mov	r3, fp
  4008dc:	d006      	beq.n	4008ec <two_way_long_needle+0x1a0>
  4008de:	e027      	b.n	400930 <two_way_long_needle+0x1e4>
  4008e0:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  4008e4:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  4008e8:	45f4      	cmp	ip, lr
  4008ea:	d121      	bne.n	400930 <two_way_long_needle+0x1e4>
  4008ec:	3301      	adds	r3, #1
  4008ee:	4283      	cmp	r3, r0
  4008f0:	d3f6      	bcc.n	4008e0 <two_way_long_needle+0x194>
  4008f2:	f1b8 3fff 	cmp.w	r8, #4294967295
  4008f6:	d011      	beq.n	40091c <two_way_long_needle+0x1d0>
  4008f8:	eb0a 0208 	add.w	r2, sl, r8
  4008fc:	5cab      	ldrb	r3, [r5, r2]
  4008fe:	f899 1000 	ldrb.w	r1, [r9]
  400902:	442a      	add	r2, r5
  400904:	4299      	cmp	r1, r3
  400906:	d10f      	bne.n	400928 <two_way_long_needle+0x1dc>
  400908:	464b      	mov	r3, r9
  40090a:	e005      	b.n	400918 <two_way_long_needle+0x1cc>
  40090c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  400910:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  400914:	4288      	cmp	r0, r1
  400916:	d107      	bne.n	400928 <two_way_long_needle+0x1dc>
  400918:	42b3      	cmp	r3, r6
  40091a:	d1f7      	bne.n	40090c <two_way_long_needle+0x1c0>
  40091c:	eb05 000a 	add.w	r0, r5, sl
  400920:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  400924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400928:	9b03      	ldr	r3, [sp, #12]
  40092a:	449a      	add	sl, r3
  40092c:	4638      	mov	r0, r7
  40092e:	e7b5      	b.n	40089c <two_way_long_needle+0x150>
  400930:	f1cb 0201 	rsb	r2, fp, #1
  400934:	4492      	add	sl, r2
  400936:	449a      	add	sl, r3
  400938:	4638      	mov	r0, r7
  40093a:	e7af      	b.n	40089c <two_way_long_needle+0x150>
  40093c:	4649      	mov	r1, r9
  40093e:	e78b      	b.n	400858 <two_way_long_needle+0x10c>
  400940:	eb05 0008 	add.w	r0, r5, r8
  400944:	e796      	b.n	400874 <two_way_long_needle+0x128>
  400946:	bf00      	nop

00400948 <strstr>:
  400948:	7802      	ldrb	r2, [r0, #0]
  40094a:	2a00      	cmp	r2, #0
  40094c:	f000 8101 	beq.w	400b52 <strstr+0x20a>
  400950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400954:	f891 8000 	ldrb.w	r8, [r1]
  400958:	b085      	sub	sp, #20
  40095a:	4644      	mov	r4, r8
  40095c:	f1b8 0f00 	cmp.w	r8, #0
  400960:	d016      	beq.n	400990 <strstr+0x48>
  400962:	4686      	mov	lr, r0
  400964:	f101 0c01 	add.w	ip, r1, #1
  400968:	2701      	movs	r7, #1
  40096a:	e004      	b.n	400976 <strstr+0x2e>
  40096c:	4663      	mov	r3, ip
  40096e:	f813 4b01 	ldrb.w	r4, [r3], #1
  400972:	b164      	cbz	r4, 40098e <strstr+0x46>
  400974:	469c      	mov	ip, r3
  400976:	42a2      	cmp	r2, r4
  400978:	bf14      	ite	ne
  40097a:	2700      	movne	r7, #0
  40097c:	f007 0701 	andeq.w	r7, r7, #1
  400980:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  400984:	2a00      	cmp	r2, #0
  400986:	d1f1      	bne.n	40096c <strstr+0x24>
  400988:	f89c 3000 	ldrb.w	r3, [ip]
  40098c:	b9fb      	cbnz	r3, 4009ce <strstr+0x86>
  40098e:	b117      	cbz	r7, 400996 <strstr+0x4e>
  400990:	b005      	add	sp, #20
  400992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400996:	460e      	mov	r6, r1
  400998:	4605      	mov	r5, r0
  40099a:	4641      	mov	r1, r8
  40099c:	3001      	adds	r0, #1
  40099e:	ebac 0406 	sub.w	r4, ip, r6
  4009a2:	f7ff fe05 	bl	4005b0 <strchr>
  4009a6:	4607      	mov	r7, r0
  4009a8:	b188      	cbz	r0, 4009ce <strstr+0x86>
  4009aa:	2c01      	cmp	r4, #1
  4009ac:	d0f0      	beq.n	400990 <strstr+0x48>
  4009ae:	1928      	adds	r0, r5, r4
  4009b0:	4287      	cmp	r7, r0
  4009b2:	bf8c      	ite	hi
  4009b4:	2101      	movhi	r1, #1
  4009b6:	1bc1      	subls	r1, r0, r7
  4009b8:	2c1f      	cmp	r4, #31
  4009ba:	468b      	mov	fp, r1
  4009bc:	d90b      	bls.n	4009d6 <strstr+0x8e>
  4009be:	4623      	mov	r3, r4
  4009c0:	4632      	mov	r2, r6
  4009c2:	4638      	mov	r0, r7
  4009c4:	f7ff fec2 	bl	40074c <two_way_long_needle>
  4009c8:	b005      	add	sp, #20
  4009ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4009ce:	2000      	movs	r0, #0
  4009d0:	b005      	add	sp, #20
  4009d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4009d6:	aa03      	add	r2, sp, #12
  4009d8:	4621      	mov	r1, r4
  4009da:	4630      	mov	r0, r6
  4009dc:	f7ff fe5c 	bl	400698 <critical_factorization>
  4009e0:	9903      	ldr	r1, [sp, #12]
  4009e2:	4680      	mov	r8, r0
  4009e4:	4602      	mov	r2, r0
  4009e6:	4431      	add	r1, r6
  4009e8:	4630      	mov	r0, r6
  4009ea:	f000 f92d 	bl	400c48 <memcmp>
  4009ee:	2800      	cmp	r0, #0
  4009f0:	d157      	bne.n	400aa2 <strstr+0x15a>
  4009f2:	4681      	mov	r9, r0
  4009f4:	4605      	mov	r5, r0
  4009f6:	46b2      	mov	sl, r6
  4009f8:	4658      	mov	r0, fp
  4009fa:	f108 33ff 	add.w	r3, r8, #4294967295
  4009fe:	9300      	str	r3, [sp, #0]
  400a00:	18f3      	adds	r3, r6, r3
  400a02:	9301      	str	r3, [sp, #4]
  400a04:	1966      	adds	r6, r4, r5
  400a06:	1a32      	subs	r2, r6, r0
  400a08:	2100      	movs	r1, #0
  400a0a:	4438      	add	r0, r7
  400a0c:	f000 f8d6 	bl	400bbc <memchr>
  400a10:	2800      	cmp	r0, #0
  400a12:	d1dc      	bne.n	4009ce <strstr+0x86>
  400a14:	2e00      	cmp	r6, #0
  400a16:	d0da      	beq.n	4009ce <strstr+0x86>
  400a18:	45c8      	cmp	r8, r9
  400a1a:	4643      	mov	r3, r8
  400a1c:	bf38      	it	cc
  400a1e:	464b      	movcc	r3, r9
  400a20:	429c      	cmp	r4, r3
  400a22:	d912      	bls.n	400a4a <strstr+0x102>
  400a24:	195a      	adds	r2, r3, r5
  400a26:	5cb9      	ldrb	r1, [r7, r2]
  400a28:	f81a 0003 	ldrb.w	r0, [sl, r3]
  400a2c:	443a      	add	r2, r7
  400a2e:	4288      	cmp	r0, r1
  400a30:	eb0a 0e03 	add.w	lr, sl, r3
  400a34:	d006      	beq.n	400a44 <strstr+0xfc>
  400a36:	e02c      	b.n	400a92 <strstr+0x14a>
  400a38:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  400a3c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  400a40:	4288      	cmp	r0, r1
  400a42:	d126      	bne.n	400a92 <strstr+0x14a>
  400a44:	3301      	adds	r3, #1
  400a46:	429c      	cmp	r4, r3
  400a48:	d1f6      	bne.n	400a38 <strstr+0xf0>
  400a4a:	45c8      	cmp	r8, r9
  400a4c:	9900      	ldr	r1, [sp, #0]
  400a4e:	f240 8083 	bls.w	400b58 <strstr+0x210>
  400a52:	9b00      	ldr	r3, [sp, #0]
  400a54:	18ea      	adds	r2, r5, r3
  400a56:	9b01      	ldr	r3, [sp, #4]
  400a58:	5cb8      	ldrb	r0, [r7, r2]
  400a5a:	781b      	ldrb	r3, [r3, #0]
  400a5c:	443a      	add	r2, r7
  400a5e:	4298      	cmp	r0, r3
  400a60:	d17a      	bne.n	400b58 <strstr+0x210>
  400a62:	9801      	ldr	r0, [sp, #4]
  400a64:	f109 3bff 	add.w	fp, r9, #4294967295
  400a68:	e006      	b.n	400a78 <strstr+0x130>
  400a6a:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  400a6e:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  400a72:	45f4      	cmp	ip, lr
  400a74:	d103      	bne.n	400a7e <strstr+0x136>
  400a76:	4619      	mov	r1, r3
  400a78:	1e4b      	subs	r3, r1, #1
  400a7a:	455b      	cmp	r3, fp
  400a7c:	d1f5      	bne.n	400a6a <strstr+0x122>
  400a7e:	f109 0901 	add.w	r9, r9, #1
  400a82:	4589      	cmp	r9, r1
  400a84:	d857      	bhi.n	400b36 <strstr+0x1ee>
  400a86:	9b03      	ldr	r3, [sp, #12]
  400a88:	4630      	mov	r0, r6
  400a8a:	441d      	add	r5, r3
  400a8c:	eba4 0903 	sub.w	r9, r4, r3
  400a90:	e7b8      	b.n	400a04 <strstr+0xbc>
  400a92:	f1c8 0201 	rsb	r2, r8, #1
  400a96:	4415      	add	r5, r2
  400a98:	441d      	add	r5, r3
  400a9a:	f04f 0900 	mov.w	r9, #0
  400a9e:	4630      	mov	r0, r6
  400aa0:	e7b0      	b.n	400a04 <strstr+0xbc>
  400aa2:	eba4 0308 	sub.w	r3, r4, r8
  400aa6:	4543      	cmp	r3, r8
  400aa8:	bf38      	it	cc
  400aaa:	4643      	movcc	r3, r8
  400aac:	f108 39ff 	add.w	r9, r8, #4294967295
  400ab0:	3301      	adds	r3, #1
  400ab2:	9303      	str	r3, [sp, #12]
  400ab4:	eb06 0309 	add.w	r3, r6, r9
  400ab8:	4658      	mov	r0, fp
  400aba:	2500      	movs	r5, #0
  400abc:	46bb      	mov	fp, r7
  400abe:	469a      	mov	sl, r3
  400ac0:	1967      	adds	r7, r4, r5
  400ac2:	1a3a      	subs	r2, r7, r0
  400ac4:	2100      	movs	r1, #0
  400ac6:	4458      	add	r0, fp
  400ac8:	f000 f878 	bl	400bbc <memchr>
  400acc:	2800      	cmp	r0, #0
  400ace:	f47f af7e 	bne.w	4009ce <strstr+0x86>
  400ad2:	2f00      	cmp	r7, #0
  400ad4:	f43f af7b 	beq.w	4009ce <strstr+0x86>
  400ad8:	4544      	cmp	r4, r8
  400ada:	d915      	bls.n	400b08 <strstr+0x1c0>
  400adc:	eb08 0205 	add.w	r2, r8, r5
  400ae0:	f81b 0002 	ldrb.w	r0, [fp, r2]
  400ae4:	f816 3008 	ldrb.w	r3, [r6, r8]
  400ae8:	445a      	add	r2, fp
  400aea:	4298      	cmp	r0, r3
  400aec:	eb06 0108 	add.w	r1, r6, r8
  400af0:	4643      	mov	r3, r8
  400af2:	d006      	beq.n	400b02 <strstr+0x1ba>
  400af4:	e023      	b.n	400b3e <strstr+0x1f6>
  400af6:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  400afa:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  400afe:	4586      	cmp	lr, r0
  400b00:	d11d      	bne.n	400b3e <strstr+0x1f6>
  400b02:	3301      	adds	r3, #1
  400b04:	429c      	cmp	r4, r3
  400b06:	d1f6      	bne.n	400af6 <strstr+0x1ae>
  400b08:	f1b9 3fff 	cmp.w	r9, #4294967295
  400b0c:	d012      	beq.n	400b34 <strstr+0x1ec>
  400b0e:	eb05 0209 	add.w	r2, r5, r9
  400b12:	f81b 1002 	ldrb.w	r1, [fp, r2]
  400b16:	f89a 3000 	ldrb.w	r3, [sl]
  400b1a:	445a      	add	r2, fp
  400b1c:	4299      	cmp	r1, r3
  400b1e:	d114      	bne.n	400b4a <strstr+0x202>
  400b20:	4653      	mov	r3, sl
  400b22:	e005      	b.n	400b30 <strstr+0x1e8>
  400b24:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  400b28:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  400b2c:	4288      	cmp	r0, r1
  400b2e:	d10c      	bne.n	400b4a <strstr+0x202>
  400b30:	42b3      	cmp	r3, r6
  400b32:	d1f7      	bne.n	400b24 <strstr+0x1dc>
  400b34:	465f      	mov	r7, fp
  400b36:	1978      	adds	r0, r7, r5
  400b38:	b005      	add	sp, #20
  400b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400b3e:	f1c8 0201 	rsb	r2, r8, #1
  400b42:	4415      	add	r5, r2
  400b44:	441d      	add	r5, r3
  400b46:	4638      	mov	r0, r7
  400b48:	e7ba      	b.n	400ac0 <strstr+0x178>
  400b4a:	9b03      	ldr	r3, [sp, #12]
  400b4c:	4638      	mov	r0, r7
  400b4e:	441d      	add	r5, r3
  400b50:	e7b6      	b.n	400ac0 <strstr+0x178>
  400b52:	780b      	ldrb	r3, [r1, #0]
  400b54:	b913      	cbnz	r3, 400b5c <strstr+0x214>
  400b56:	4770      	bx	lr
  400b58:	4641      	mov	r1, r8
  400b5a:	e790      	b.n	400a7e <strstr+0x136>
  400b5c:	2000      	movs	r0, #0
  400b5e:	4770      	bx	lr

00400b60 <register_fini>:
  400b60:	4b02      	ldr	r3, [pc, #8]	; (400b6c <register_fini+0xc>)
  400b62:	b113      	cbz	r3, 400b6a <register_fini+0xa>
  400b64:	4802      	ldr	r0, [pc, #8]	; (400b70 <register_fini+0x10>)
  400b66:	f000 b805 	b.w	400b74 <atexit>
  400b6a:	4770      	bx	lr
  400b6c:	00000000 	.word	0x00000000
  400b70:	00400b81 	.word	0x00400b81

00400b74 <atexit>:
  400b74:	2300      	movs	r3, #0
  400b76:	4601      	mov	r1, r0
  400b78:	461a      	mov	r2, r3
  400b7a:	4618      	mov	r0, r3
  400b7c:	f000 b894 	b.w	400ca8 <__register_exitproc>

00400b80 <__libc_fini_array>:
  400b80:	b538      	push	{r3, r4, r5, lr}
  400b82:	4c0a      	ldr	r4, [pc, #40]	; (400bac <__libc_fini_array+0x2c>)
  400b84:	4d0a      	ldr	r5, [pc, #40]	; (400bb0 <__libc_fini_array+0x30>)
  400b86:	1b64      	subs	r4, r4, r5
  400b88:	10a4      	asrs	r4, r4, #2
  400b8a:	d00a      	beq.n	400ba2 <__libc_fini_array+0x22>
  400b8c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400b90:	3b01      	subs	r3, #1
  400b92:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400b96:	3c01      	subs	r4, #1
  400b98:	f855 3904 	ldr.w	r3, [r5], #-4
  400b9c:	4798      	blx	r3
  400b9e:	2c00      	cmp	r4, #0
  400ba0:	d1f9      	bne.n	400b96 <__libc_fini_array+0x16>
  400ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400ba6:	f000 ba03 	b.w	400fb0 <_fini>
  400baa:	bf00      	nop
  400bac:	00400fc0 	.word	0x00400fc0
  400bb0:	00400fbc 	.word	0x00400fbc

00400bb4 <__retarget_lock_acquire_recursive>:
  400bb4:	4770      	bx	lr
  400bb6:	bf00      	nop

00400bb8 <__retarget_lock_release_recursive>:
  400bb8:	4770      	bx	lr
  400bba:	bf00      	nop

00400bbc <memchr>:
  400bbc:	0783      	lsls	r3, r0, #30
  400bbe:	b470      	push	{r4, r5, r6}
  400bc0:	b2cd      	uxtb	r5, r1
  400bc2:	d03d      	beq.n	400c40 <memchr+0x84>
  400bc4:	1e54      	subs	r4, r2, #1
  400bc6:	b30a      	cbz	r2, 400c0c <memchr+0x50>
  400bc8:	7803      	ldrb	r3, [r0, #0]
  400bca:	42ab      	cmp	r3, r5
  400bcc:	d01f      	beq.n	400c0e <memchr+0x52>
  400bce:	1c43      	adds	r3, r0, #1
  400bd0:	e005      	b.n	400bde <memchr+0x22>
  400bd2:	f114 34ff 	adds.w	r4, r4, #4294967295
  400bd6:	d319      	bcc.n	400c0c <memchr+0x50>
  400bd8:	7802      	ldrb	r2, [r0, #0]
  400bda:	42aa      	cmp	r2, r5
  400bdc:	d017      	beq.n	400c0e <memchr+0x52>
  400bde:	f013 0f03 	tst.w	r3, #3
  400be2:	4618      	mov	r0, r3
  400be4:	f103 0301 	add.w	r3, r3, #1
  400be8:	d1f3      	bne.n	400bd2 <memchr+0x16>
  400bea:	2c03      	cmp	r4, #3
  400bec:	d811      	bhi.n	400c12 <memchr+0x56>
  400bee:	b34c      	cbz	r4, 400c44 <memchr+0x88>
  400bf0:	7803      	ldrb	r3, [r0, #0]
  400bf2:	42ab      	cmp	r3, r5
  400bf4:	d00b      	beq.n	400c0e <memchr+0x52>
  400bf6:	4404      	add	r4, r0
  400bf8:	1c43      	adds	r3, r0, #1
  400bfa:	e002      	b.n	400c02 <memchr+0x46>
  400bfc:	7802      	ldrb	r2, [r0, #0]
  400bfe:	42aa      	cmp	r2, r5
  400c00:	d005      	beq.n	400c0e <memchr+0x52>
  400c02:	429c      	cmp	r4, r3
  400c04:	4618      	mov	r0, r3
  400c06:	f103 0301 	add.w	r3, r3, #1
  400c0a:	d1f7      	bne.n	400bfc <memchr+0x40>
  400c0c:	2000      	movs	r0, #0
  400c0e:	bc70      	pop	{r4, r5, r6}
  400c10:	4770      	bx	lr
  400c12:	0209      	lsls	r1, r1, #8
  400c14:	b289      	uxth	r1, r1
  400c16:	4329      	orrs	r1, r5
  400c18:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  400c1c:	6803      	ldr	r3, [r0, #0]
  400c1e:	4606      	mov	r6, r0
  400c20:	404b      	eors	r3, r1
  400c22:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  400c26:	ea22 0303 	bic.w	r3, r2, r3
  400c2a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  400c2e:	f100 0004 	add.w	r0, r0, #4
  400c32:	d103      	bne.n	400c3c <memchr+0x80>
  400c34:	3c04      	subs	r4, #4
  400c36:	2c03      	cmp	r4, #3
  400c38:	d8f0      	bhi.n	400c1c <memchr+0x60>
  400c3a:	e7d8      	b.n	400bee <memchr+0x32>
  400c3c:	4630      	mov	r0, r6
  400c3e:	e7d7      	b.n	400bf0 <memchr+0x34>
  400c40:	4614      	mov	r4, r2
  400c42:	e7d2      	b.n	400bea <memchr+0x2e>
  400c44:	4620      	mov	r0, r4
  400c46:	e7e2      	b.n	400c0e <memchr+0x52>

00400c48 <memcmp>:
  400c48:	2a03      	cmp	r2, #3
  400c4a:	b470      	push	{r4, r5, r6}
  400c4c:	d922      	bls.n	400c94 <memcmp+0x4c>
  400c4e:	ea40 0301 	orr.w	r3, r0, r1
  400c52:	079b      	lsls	r3, r3, #30
  400c54:	d011      	beq.n	400c7a <memcmp+0x32>
  400c56:	7803      	ldrb	r3, [r0, #0]
  400c58:	780c      	ldrb	r4, [r1, #0]
  400c5a:	42a3      	cmp	r3, r4
  400c5c:	d11d      	bne.n	400c9a <memcmp+0x52>
  400c5e:	440a      	add	r2, r1
  400c60:	3101      	adds	r1, #1
  400c62:	e005      	b.n	400c70 <memcmp+0x28>
  400c64:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  400c68:	f811 4b01 	ldrb.w	r4, [r1], #1
  400c6c:	42a3      	cmp	r3, r4
  400c6e:	d114      	bne.n	400c9a <memcmp+0x52>
  400c70:	4291      	cmp	r1, r2
  400c72:	d1f7      	bne.n	400c64 <memcmp+0x1c>
  400c74:	2000      	movs	r0, #0
  400c76:	bc70      	pop	{r4, r5, r6}
  400c78:	4770      	bx	lr
  400c7a:	680d      	ldr	r5, [r1, #0]
  400c7c:	6806      	ldr	r6, [r0, #0]
  400c7e:	460c      	mov	r4, r1
  400c80:	42ae      	cmp	r6, r5
  400c82:	4603      	mov	r3, r0
  400c84:	f101 0104 	add.w	r1, r1, #4
  400c88:	f100 0004 	add.w	r0, r0, #4
  400c8c:	d108      	bne.n	400ca0 <memcmp+0x58>
  400c8e:	3a04      	subs	r2, #4
  400c90:	2a03      	cmp	r2, #3
  400c92:	d8f2      	bhi.n	400c7a <memcmp+0x32>
  400c94:	2a00      	cmp	r2, #0
  400c96:	d1de      	bne.n	400c56 <memcmp+0xe>
  400c98:	e7ec      	b.n	400c74 <memcmp+0x2c>
  400c9a:	1b18      	subs	r0, r3, r4
  400c9c:	bc70      	pop	{r4, r5, r6}
  400c9e:	4770      	bx	lr
  400ca0:	4621      	mov	r1, r4
  400ca2:	4618      	mov	r0, r3
  400ca4:	e7d7      	b.n	400c56 <memcmp+0xe>
  400ca6:	bf00      	nop

00400ca8 <__register_exitproc>:
  400ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400cac:	4d2c      	ldr	r5, [pc, #176]	; (400d60 <__register_exitproc+0xb8>)
  400cae:	4606      	mov	r6, r0
  400cb0:	6828      	ldr	r0, [r5, #0]
  400cb2:	4698      	mov	r8, r3
  400cb4:	460f      	mov	r7, r1
  400cb6:	4691      	mov	r9, r2
  400cb8:	f7ff ff7c 	bl	400bb4 <__retarget_lock_acquire_recursive>
  400cbc:	4b29      	ldr	r3, [pc, #164]	; (400d64 <__register_exitproc+0xbc>)
  400cbe:	681c      	ldr	r4, [r3, #0]
  400cc0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400cc4:	2b00      	cmp	r3, #0
  400cc6:	d03e      	beq.n	400d46 <__register_exitproc+0x9e>
  400cc8:	685a      	ldr	r2, [r3, #4]
  400cca:	2a1f      	cmp	r2, #31
  400ccc:	dc1c      	bgt.n	400d08 <__register_exitproc+0x60>
  400cce:	f102 0e01 	add.w	lr, r2, #1
  400cd2:	b176      	cbz	r6, 400cf2 <__register_exitproc+0x4a>
  400cd4:	2101      	movs	r1, #1
  400cd6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
  400cda:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
  400cde:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400ce2:	4091      	lsls	r1, r2
  400ce4:	4308      	orrs	r0, r1
  400ce6:	2e02      	cmp	r6, #2
  400ce8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400cec:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
  400cf0:	d023      	beq.n	400d3a <__register_exitproc+0x92>
  400cf2:	3202      	adds	r2, #2
  400cf4:	f8c3 e004 	str.w	lr, [r3, #4]
  400cf8:	6828      	ldr	r0, [r5, #0]
  400cfa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400cfe:	f7ff ff5b 	bl	400bb8 <__retarget_lock_release_recursive>
  400d02:	2000      	movs	r0, #0
  400d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400d08:	4b17      	ldr	r3, [pc, #92]	; (400d68 <__register_exitproc+0xc0>)
  400d0a:	b30b      	cbz	r3, 400d50 <__register_exitproc+0xa8>
  400d0c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400d10:	f3af 8000 	nop.w
  400d14:	4603      	mov	r3, r0
  400d16:	b1d8      	cbz	r0, 400d50 <__register_exitproc+0xa8>
  400d18:	2000      	movs	r0, #0
  400d1a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  400d1e:	f04f 0e01 	mov.w	lr, #1
  400d22:	6058      	str	r0, [r3, #4]
  400d24:	6019      	str	r1, [r3, #0]
  400d26:	4602      	mov	r2, r0
  400d28:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400d2c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400d30:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
  400d34:	2e00      	cmp	r6, #0
  400d36:	d0dc      	beq.n	400cf2 <__register_exitproc+0x4a>
  400d38:	e7cc      	b.n	400cd4 <__register_exitproc+0x2c>
  400d3a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
  400d3e:	4301      	orrs	r1, r0
  400d40:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
  400d44:	e7d5      	b.n	400cf2 <__register_exitproc+0x4a>
  400d46:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  400d4a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400d4e:	e7bb      	b.n	400cc8 <__register_exitproc+0x20>
  400d50:	6828      	ldr	r0, [r5, #0]
  400d52:	f7ff ff31 	bl	400bb8 <__retarget_lock_release_recursive>
  400d56:	f04f 30ff 	mov.w	r0, #4294967295
  400d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400d5e:	bf00      	nop
  400d60:	20000430 	.word	0x20000430
  400d64:	00400f98 	.word	0x00400f98
  400d68:	00000000 	.word	0x00000000
  400d6c:	20202020 	.word	0x20202020
  400d70:	20202020 	.word	0x20202020
  400d74:	20202020 	.word	0x20202020
  400d78:	00202020 	.word	0x00202020

00400d7c <webpageEndChars>:
  400d7c:	00000108                                ....

00400d80 <webpageStartChars>:
  400d80:	00000101 00006e6f 0066666f 2020200a     ....on..off..   
  400d90:	20202020 3e703c20 2044454c 746e6f43          <p>LED Cont
  400da0:	3a6c6f72 3e702f3c 2020200a 20202020     rol:</p>.       
  400db0:	6f663c20 61206d72 6f697463 6f223d6e      <form action="o
  400dc0:	0a3e226e 20202020 20202020 20202020     n">.            
  400dd0:	706e693c 74207475 3d657079 62757322     <input type="sub
  400de0:	2274696d 6c617620 223d6575 6e727554     mit" value="Turn
  400df0:	65687420 44454c20 216e6f20 3e2f2022      the LED on!" />
  400e00:	2020200a 20202020 662f3c20 3e6d726f     .        </form>
  400e10:	2020200a 20202020 6f663c20 61206d72     .        <form a
  400e20:	6f697463 6f223d6e 3e226666 2020200a     ction="off">.   
  400e30:	20202020 20202020 20202020 6e693c20                  <in
  400e40:	20747570 65707974 7573223d 74696d62     put type="submit
  400e50:	61762022 3d65756c 72755422 6874206e     " value="Turn th
  400e60:	454c2065 666f2044 20222166 200a3e2f     e LED off!" />. 
  400e70:	20202020 3c202020 726f662f 200a3e6d            </form>. 
  400e80:	3c202020 646f622f 3c0a3e79 6d74682f        </body>.</htm
  400e90:	000a3e6c 4f44213c 50595443 74682045     l>..<!DOCTYPE ht
  400ea0:	3c3e6c6d 6c6d7468 20200a3e 683c2020     ml><html>.    <h
  400eb0:	3e646165 2020200a 20202020 69743c20     ead>.        <ti
  400ec0:	3e656c74 35353145 62655720 72655320     tle>E155 Web Ser
  400ed0:	20726576 6f6d6544 62655720 65676170     ver Demo Webpage
  400ee0:	69742f3c 3e656c74 2020200a 20202020     </title>.       
  400ef0:	656d3c20 68206174 2d707474 69757165      <meta http-equi
  400f00:	72223d76 65726665 20226873 746e6f63     v="refresh" cont
  400f10:	3d746e65 30323122 200a3e22 3c202020     ent="120">.    <
  400f20:	6165682f 200a3e64 3c202020 79646f62     /head>.    <body
  400f30:	20200a3e 20202020 683c2020 31453e31     >.        <h1>E1
  400f40:	57203535 53206265 65767265 65442072     55 Web Server De
  400f50:	57206f6d 61706265 2f3c6567 0a3e3168     mo Webpage</h1>.
  400f60:	20202020 20202020 433e703c 65727275             <p>Curre
  400f70:	4d20746e 6f726369 746e6f63 6c6c6f72     nt Microcontroll
  400f80:	54207265 3a656d69 3e702f3c 2020200a     er Time:</p>.   
  400f90:	20202020 00000020                            ...

00400f98 <_global_impure_ptr>:
  400f98:	20000008                                ... 

00400f9c <_init>:
  400f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f9e:	bf00      	nop
  400fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400fa2:	bc08      	pop	{r3}
  400fa4:	469e      	mov	lr, r3
  400fa6:	4770      	bx	lr

00400fa8 <__init_array_start>:
  400fa8:	00400b61 	.word	0x00400b61

00400fac <__frame_dummy_init_array_entry>:
  400fac:	004000f1                                ..@.

00400fb0 <_fini>:
  400fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400fb2:	bf00      	nop
  400fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400fb6:	bc08      	pop	{r3}
  400fb8:	469e      	mov	lr, r3
  400fba:	4770      	bx	lr

00400fbc <__fini_array_start>:
  400fbc:	004000cd 	.word	0x004000cd
