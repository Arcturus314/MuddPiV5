
sam_backend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f40  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000444  20000000  00400f40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000444  00401384  00020444  2**2
                  ALLOC
  3 .stack        00000404  20000484  004013c4  00020444  2**0
                  ALLOC
  4 .heap         00000200  20000888  004017c8  00020444  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002046d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00004737  00000000  00000000  000204c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000069b  00000000  00000000  00024bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000016e5  00000000  00000000  00025298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001f0  00000000  00000000  0002697d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  00026b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000c64f  00000000  00000000  00026da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001012  00000000  00000000  000333f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0003ce66  00000000  00000000  00034406  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000081c  00000000  00000000  0007126c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	88 08 00 20 3d 01 40 00 39 01 40 00 39 01 40 00     ... =.@.9.@.9.@.
  400010:	39 01 40 00 39 01 40 00 39 01 40 00 00 00 00 00     9.@.9.@.9.@.....
	...
  40002c:	39 01 40 00 39 01 40 00 00 00 00 00 39 01 40 00     9.@.9.@.....9.@.
  40003c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40004c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40005c:	00 00 00 00 39 01 40 00 39 01 40 00 00 00 00 00     ....9.@.9.@.....
  40006c:	39 01 40 00 39 01 40 00 00 00 00 00 39 01 40 00     9.@.9.@.....9.@.
  40007c:	39 01 40 00 00 00 00 00 00 00 00 00 39 01 40 00     9.@.........9.@.
  40008c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40009c:	39 01 40 00 39 01 40 00 39 01 40 00 00 00 00 00     9.@.9.@.9.@.....
	...
  4000b4:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  4000c4:	39 01 40 00 39 01 40 00                             9.@.9.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000444 	.word	0x20000444
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00400f40 	.word	0x00400f40

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	b510      	push	{r4, lr}
  4000f8:	490c      	ldr	r1, [pc, #48]	; (40012c <frame_dummy+0x3c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00400f40 	.word	0x00400f40
  40012c:	20000448 	.word	0x20000448
  400130:	00400f40 	.word	0x00400f40
  400134:	00000000 	.word	0x00000000

00400138 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400138:	e7fe      	b.n	400138 <Dummy_Handler>
	...

0040013c <Reset_Handler>:
{
  40013c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  40013e:	4b18      	ldr	r3, [pc, #96]	; (4001a0 <Reset_Handler+0x64>)
  400140:	4a18      	ldr	r2, [pc, #96]	; (4001a4 <Reset_Handler+0x68>)
  400142:	429a      	cmp	r2, r3
  400144:	d010      	beq.n	400168 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  400146:	4b18      	ldr	r3, [pc, #96]	; (4001a8 <Reset_Handler+0x6c>)
  400148:	4a15      	ldr	r2, [pc, #84]	; (4001a0 <Reset_Handler+0x64>)
  40014a:	429a      	cmp	r2, r3
  40014c:	d20c      	bcs.n	400168 <Reset_Handler+0x2c>
  40014e:	3b01      	subs	r3, #1
  400150:	1a9b      	subs	r3, r3, r2
  400152:	f023 0303 	bic.w	r3, r3, #3
  400156:	3304      	adds	r3, #4
  400158:	4413      	add	r3, r2
  40015a:	4912      	ldr	r1, [pc, #72]	; (4001a4 <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
  40015c:	f851 0b04 	ldr.w	r0, [r1], #4
  400160:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400164:	429a      	cmp	r2, r3
  400166:	d1f9      	bne.n	40015c <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  400168:	4b10      	ldr	r3, [pc, #64]	; (4001ac <Reset_Handler+0x70>)
  40016a:	4a11      	ldr	r2, [pc, #68]	; (4001b0 <Reset_Handler+0x74>)
  40016c:	429a      	cmp	r2, r3
  40016e:	d20a      	bcs.n	400186 <Reset_Handler+0x4a>
  400170:	3b01      	subs	r3, #1
  400172:	1a9b      	subs	r3, r3, r2
  400174:	f023 0303 	bic.w	r3, r3, #3
  400178:	3304      	adds	r3, #4
  40017a:	4413      	add	r3, r2
                *pDest++ = 0;
  40017c:	2100      	movs	r1, #0
  40017e:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400182:	4293      	cmp	r3, r2
  400184:	d1fb      	bne.n	40017e <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400186:	4b0b      	ldr	r3, [pc, #44]	; (4001b4 <Reset_Handler+0x78>)
  400188:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
  40018c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400190:	4a09      	ldr	r2, [pc, #36]	; (4001b8 <Reset_Handler+0x7c>)
  400192:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400194:	4b09      	ldr	r3, [pc, #36]	; (4001bc <Reset_Handler+0x80>)
  400196:	4798      	blx	r3
        main();
  400198:	4b09      	ldr	r3, [pc, #36]	; (4001c0 <Reset_Handler+0x84>)
  40019a:	4798      	blx	r3
  40019c:	e7fe      	b.n	40019c <Reset_Handler+0x60>
  40019e:	bf00      	nop
  4001a0:	20000000 	.word	0x20000000
  4001a4:	00400f40 	.word	0x00400f40
  4001a8:	20000444 	.word	0x20000444
  4001ac:	20000484 	.word	0x20000484
  4001b0:	20000444 	.word	0x20000444
  4001b4:	00400000 	.word	0x00400000
  4001b8:	e000ed00 	.word	0xe000ed00
  4001bc:	004004dd 	.word	0x004004dd
  4001c0:	004003b1 	.word	0x004003b1

004001c4 <pioInit>:
////////////////////////////////////////////////////////////////////////////////////////////////////

/* Routes Master Clock to the desired peripheral, thereby enabling it.
 *    -- periphID: a PMC peripheral ID to enable, e.g. PMC_ID_PIOA */
void pmcEnablePeriph(int periphID) {
    PMC->PMC_PCER0 = 1 << periphID;
  4001c4:	4b03      	ldr	r3, [pc, #12]	; (4001d4 <pioInit+0x10>)
  4001c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4001ca:	611a      	str	r2, [r3, #16]
  4001cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4001d0:	611a      	str	r2, [r3, #16]
  4001d2:	4770      	bx	lr
  4001d4:	400e0400 	.word	0x400e0400

004001d8 <pioPinMode>:
 *    -- pin: a PIO pin ID, e.g. PIO_PA3
 *    -- function: a PIO function ID, e.g. PIO_PERIPH_C. I/O functions (PIO_INPUT, PIO_OUTPUT)
 *       and peripherals (PIO_PERIPH_A - PIO_PERIPH_D) are mutually exclusive.
 * Note: Upon reset, pins are configured as input I/O lines (as opposed to peripheral functions),
 * and the peripheral defaults to PIO_PERIPH_A. */
void pioPinMode(int pin, int function) {
  4001d8:	b410      	push	{r4}
    return pin >> 5;
  4001da:	1144      	asrs	r4, r0, #5
    return port ? PIOB : PIOA;
  4001dc:	4a2e      	ldr	r2, [pc, #184]	; (400298 <pioPinMode+0xc0>)
  4001de:	4b2f      	ldr	r3, [pc, #188]	; (40029c <pioPinMode+0xc4>)
  4001e0:	2c00      	cmp	r4, #0
  4001e2:	bf08      	it	eq
  4001e4:	4613      	moveq	r3, r2
    Pio* port = pioPinToBase(pin);
    int offset = pin % 32;
  4001e6:	4242      	negs	r2, r0
  4001e8:	f000 001f 	and.w	r0, r0, #31
  4001ec:	f002 021f 	and.w	r2, r2, #31
  4001f0:	bf58      	it	pl
  4001f2:	4250      	negpl	r0, r2

    switch (function) {
  4001f4:	2905      	cmp	r1, #5
  4001f6:	d815      	bhi.n	400224 <pioPinMode+0x4c>
  4001f8:	e8df f001 	tbb	[pc, r1]
  4001fc:	24160b03 	.word	0x24160b03
  400200:	4032      	.short	0x4032
        case PIO_INPUT:
            port->PIO_PER     |=  (1 << offset); // Sets a pin to be PIO-controlled
  400202:	6819      	ldr	r1, [r3, #0]
  400204:	2201      	movs	r2, #1
  400206:	4082      	lsls	r2, r0
  400208:	4311      	orrs	r1, r2
  40020a:	6019      	str	r1, [r3, #0]
            port->PIO_ODR     |=  (1 << offset); // Configures an I/O line as an input
  40020c:	6959      	ldr	r1, [r3, #20]
  40020e:	430a      	orrs	r2, r1
  400210:	615a      	str	r2, [r3, #20]
        case PIO_OUTPUT:
            port->PIO_PER     |=  (1 << offset); // Sets a pin to be PIO-controlled
  400212:	6819      	ldr	r1, [r3, #0]
  400214:	2201      	movs	r2, #1
  400216:	fa02 f000 	lsl.w	r0, r2, r0
  40021a:	4301      	orrs	r1, r0
  40021c:	6019      	str	r1, [r3, #0]
            port->PIO_OER     |=  (1 << offset); // Configures an I/O line as an output
  40021e:	691a      	ldr	r2, [r3, #16]
  400220:	4310      	orrs	r0, r2
  400222:	6118      	str	r0, [r3, #16]
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
            port->PIO_ABCDSR1 |=  (1 << offset); // Sets the peripheral which controls a pin
            port->PIO_ABCDSR2 |=  (1 << offset); // Sets the peripheral which controls a pin
            break;
    }
}
  400224:	bc10      	pop	{r4}
  400226:	4770      	bx	lr
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
  400228:	6859      	ldr	r1, [r3, #4]
  40022a:	2201      	movs	r2, #1
  40022c:	fa02 f000 	lsl.w	r0, r2, r0
  400230:	4301      	orrs	r1, r0
  400232:	6059      	str	r1, [r3, #4]
            port->PIO_ABCDSR1 &= ~(1 << offset); // Sets the peripheral which controls a pin
  400234:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400236:	43c0      	mvns	r0, r0
  400238:	4002      	ands	r2, r0
  40023a:	671a      	str	r2, [r3, #112]	; 0x70
            port->PIO_ABCDSR2 &= ~(1 << offset); // Sets the peripheral which controls a pin
  40023c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40023e:	4010      	ands	r0, r2
  400240:	6758      	str	r0, [r3, #116]	; 0x74
            break;
  400242:	e7ef      	b.n	400224 <pioPinMode+0x4c>
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
  400244:	6859      	ldr	r1, [r3, #4]
  400246:	2201      	movs	r2, #1
  400248:	fa02 f000 	lsl.w	r0, r2, r0
  40024c:	4301      	orrs	r1, r0
  40024e:	6059      	str	r1, [r3, #4]
            port->PIO_ABCDSR1 |=  (1 << offset); // Sets the peripheral which controls a pin
  400250:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400252:	4302      	orrs	r2, r0
  400254:	671a      	str	r2, [r3, #112]	; 0x70
            port->PIO_ABCDSR2 &= ~(1 << offset); // Sets the peripheral which controls a pin
  400256:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400258:	ea22 0000 	bic.w	r0, r2, r0
  40025c:	6758      	str	r0, [r3, #116]	; 0x74
            break;
  40025e:	e7e1      	b.n	400224 <pioPinMode+0x4c>
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
  400260:	6859      	ldr	r1, [r3, #4]
  400262:	2201      	movs	r2, #1
  400264:	fa02 f000 	lsl.w	r0, r2, r0
  400268:	4301      	orrs	r1, r0
  40026a:	6059      	str	r1, [r3, #4]
            port->PIO_ABCDSR1 &= ~(1 << offset); // Sets the peripheral which controls a pin
  40026c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40026e:	ea22 0200 	bic.w	r2, r2, r0
  400272:	671a      	str	r2, [r3, #112]	; 0x70
            port->PIO_ABCDSR2 |=  (1 << offset); // Sets the peripheral which controls a pin
  400274:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400276:	4310      	orrs	r0, r2
  400278:	6758      	str	r0, [r3, #116]	; 0x74
            break;
  40027a:	e7d3      	b.n	400224 <pioPinMode+0x4c>
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
  40027c:	6859      	ldr	r1, [r3, #4]
  40027e:	2201      	movs	r2, #1
  400280:	fa02 f000 	lsl.w	r0, r2, r0
  400284:	4301      	orrs	r1, r0
  400286:	6059      	str	r1, [r3, #4]
            port->PIO_ABCDSR1 |=  (1 << offset); // Sets the peripheral which controls a pin
  400288:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40028a:	4302      	orrs	r2, r0
  40028c:	671a      	str	r2, [r3, #112]	; 0x70
            port->PIO_ABCDSR2 |=  (1 << offset); // Sets the peripheral which controls a pin
  40028e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400290:	4310      	orrs	r0, r2
  400292:	6758      	str	r0, [r3, #116]	; 0x74
}
  400294:	e7c6      	b.n	400224 <pioPinMode+0x4c>
  400296:	bf00      	nop
  400298:	400e0e00 	.word	0x400e0e00
  40029c:	400e1000 	.word	0x400e1000

004002a0 <pioDigitalWrite>:
}

/* Writes a digital voltage to a pin configured as an output I/O line.
 *    -- pin: a PIO pin ID, e.g. PIO_PA3
 *    -- val: a PIO value ID, either PIO_HIGH or PIO_LOW */
void pioDigitalWrite(int pin, int val) {
  4002a0:	b410      	push	{r4}
    return pin >> 5;
  4002a2:	1144      	asrs	r4, r0, #5
    return port ? PIOB : PIOA;
  4002a4:	4a0d      	ldr	r2, [pc, #52]	; (4002dc <pioDigitalWrite+0x3c>)
  4002a6:	4b0e      	ldr	r3, [pc, #56]	; (4002e0 <pioDigitalWrite+0x40>)
  4002a8:	2c00      	cmp	r4, #0
  4002aa:	bf08      	it	eq
  4002ac:	4613      	moveq	r3, r2
    Pio* port = pioPinToBase(pin);
    int offset = pin % 32;
  4002ae:	4242      	negs	r2, r0
  4002b0:	f000 001f 	and.w	r0, r0, #31
  4002b4:	f002 021f 	and.w	r2, r2, #31
  4002b8:	bf58      	it	pl
  4002ba:	4250      	negpl	r0, r2
    if (val) port->PIO_SODR |= (1 << offset);
  4002bc:	b939      	cbnz	r1, 4002ce <pioDigitalWrite+0x2e>
    else     port->PIO_CODR |= (1 << offset);
  4002be:	6b59      	ldr	r1, [r3, #52]	; 0x34
  4002c0:	2201      	movs	r2, #1
  4002c2:	fa02 f000 	lsl.w	r0, r2, r0
  4002c6:	4308      	orrs	r0, r1
  4002c8:	6358      	str	r0, [r3, #52]	; 0x34
}
  4002ca:	bc10      	pop	{r4}
  4002cc:	4770      	bx	lr
    if (val) port->PIO_SODR |= (1 << offset);
  4002ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4002d0:	2201      	movs	r2, #1
  4002d2:	fa02 f000 	lsl.w	r0, r2, r0
  4002d6:	4308      	orrs	r0, r1
  4002d8:	6318      	str	r0, [r3, #48]	; 0x30
  4002da:	e7f6      	b.n	4002ca <pioDigitalWrite+0x2a>
  4002dc:	400e0e00 	.word	0x400e0e00
  4002e0:	400e1000 	.word	0x400e1000

004002e4 <uartInit>:
 *    -- CD: a 16-bit unsigned integer which determines the baud rate as follows:
 *       Baud Rate = MCK_FREQ/(16*CD)
 * Note that pin PA9 is used as receive and pin PA10 is used as transmit. pioInit() must be called
 * first. */
// *** Discuss keeping CD as is instead of changing to baud rate
void uartInit(uint32_t parity, uint16_t CD) {
  4002e4:	b570      	push	{r4, r5, r6, lr}
  4002e6:	4606      	mov	r6, r0
  4002e8:	460d      	mov	r5, r1
  4002ea:	f44f 7280 	mov.w	r2, #256	; 0x100
  4002ee:	4b0d      	ldr	r3, [pc, #52]	; (400324 <uartInit+0x40>)
  4002f0:	611a      	str	r2, [r3, #16]
    pmcEnablePeriph(PMC_ID_UART0);
    pioInit();
  4002f2:	4b0d      	ldr	r3, [pc, #52]	; (400328 <uartInit+0x44>)
  4002f4:	4798      	blx	r3

    pioPinMode(UART_URXD0_PIN, UART_FUNC); // Set URXD0 pin mode
  4002f6:	2102      	movs	r1, #2
  4002f8:	2009      	movs	r0, #9
  4002fa:	4c0c      	ldr	r4, [pc, #48]	; (40032c <uartInit+0x48>)
  4002fc:	47a0      	blx	r4
    pioPinMode(UART_ITXD0_PIN, UART_FUNC); // Set ITXD0 pin mode
  4002fe:	2102      	movs	r1, #2
  400300:	200a      	movs	r0, #10
  400302:	47a0      	blx	r4

    UART->UART_CR.TXEN = 1; // Enable transmitter
  400304:	4b0a      	ldr	r3, [pc, #40]	; (400330 <uartInit+0x4c>)
  400306:	681a      	ldr	r2, [r3, #0]
  400308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40030c:	601a      	str	r2, [r3, #0]
    UART->UART_CR.RXEN = 1; // Enable receiver
  40030e:	681a      	ldr	r2, [r3, #0]
  400310:	f042 0210 	orr.w	r2, r2, #16
  400314:	601a      	str	r2, [r3, #0]

    UART->UART_MR.PAR = parity; // Set parity
  400316:	685a      	ldr	r2, [r3, #4]
  400318:	f366 224b 	bfi	r2, r6, #9, #3
  40031c:	605a      	str	r2, [r3, #4]
    UART->UART_BRGR   = CD; // Set baud rate divisor
  40031e:	621d      	str	r5, [r3, #32]
  400320:	bd70      	pop	{r4, r5, r6, pc}
  400322:	bf00      	nop
  400324:	400e0400 	.word	0x400e0400
  400328:	004001c5 	.word	0x004001c5
  40032c:	004001d9 	.word	0x004001d9
  400330:	400e0600 	.word	0x400e0600

00400334 <uartTx>:
}

/* Transmits a character (1 byte) over UART.
 *    -- data: the character to send over UART */
void uartTx(char data) {
    while (!(UART->UART_SR.TXRDY)); // Wait until previous data has been transmitted
  400334:	4a03      	ldr	r2, [pc, #12]	; (400344 <uartTx+0x10>)
  400336:	6953      	ldr	r3, [r2, #20]
  400338:	f013 0f02 	tst.w	r3, #2
  40033c:	d0fb      	beq.n	400336 <uartTx+0x2>
    UART->UART_THR = data; // Write data into holding register for transmit
  40033e:	4b01      	ldr	r3, [pc, #4]	; (400344 <uartTx+0x10>)
  400340:	61d8      	str	r0, [r3, #28]
  400342:	4770      	bx	lr
  400344:	400e0600 	.word	0x400e0600

00400348 <uartRx>:
}

/* Checks if a character has been received over UART.
 *    -- return: true if a character has been received; false otherwise */
int uartRxReady() {
    return UART->UART_SR.RXRDY; // Check if data has been received
  400348:	4b04      	ldr	r3, [pc, #16]	; (40035c <uartRx+0x14>)
  40034a:	695b      	ldr	r3, [r3, #20]
}

/* Receives a character (1 byte) over UART.
 *    -- return: the character received over UART */
char uartRx() {
    if (uartRxReady()) return (char) UART->UART_RHR; // Return received data in holding register
  40034c:	f013 0f01 	tst.w	r3, #1
  400350:	bf1a      	itte	ne
  400352:	4b02      	ldrne	r3, [pc, #8]	; (40035c <uartRx+0x14>)
  400354:	6998      	ldrne	r0, [r3, #24]
  400356:	2000      	moveq	r0, #0
    else               return (char) 0;
}
  400358:	b2c0      	uxtb	r0, r0
  40035a:	4770      	bx	lr
  40035c:	400e0600 	.word	0x400e0600

00400360 <sendString>:
		
		
    }
}

void sendString(char* str) {
  400360:	b538      	push	{r3, r4, r5, lr}
  400362:	4604      	mov	r4, r0
	char* ptr = str;
	while (*ptr) uartTx(*ptr++);
  400364:	7800      	ldrb	r0, [r0, #0]
  400366:	b128      	cbz	r0, 400374 <sendString+0x14>
  400368:	4d03      	ldr	r5, [pc, #12]	; (400378 <sendString+0x18>)
  40036a:	47a8      	blx	r5
  40036c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  400370:	2800      	cmp	r0, #0
  400372:	d1fa      	bne.n	40036a <sendString+0xa>
  400374:	bd38      	pop	{r3, r4, r5, pc}
  400376:	bf00      	nop
  400378:	00400335 	.word	0x00400335

0040037c <inString>:
}

//determines whether a given character sequence is in a char array request, returning 1 if present, -1 if not present
int inString(char request[], char des[]) {
  40037c:	b508      	push	{r3, lr}
	if (strstr(request, des) != NULL) {return 1;}
  40037e:	4b04      	ldr	r3, [pc, #16]	; (400390 <inString+0x14>)
  400380:	4798      	blx	r3
  400382:	2800      	cmp	r0, #0
	return -1;
}
  400384:	bf14      	ite	ne
  400386:	2001      	movne	r0, #1
  400388:	f04f 30ff 	moveq.w	r0, #4294967295
  40038c:	bd08      	pop	{r3, pc}
  40038e:	bf00      	nop
  400390:	004007dd 	.word	0x004007dd

00400394 <requestInString>:

//determines if tags "REQ:" and "/REQ" are in the input string
int requestInString(char request[]) {
  400394:	b508      	push	{r3, lr}
	int tag1InString = inString(request, "/REQ:");
  400396:	4904      	ldr	r1, [pc, #16]	; (4003a8 <requestInString+0x14>)
  400398:	4b04      	ldr	r3, [pc, #16]	; (4003ac <requestInString+0x18>)
  40039a:	4798      	blx	r3
	if(tag1InString > 0) {
  40039c:	2800      	cmp	r0, #0
		return 1;
	}
	return -1;
}
  40039e:	bfcc      	ite	gt
  4003a0:	2001      	movgt	r0, #1
  4003a2:	f04f 30ff 	movle.w	r0, #4294967295
  4003a6:	bd08      	pop	{r3, pc}
  4003a8:	00400d34 	.word	0x00400d34
  4003ac:	0040037d 	.word	0x0040037d

004003b0 <main>:
{
  4003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4003b4:	b08e      	sub	sp, #56	; 0x38
////////////////////////////////////////////////////////////////////////////////////////////////////
// WDT User Functions
////////////////////////////////////////////////////////////////////////////////////////////////////

void wdtDisable() {
    WDT->WDT_MR.WDDIS = 1;
  4003b6:	4a39      	ldr	r2, [pc, #228]	; (40049c <main+0xec>)
  4003b8:	6853      	ldr	r3, [r2, #4]
  4003ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4003be:	6053      	str	r3, [r2, #4]
	pioPinMode(LED_PIN, PIO_OUTPUT);
  4003c0:	2101      	movs	r1, #1
  4003c2:	2012      	movs	r0, #18
  4003c4:	4b36      	ldr	r3, [pc, #216]	; (4004a0 <main+0xf0>)
  4003c6:	4798      	blx	r3
	pioDigitalWrite(LED_PIN, PIO_HIGH);
  4003c8:	2101      	movs	r1, #1
  4003ca:	2012      	movs	r0, #18
  4003cc:	4b35      	ldr	r3, [pc, #212]	; (4004a4 <main+0xf4>)
  4003ce:	4798      	blx	r3
	uartInit(4, 13);
  4003d0:	210d      	movs	r1, #13
  4003d2:	2004      	movs	r0, #4
  4003d4:	4b34      	ldr	r3, [pc, #208]	; (4004a8 <main+0xf8>)
  4003d6:	4798      	blx	r3
		char request[BUFF_LEN] = "                  "; //initializing to a known value
  4003d8:	f04f 0800 	mov.w	r8, #0
    return UART->UART_SR.RXRDY; // Check if data has been received
  4003dc:	4c33      	ldr	r4, [pc, #204]	; (4004ac <main+0xfc>)
		char temperature[] = "70f";
  4003de:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 4004d8 <main+0x128>
  4003e2:	e03c      	b.n	40045e <main+0xae>
			if (charIndex >= BUFF_LEN) charIndex = 0;
  4003e4:	2d20      	cmp	r5, #32
  4003e6:	bfa8      	it	ge
  4003e8:	2500      	movge	r5, #0
  4003ea:	6963      	ldr	r3, [r4, #20]
			while (!uartRxReady());
  4003ec:	f013 0f01 	tst.w	r3, #1
  4003f0:	d0fb      	beq.n	4003ea <main+0x3a>
			request[charIndex++] = uartRx();
  4003f2:	f105 0a01 	add.w	sl, r5, #1
  4003f6:	47b8      	blx	r7
  4003f8:	ab0e      	add	r3, sp, #56	; 0x38
  4003fa:	441d      	add	r5, r3
  4003fc:	f805 0c20 	strb.w	r0, [r5, #-32]
  400400:	4655      	mov	r5, sl
		while (requestInString(request) == -1) {
  400402:	a806      	add	r0, sp, #24
  400404:	47b0      	blx	r6
  400406:	f1b0 3fff 	cmp.w	r0, #4294967295
  40040a:	d0eb      	beq.n	4003e4 <main+0x34>
		if (inString(request, "ledon")) {
  40040c:	4928      	ldr	r1, [pc, #160]	; (4004b0 <main+0x100>)
  40040e:	a806      	add	r0, sp, #24
  400410:	4b28      	ldr	r3, [pc, #160]	; (4004b4 <main+0x104>)
  400412:	4798      	blx	r3
  400414:	2800      	cmp	r0, #0
  400416:	d137      	bne.n	400488 <main+0xd8>
		if (inString(request, "ledoff")) {
  400418:	4927      	ldr	r1, [pc, #156]	; (4004b8 <main+0x108>)
  40041a:	a806      	add	r0, sp, #24
  40041c:	4b25      	ldr	r3, [pc, #148]	; (4004b4 <main+0x104>)
  40041e:	4798      	blx	r3
  400420:	2800      	cmp	r0, #0
  400422:	d136      	bne.n	400492 <main+0xe2>
		char currtime[] = "12:34:56";
  400424:	4a25      	ldr	r2, [pc, #148]	; (4004bc <main+0x10c>)
  400426:	ab03      	add	r3, sp, #12
  400428:	ca07      	ldmia	r2, {r0, r1, r2}
  40042a:	c303      	stmia	r3!, {r0, r1}
  40042c:	701a      	strb	r2, [r3, #0]
		char temperature[] = "70f";
  40042e:	f8cd 9004 	str.w	r9, [sp, #4]
		char humidity[] = "30%";
  400432:	4b23      	ldr	r3, [pc, #140]	; (4004c0 <main+0x110>)
  400434:	9302      	str	r3, [sp, #8]
		sendString(webpageStart);
  400436:	4e23      	ldr	r6, [pc, #140]	; (4004c4 <main+0x114>)
  400438:	6830      	ldr	r0, [r6, #0]
  40043a:	4d23      	ldr	r5, [pc, #140]	; (4004c8 <main+0x118>)
  40043c:	47a8      	blx	r5
		sendString(microcontrollerTimeStr);
  40043e:	6870      	ldr	r0, [r6, #4]
  400440:	47a8      	blx	r5
		sendString(currtime);
  400442:	a803      	add	r0, sp, #12
  400444:	47a8      	blx	r5
		sendString(ledStr);
  400446:	68b0      	ldr	r0, [r6, #8]
  400448:	47a8      	blx	r5
		sendString(temperatureStr);
  40044a:	68f0      	ldr	r0, [r6, #12]
  40044c:	47a8      	blx	r5
		sendString(temperature);
  40044e:	a801      	add	r0, sp, #4
  400450:	47a8      	blx	r5
		sendString(humidityStr);
  400452:	6930      	ldr	r0, [r6, #16]
  400454:	47a8      	blx	r5
		sendString(humidity);
  400456:	a802      	add	r0, sp, #8
  400458:	47a8      	blx	r5
		sendString(webpageEnd);
  40045a:	6970      	ldr	r0, [r6, #20]
  40045c:	47a8      	blx	r5
		char request[BUFF_LEN] = "                  "; //initializing to a known value
  40045e:	ad06      	add	r5, sp, #24
  400460:	4e1a      	ldr	r6, [pc, #104]	; (4004cc <main+0x11c>)
  400462:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  400464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  400466:	6833      	ldr	r3, [r6, #0]
  400468:	f825 3b02 	strh.w	r3, [r5], #2
  40046c:	0c1b      	lsrs	r3, r3, #16
  40046e:	702b      	strb	r3, [r5, #0]
  400470:	f8cd 802b 	str.w	r8, [sp, #43]	; 0x2b
  400474:	f8cd 802f 	str.w	r8, [sp, #47]	; 0x2f
  400478:	f8cd 8033 	str.w	r8, [sp, #51]	; 0x33
  40047c:	f88d 8037 	strb.w	r8, [sp, #55]	; 0x37
		int  charIndex = 0;
  400480:	4645      	mov	r5, r8
		while (requestInString(request) == -1) {
  400482:	4e13      	ldr	r6, [pc, #76]	; (4004d0 <main+0x120>)
			request[charIndex++] = uartRx();
  400484:	4f13      	ldr	r7, [pc, #76]	; (4004d4 <main+0x124>)
		while (requestInString(request) == -1) {
  400486:	e7bc      	b.n	400402 <main+0x52>
			pioDigitalWrite(LED_PIN, PIO_HIGH);
  400488:	2101      	movs	r1, #1
  40048a:	2012      	movs	r0, #18
  40048c:	4b05      	ldr	r3, [pc, #20]	; (4004a4 <main+0xf4>)
  40048e:	4798      	blx	r3
  400490:	e7c2      	b.n	400418 <main+0x68>
			pioDigitalWrite(LED_PIN, PIO_LOW);
  400492:	4641      	mov	r1, r8
  400494:	2012      	movs	r0, #18
  400496:	4b03      	ldr	r3, [pc, #12]	; (4004a4 <main+0xf4>)
  400498:	4798      	blx	r3
  40049a:	e7c3      	b.n	400424 <main+0x74>
  40049c:	400e1450 	.word	0x400e1450
  4004a0:	004001d9 	.word	0x004001d9
  4004a4:	004002a1 	.word	0x004002a1
  4004a8:	004002e5 	.word	0x004002e5
  4004ac:	400e0600 	.word	0x400e0600
  4004b0:	00400d3c 	.word	0x00400d3c
  4004b4:	0040037d 	.word	0x0040037d
  4004b8:	00400d44 	.word	0x00400d44
  4004bc:	00400d4c 	.word	0x00400d4c
  4004c0:	00253033 	.word	0x00253033
  4004c4:	20000000 	.word	0x20000000
  4004c8:	00400361 	.word	0x00400361
  4004cc:	00400d14 	.word	0x00400d14
  4004d0:	00400395 	.word	0x00400395
  4004d4:	00400349 	.word	0x00400349
  4004d8:	00663037 	.word	0x00663037

004004dc <__libc_init_array>:
  4004dc:	b570      	push	{r4, r5, r6, lr}
  4004de:	4e0f      	ldr	r6, [pc, #60]	; (40051c <__libc_init_array+0x40>)
  4004e0:	4d0f      	ldr	r5, [pc, #60]	; (400520 <__libc_init_array+0x44>)
  4004e2:	1b76      	subs	r6, r6, r5
  4004e4:	10b6      	asrs	r6, r6, #2
  4004e6:	bf18      	it	ne
  4004e8:	2400      	movne	r4, #0
  4004ea:	d005      	beq.n	4004f8 <__libc_init_array+0x1c>
  4004ec:	3401      	adds	r4, #1
  4004ee:	f855 3b04 	ldr.w	r3, [r5], #4
  4004f2:	4798      	blx	r3
  4004f4:	42a6      	cmp	r6, r4
  4004f6:	d1f9      	bne.n	4004ec <__libc_init_array+0x10>
  4004f8:	4e0a      	ldr	r6, [pc, #40]	; (400524 <__libc_init_array+0x48>)
  4004fa:	4d0b      	ldr	r5, [pc, #44]	; (400528 <__libc_init_array+0x4c>)
  4004fc:	f000 fd0e 	bl	400f1c <_init>
  400500:	1b76      	subs	r6, r6, r5
  400502:	10b6      	asrs	r6, r6, #2
  400504:	bf18      	it	ne
  400506:	2400      	movne	r4, #0
  400508:	d006      	beq.n	400518 <__libc_init_array+0x3c>
  40050a:	3401      	adds	r4, #1
  40050c:	f855 3b04 	ldr.w	r3, [r5], #4
  400510:	4798      	blx	r3
  400512:	42a6      	cmp	r6, r4
  400514:	d1f9      	bne.n	40050a <__libc_init_array+0x2e>
  400516:	bd70      	pop	{r4, r5, r6, pc}
  400518:	bd70      	pop	{r4, r5, r6, pc}
  40051a:	bf00      	nop
  40051c:	00400f28 	.word	0x00400f28
  400520:	00400f28 	.word	0x00400f28
  400524:	00400f30 	.word	0x00400f30
  400528:	00400f28 	.word	0x00400f28

0040052c <critical_factorization>:
  40052c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400530:	f04f 0e01 	mov.w	lr, #1
  400534:	2500      	movs	r5, #0
  400536:	4674      	mov	r4, lr
  400538:	f04f 36ff 	mov.w	r6, #4294967295
  40053c:	192b      	adds	r3, r5, r4
  40053e:	428b      	cmp	r3, r1
  400540:	eb00 0706 	add.w	r7, r0, r6
  400544:	d20d      	bcs.n	400562 <critical_factorization+0x36>
  400546:	5d3f      	ldrb	r7, [r7, r4]
  400548:	f810 c003 	ldrb.w	ip, [r0, r3]
  40054c:	45bc      	cmp	ip, r7
  40054e:	d22d      	bcs.n	4005ac <critical_factorization+0x80>
  400550:	461d      	mov	r5, r3
  400552:	2401      	movs	r4, #1
  400554:	eba3 0e06 	sub.w	lr, r3, r6
  400558:	192b      	adds	r3, r5, r4
  40055a:	428b      	cmp	r3, r1
  40055c:	eb00 0706 	add.w	r7, r0, r6
  400560:	d3f1      	bcc.n	400546 <critical_factorization+0x1a>
  400562:	f04f 0801 	mov.w	r8, #1
  400566:	2500      	movs	r5, #0
  400568:	4644      	mov	r4, r8
  40056a:	f04f 37ff 	mov.w	r7, #4294967295
  40056e:	f8c2 e000 	str.w	lr, [r2]
  400572:	192b      	adds	r3, r5, r4
  400574:	4299      	cmp	r1, r3
  400576:	eb00 0e07 	add.w	lr, r0, r7
  40057a:	d90e      	bls.n	40059a <critical_factorization+0x6e>
  40057c:	f81e e004 	ldrb.w	lr, [lr, r4]
  400580:	f810 c003 	ldrb.w	ip, [r0, r3]
  400584:	45f4      	cmp	ip, lr
  400586:	d918      	bls.n	4005ba <critical_factorization+0x8e>
  400588:	461d      	mov	r5, r3
  40058a:	2401      	movs	r4, #1
  40058c:	eba3 0807 	sub.w	r8, r3, r7
  400590:	192b      	adds	r3, r5, r4
  400592:	4299      	cmp	r1, r3
  400594:	eb00 0e07 	add.w	lr, r0, r7
  400598:	d8f0      	bhi.n	40057c <critical_factorization+0x50>
  40059a:	3701      	adds	r7, #1
  40059c:	1c70      	adds	r0, r6, #1
  40059e:	4287      	cmp	r7, r0
  4005a0:	bf24      	itt	cs
  4005a2:	4638      	movcs	r0, r7
  4005a4:	f8c2 8000 	strcs.w	r8, [r2]
  4005a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005ac:	d00c      	beq.n	4005c8 <critical_factorization+0x9c>
  4005ae:	f04f 0e01 	mov.w	lr, #1
  4005b2:	462e      	mov	r6, r5
  4005b4:	4674      	mov	r4, lr
  4005b6:	4475      	add	r5, lr
  4005b8:	e7c0      	b.n	40053c <critical_factorization+0x10>
  4005ba:	d00b      	beq.n	4005d4 <critical_factorization+0xa8>
  4005bc:	f04f 0801 	mov.w	r8, #1
  4005c0:	462f      	mov	r7, r5
  4005c2:	4644      	mov	r4, r8
  4005c4:	4445      	add	r5, r8
  4005c6:	e7d4      	b.n	400572 <critical_factorization+0x46>
  4005c8:	4574      	cmp	r4, lr
  4005ca:	bf12      	itee	ne
  4005cc:	3401      	addne	r4, #1
  4005ce:	461d      	moveq	r5, r3
  4005d0:	2401      	moveq	r4, #1
  4005d2:	e7b3      	b.n	40053c <critical_factorization+0x10>
  4005d4:	4544      	cmp	r4, r8
  4005d6:	bf12      	itee	ne
  4005d8:	3401      	addne	r4, #1
  4005da:	461d      	moveq	r5, r3
  4005dc:	2401      	moveq	r4, #1
  4005de:	e7c8      	b.n	400572 <critical_factorization+0x46>

004005e0 <two_way_long_needle>:
  4005e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005e4:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  4005e8:	4616      	mov	r6, r2
  4005ea:	4605      	mov	r5, r0
  4005ec:	468b      	mov	fp, r1
  4005ee:	4610      	mov	r0, r2
  4005f0:	4619      	mov	r1, r3
  4005f2:	aa03      	add	r2, sp, #12
  4005f4:	461c      	mov	r4, r3
  4005f6:	f7ff ff99 	bl	40052c <critical_factorization>
  4005fa:	4681      	mov	r9, r0
  4005fc:	ab03      	add	r3, sp, #12
  4005fe:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  400602:	f843 4f04 	str.w	r4, [r3, #4]!
  400606:	4293      	cmp	r3, r2
  400608:	d1fb      	bne.n	400602 <two_way_long_needle+0x22>
  40060a:	b14c      	cbz	r4, 400620 <two_way_long_needle+0x40>
  40060c:	1e63      	subs	r3, r4, #1
  40060e:	1e72      	subs	r2, r6, #1
  400610:	a804      	add	r0, sp, #16
  400612:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  400616:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  40061a:	f113 33ff 	adds.w	r3, r3, #4294967295
  40061e:	d2f8      	bcs.n	400612 <two_way_long_needle+0x32>
  400620:	9903      	ldr	r1, [sp, #12]
  400622:	464a      	mov	r2, r9
  400624:	4431      	add	r1, r6
  400626:	4630      	mov	r0, r6
  400628:	f000 fa58 	bl	400adc <memcmp>
  40062c:	2800      	cmp	r0, #0
  40062e:	d16f      	bne.n	400710 <two_way_long_needle+0x130>
  400630:	f109 33ff 	add.w	r3, r9, #4294967295
  400634:	9300      	str	r3, [sp, #0]
  400636:	18f3      	adds	r3, r6, r3
  400638:	4682      	mov	sl, r0
  40063a:	9301      	str	r3, [sp, #4]
  40063c:	4623      	mov	r3, r4
  40063e:	4680      	mov	r8, r0
  400640:	4654      	mov	r4, sl
  400642:	4658      	mov	r0, fp
  400644:	469a      	mov	sl, r3
  400646:	eb08 070a 	add.w	r7, r8, sl
  40064a:	1a3a      	subs	r2, r7, r0
  40064c:	2100      	movs	r1, #0
  40064e:	4428      	add	r0, r5
  400650:	f000 f9fe 	bl	400a50 <memchr>
  400654:	2800      	cmp	r0, #0
  400656:	d156      	bne.n	400706 <two_way_long_needle+0x126>
  400658:	2f00      	cmp	r7, #0
  40065a:	d054      	beq.n	400706 <two_way_long_needle+0x126>
  40065c:	19eb      	adds	r3, r5, r7
  40065e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  400662:	ab04      	add	r3, sp, #16
  400664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400668:	b14b      	cbz	r3, 40067e <two_way_long_needle+0x9e>
  40066a:	b124      	cbz	r4, 400676 <two_way_long_needle+0x96>
  40066c:	9a03      	ldr	r2, [sp, #12]
  40066e:	4293      	cmp	r3, r2
  400670:	d201      	bcs.n	400676 <two_way_long_needle+0x96>
  400672:	ebaa 0302 	sub.w	r3, sl, r2
  400676:	4498      	add	r8, r3
  400678:	2400      	movs	r4, #0
  40067a:	4638      	mov	r0, r7
  40067c:	e7e3      	b.n	400646 <two_way_long_needle+0x66>
  40067e:	454c      	cmp	r4, r9
  400680:	4623      	mov	r3, r4
  400682:	bf38      	it	cc
  400684:	464b      	movcc	r3, r9
  400686:	f10a 3eff 	add.w	lr, sl, #4294967295
  40068a:	4573      	cmp	r3, lr
  40068c:	d213      	bcs.n	4006b6 <two_way_long_needle+0xd6>
  40068e:	eb08 0203 	add.w	r2, r8, r3
  400692:	5ca8      	ldrb	r0, [r5, r2]
  400694:	f816 c003 	ldrb.w	ip, [r6, r3]
  400698:	442a      	add	r2, r5
  40069a:	4584      	cmp	ip, r0
  40069c:	eb06 0103 	add.w	r1, r6, r3
  4006a0:	d006      	beq.n	4006b0 <two_way_long_needle+0xd0>
  4006a2:	e02c      	b.n	4006fe <two_way_long_needle+0x11e>
  4006a4:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  4006a8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  4006ac:	4584      	cmp	ip, r0
  4006ae:	d126      	bne.n	4006fe <two_way_long_needle+0x11e>
  4006b0:	3301      	adds	r3, #1
  4006b2:	4573      	cmp	r3, lr
  4006b4:	d3f6      	bcc.n	4006a4 <two_way_long_needle+0xc4>
  4006b6:	454c      	cmp	r4, r9
  4006b8:	9900      	ldr	r1, [sp, #0]
  4006ba:	f080 8089 	bcs.w	4007d0 <two_way_long_needle+0x1f0>
  4006be:	9b00      	ldr	r3, [sp, #0]
  4006c0:	eb08 0203 	add.w	r2, r8, r3
  4006c4:	9b01      	ldr	r3, [sp, #4]
  4006c6:	5ca8      	ldrb	r0, [r5, r2]
  4006c8:	781b      	ldrb	r3, [r3, #0]
  4006ca:	442a      	add	r2, r5
  4006cc:	4298      	cmp	r0, r3
  4006ce:	d17f      	bne.n	4007d0 <two_way_long_needle+0x1f0>
  4006d0:	9801      	ldr	r0, [sp, #4]
  4006d2:	f104 3bff 	add.w	fp, r4, #4294967295
  4006d6:	e006      	b.n	4006e6 <two_way_long_needle+0x106>
  4006d8:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  4006dc:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4006e0:	45f4      	cmp	ip, lr
  4006e2:	d103      	bne.n	4006ec <two_way_long_needle+0x10c>
  4006e4:	4619      	mov	r1, r3
  4006e6:	1e4b      	subs	r3, r1, #1
  4006e8:	459b      	cmp	fp, r3
  4006ea:	d1f5      	bne.n	4006d8 <two_way_long_needle+0xf8>
  4006ec:	3401      	adds	r4, #1
  4006ee:	428c      	cmp	r4, r1
  4006f0:	d870      	bhi.n	4007d4 <two_way_long_needle+0x1f4>
  4006f2:	9c03      	ldr	r4, [sp, #12]
  4006f4:	4638      	mov	r0, r7
  4006f6:	44a0      	add	r8, r4
  4006f8:	ebaa 0404 	sub.w	r4, sl, r4
  4006fc:	e7a3      	b.n	400646 <two_way_long_needle+0x66>
  4006fe:	f1c9 0201 	rsb	r2, r9, #1
  400702:	4490      	add	r8, r2
  400704:	e7b7      	b.n	400676 <two_way_long_needle+0x96>
  400706:	2000      	movs	r0, #0
  400708:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  40070c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400710:	eba4 0309 	sub.w	r3, r4, r9
  400714:	454b      	cmp	r3, r9
  400716:	bf38      	it	cc
  400718:	464b      	movcc	r3, r9
  40071a:	f109 38ff 	add.w	r8, r9, #4294967295
  40071e:	3301      	adds	r3, #1
  400720:	9303      	str	r3, [sp, #12]
  400722:	eb06 0308 	add.w	r3, r6, r8
  400726:	4658      	mov	r0, fp
  400728:	f04f 0a00 	mov.w	sl, #0
  40072c:	46cb      	mov	fp, r9
  40072e:	4699      	mov	r9, r3
  400730:	eb0a 0704 	add.w	r7, sl, r4
  400734:	1a3a      	subs	r2, r7, r0
  400736:	2100      	movs	r1, #0
  400738:	4428      	add	r0, r5
  40073a:	f000 f989 	bl	400a50 <memchr>
  40073e:	2800      	cmp	r0, #0
  400740:	d1e1      	bne.n	400706 <two_way_long_needle+0x126>
  400742:	2f00      	cmp	r7, #0
  400744:	d0df      	beq.n	400706 <two_way_long_needle+0x126>
  400746:	19eb      	adds	r3, r5, r7
  400748:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  40074c:	ab04      	add	r3, sp, #16
  40074e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400752:	bba3      	cbnz	r3, 4007be <two_way_long_needle+0x1de>
  400754:	1e60      	subs	r0, r4, #1
  400756:	4583      	cmp	fp, r0
  400758:	d215      	bcs.n	400786 <two_way_long_needle+0x1a6>
  40075a:	eb0a 020b 	add.w	r2, sl, fp
  40075e:	f815 e002 	ldrb.w	lr, [r5, r2]
  400762:	f816 300b 	ldrb.w	r3, [r6, fp]
  400766:	442a      	add	r2, r5
  400768:	459e      	cmp	lr, r3
  40076a:	eb06 010b 	add.w	r1, r6, fp
  40076e:	465b      	mov	r3, fp
  400770:	d006      	beq.n	400780 <two_way_long_needle+0x1a0>
  400772:	e027      	b.n	4007c4 <two_way_long_needle+0x1e4>
  400774:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  400778:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  40077c:	45f4      	cmp	ip, lr
  40077e:	d121      	bne.n	4007c4 <two_way_long_needle+0x1e4>
  400780:	3301      	adds	r3, #1
  400782:	4283      	cmp	r3, r0
  400784:	d3f6      	bcc.n	400774 <two_way_long_needle+0x194>
  400786:	f1b8 3fff 	cmp.w	r8, #4294967295
  40078a:	d011      	beq.n	4007b0 <two_way_long_needle+0x1d0>
  40078c:	eb0a 0208 	add.w	r2, sl, r8
  400790:	5cab      	ldrb	r3, [r5, r2]
  400792:	f899 1000 	ldrb.w	r1, [r9]
  400796:	442a      	add	r2, r5
  400798:	4299      	cmp	r1, r3
  40079a:	d10f      	bne.n	4007bc <two_way_long_needle+0x1dc>
  40079c:	464b      	mov	r3, r9
  40079e:	e005      	b.n	4007ac <two_way_long_needle+0x1cc>
  4007a0:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  4007a4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  4007a8:	4288      	cmp	r0, r1
  4007aa:	d107      	bne.n	4007bc <two_way_long_needle+0x1dc>
  4007ac:	42b3      	cmp	r3, r6
  4007ae:	d1f7      	bne.n	4007a0 <two_way_long_needle+0x1c0>
  4007b0:	eb05 000a 	add.w	r0, r5, sl
  4007b4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4007b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4007bc:	9b03      	ldr	r3, [sp, #12]
  4007be:	449a      	add	sl, r3
  4007c0:	4638      	mov	r0, r7
  4007c2:	e7b5      	b.n	400730 <two_way_long_needle+0x150>
  4007c4:	f1cb 0201 	rsb	r2, fp, #1
  4007c8:	4492      	add	sl, r2
  4007ca:	449a      	add	sl, r3
  4007cc:	4638      	mov	r0, r7
  4007ce:	e7af      	b.n	400730 <two_way_long_needle+0x150>
  4007d0:	4649      	mov	r1, r9
  4007d2:	e78b      	b.n	4006ec <two_way_long_needle+0x10c>
  4007d4:	eb05 0008 	add.w	r0, r5, r8
  4007d8:	e796      	b.n	400708 <two_way_long_needle+0x128>
  4007da:	bf00      	nop

004007dc <strstr>:
  4007dc:	7802      	ldrb	r2, [r0, #0]
  4007de:	2a00      	cmp	r2, #0
  4007e0:	f000 8101 	beq.w	4009e6 <strstr+0x20a>
  4007e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4007e8:	f891 8000 	ldrb.w	r8, [r1]
  4007ec:	b085      	sub	sp, #20
  4007ee:	4644      	mov	r4, r8
  4007f0:	f1b8 0f00 	cmp.w	r8, #0
  4007f4:	d016      	beq.n	400824 <strstr+0x48>
  4007f6:	4686      	mov	lr, r0
  4007f8:	f101 0c01 	add.w	ip, r1, #1
  4007fc:	2701      	movs	r7, #1
  4007fe:	e004      	b.n	40080a <strstr+0x2e>
  400800:	4663      	mov	r3, ip
  400802:	f813 4b01 	ldrb.w	r4, [r3], #1
  400806:	b164      	cbz	r4, 400822 <strstr+0x46>
  400808:	469c      	mov	ip, r3
  40080a:	42a2      	cmp	r2, r4
  40080c:	bf14      	ite	ne
  40080e:	2700      	movne	r7, #0
  400810:	f007 0701 	andeq.w	r7, r7, #1
  400814:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  400818:	2a00      	cmp	r2, #0
  40081a:	d1f1      	bne.n	400800 <strstr+0x24>
  40081c:	f89c 3000 	ldrb.w	r3, [ip]
  400820:	b9fb      	cbnz	r3, 400862 <strstr+0x86>
  400822:	b117      	cbz	r7, 40082a <strstr+0x4e>
  400824:	b005      	add	sp, #20
  400826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40082a:	460e      	mov	r6, r1
  40082c:	4605      	mov	r5, r0
  40082e:	4641      	mov	r1, r8
  400830:	3001      	adds	r0, #1
  400832:	ebac 0406 	sub.w	r4, ip, r6
  400836:	f000 f981 	bl	400b3c <strchr>
  40083a:	4607      	mov	r7, r0
  40083c:	b188      	cbz	r0, 400862 <strstr+0x86>
  40083e:	2c01      	cmp	r4, #1
  400840:	d0f0      	beq.n	400824 <strstr+0x48>
  400842:	1928      	adds	r0, r5, r4
  400844:	4287      	cmp	r7, r0
  400846:	bf8c      	ite	hi
  400848:	2101      	movhi	r1, #1
  40084a:	1bc1      	subls	r1, r0, r7
  40084c:	2c1f      	cmp	r4, #31
  40084e:	468b      	mov	fp, r1
  400850:	d90b      	bls.n	40086a <strstr+0x8e>
  400852:	4623      	mov	r3, r4
  400854:	4632      	mov	r2, r6
  400856:	4638      	mov	r0, r7
  400858:	f7ff fec2 	bl	4005e0 <two_way_long_needle>
  40085c:	b005      	add	sp, #20
  40085e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400862:	2000      	movs	r0, #0
  400864:	b005      	add	sp, #20
  400866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40086a:	aa03      	add	r2, sp, #12
  40086c:	4621      	mov	r1, r4
  40086e:	4630      	mov	r0, r6
  400870:	f7ff fe5c 	bl	40052c <critical_factorization>
  400874:	9903      	ldr	r1, [sp, #12]
  400876:	4680      	mov	r8, r0
  400878:	4602      	mov	r2, r0
  40087a:	4431      	add	r1, r6
  40087c:	4630      	mov	r0, r6
  40087e:	f000 f92d 	bl	400adc <memcmp>
  400882:	2800      	cmp	r0, #0
  400884:	d157      	bne.n	400936 <strstr+0x15a>
  400886:	4681      	mov	r9, r0
  400888:	4605      	mov	r5, r0
  40088a:	46b2      	mov	sl, r6
  40088c:	4658      	mov	r0, fp
  40088e:	f108 33ff 	add.w	r3, r8, #4294967295
  400892:	9300      	str	r3, [sp, #0]
  400894:	18f3      	adds	r3, r6, r3
  400896:	9301      	str	r3, [sp, #4]
  400898:	1966      	adds	r6, r4, r5
  40089a:	1a32      	subs	r2, r6, r0
  40089c:	2100      	movs	r1, #0
  40089e:	4438      	add	r0, r7
  4008a0:	f000 f8d6 	bl	400a50 <memchr>
  4008a4:	2800      	cmp	r0, #0
  4008a6:	d1dc      	bne.n	400862 <strstr+0x86>
  4008a8:	2e00      	cmp	r6, #0
  4008aa:	d0da      	beq.n	400862 <strstr+0x86>
  4008ac:	45c8      	cmp	r8, r9
  4008ae:	4643      	mov	r3, r8
  4008b0:	bf38      	it	cc
  4008b2:	464b      	movcc	r3, r9
  4008b4:	429c      	cmp	r4, r3
  4008b6:	d912      	bls.n	4008de <strstr+0x102>
  4008b8:	195a      	adds	r2, r3, r5
  4008ba:	5cb9      	ldrb	r1, [r7, r2]
  4008bc:	f81a 0003 	ldrb.w	r0, [sl, r3]
  4008c0:	443a      	add	r2, r7
  4008c2:	4288      	cmp	r0, r1
  4008c4:	eb0a 0e03 	add.w	lr, sl, r3
  4008c8:	d006      	beq.n	4008d8 <strstr+0xfc>
  4008ca:	e02c      	b.n	400926 <strstr+0x14a>
  4008cc:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  4008d0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4008d4:	4288      	cmp	r0, r1
  4008d6:	d126      	bne.n	400926 <strstr+0x14a>
  4008d8:	3301      	adds	r3, #1
  4008da:	429c      	cmp	r4, r3
  4008dc:	d1f6      	bne.n	4008cc <strstr+0xf0>
  4008de:	45c8      	cmp	r8, r9
  4008e0:	9900      	ldr	r1, [sp, #0]
  4008e2:	f240 8083 	bls.w	4009ec <strstr+0x210>
  4008e6:	9b00      	ldr	r3, [sp, #0]
  4008e8:	18ea      	adds	r2, r5, r3
  4008ea:	9b01      	ldr	r3, [sp, #4]
  4008ec:	5cb8      	ldrb	r0, [r7, r2]
  4008ee:	781b      	ldrb	r3, [r3, #0]
  4008f0:	443a      	add	r2, r7
  4008f2:	4298      	cmp	r0, r3
  4008f4:	d17a      	bne.n	4009ec <strstr+0x210>
  4008f6:	9801      	ldr	r0, [sp, #4]
  4008f8:	f109 3bff 	add.w	fp, r9, #4294967295
  4008fc:	e006      	b.n	40090c <strstr+0x130>
  4008fe:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  400902:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  400906:	45f4      	cmp	ip, lr
  400908:	d103      	bne.n	400912 <strstr+0x136>
  40090a:	4619      	mov	r1, r3
  40090c:	1e4b      	subs	r3, r1, #1
  40090e:	455b      	cmp	r3, fp
  400910:	d1f5      	bne.n	4008fe <strstr+0x122>
  400912:	f109 0901 	add.w	r9, r9, #1
  400916:	4589      	cmp	r9, r1
  400918:	d857      	bhi.n	4009ca <strstr+0x1ee>
  40091a:	9b03      	ldr	r3, [sp, #12]
  40091c:	4630      	mov	r0, r6
  40091e:	441d      	add	r5, r3
  400920:	eba4 0903 	sub.w	r9, r4, r3
  400924:	e7b8      	b.n	400898 <strstr+0xbc>
  400926:	f1c8 0201 	rsb	r2, r8, #1
  40092a:	4415      	add	r5, r2
  40092c:	441d      	add	r5, r3
  40092e:	f04f 0900 	mov.w	r9, #0
  400932:	4630      	mov	r0, r6
  400934:	e7b0      	b.n	400898 <strstr+0xbc>
  400936:	eba4 0308 	sub.w	r3, r4, r8
  40093a:	4543      	cmp	r3, r8
  40093c:	bf38      	it	cc
  40093e:	4643      	movcc	r3, r8
  400940:	f108 39ff 	add.w	r9, r8, #4294967295
  400944:	3301      	adds	r3, #1
  400946:	9303      	str	r3, [sp, #12]
  400948:	eb06 0309 	add.w	r3, r6, r9
  40094c:	4658      	mov	r0, fp
  40094e:	2500      	movs	r5, #0
  400950:	46bb      	mov	fp, r7
  400952:	469a      	mov	sl, r3
  400954:	1967      	adds	r7, r4, r5
  400956:	1a3a      	subs	r2, r7, r0
  400958:	2100      	movs	r1, #0
  40095a:	4458      	add	r0, fp
  40095c:	f000 f878 	bl	400a50 <memchr>
  400960:	2800      	cmp	r0, #0
  400962:	f47f af7e 	bne.w	400862 <strstr+0x86>
  400966:	2f00      	cmp	r7, #0
  400968:	f43f af7b 	beq.w	400862 <strstr+0x86>
  40096c:	4544      	cmp	r4, r8
  40096e:	d915      	bls.n	40099c <strstr+0x1c0>
  400970:	eb08 0205 	add.w	r2, r8, r5
  400974:	f81b 0002 	ldrb.w	r0, [fp, r2]
  400978:	f816 3008 	ldrb.w	r3, [r6, r8]
  40097c:	445a      	add	r2, fp
  40097e:	4298      	cmp	r0, r3
  400980:	eb06 0108 	add.w	r1, r6, r8
  400984:	4643      	mov	r3, r8
  400986:	d006      	beq.n	400996 <strstr+0x1ba>
  400988:	e023      	b.n	4009d2 <strstr+0x1f6>
  40098a:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40098e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  400992:	4586      	cmp	lr, r0
  400994:	d11d      	bne.n	4009d2 <strstr+0x1f6>
  400996:	3301      	adds	r3, #1
  400998:	429c      	cmp	r4, r3
  40099a:	d1f6      	bne.n	40098a <strstr+0x1ae>
  40099c:	f1b9 3fff 	cmp.w	r9, #4294967295
  4009a0:	d012      	beq.n	4009c8 <strstr+0x1ec>
  4009a2:	eb05 0209 	add.w	r2, r5, r9
  4009a6:	f81b 1002 	ldrb.w	r1, [fp, r2]
  4009aa:	f89a 3000 	ldrb.w	r3, [sl]
  4009ae:	445a      	add	r2, fp
  4009b0:	4299      	cmp	r1, r3
  4009b2:	d114      	bne.n	4009de <strstr+0x202>
  4009b4:	4653      	mov	r3, sl
  4009b6:	e005      	b.n	4009c4 <strstr+0x1e8>
  4009b8:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  4009bc:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  4009c0:	4288      	cmp	r0, r1
  4009c2:	d10c      	bne.n	4009de <strstr+0x202>
  4009c4:	42b3      	cmp	r3, r6
  4009c6:	d1f7      	bne.n	4009b8 <strstr+0x1dc>
  4009c8:	465f      	mov	r7, fp
  4009ca:	1978      	adds	r0, r7, r5
  4009cc:	b005      	add	sp, #20
  4009ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4009d2:	f1c8 0201 	rsb	r2, r8, #1
  4009d6:	4415      	add	r5, r2
  4009d8:	441d      	add	r5, r3
  4009da:	4638      	mov	r0, r7
  4009dc:	e7ba      	b.n	400954 <strstr+0x178>
  4009de:	9b03      	ldr	r3, [sp, #12]
  4009e0:	4638      	mov	r0, r7
  4009e2:	441d      	add	r5, r3
  4009e4:	e7b6      	b.n	400954 <strstr+0x178>
  4009e6:	780b      	ldrb	r3, [r1, #0]
  4009e8:	b913      	cbnz	r3, 4009f0 <strstr+0x214>
  4009ea:	4770      	bx	lr
  4009ec:	4641      	mov	r1, r8
  4009ee:	e790      	b.n	400912 <strstr+0x136>
  4009f0:	2000      	movs	r0, #0
  4009f2:	4770      	bx	lr

004009f4 <register_fini>:
  4009f4:	4b02      	ldr	r3, [pc, #8]	; (400a00 <register_fini+0xc>)
  4009f6:	b113      	cbz	r3, 4009fe <register_fini+0xa>
  4009f8:	4802      	ldr	r0, [pc, #8]	; (400a04 <register_fini+0x10>)
  4009fa:	f000 b805 	b.w	400a08 <atexit>
  4009fe:	4770      	bx	lr
  400a00:	00000000 	.word	0x00000000
  400a04:	00400a15 	.word	0x00400a15

00400a08 <atexit>:
  400a08:	2300      	movs	r3, #0
  400a0a:	4601      	mov	r1, r0
  400a0c:	461a      	mov	r2, r3
  400a0e:	4618      	mov	r0, r3
  400a10:	f000 b908 	b.w	400c24 <__register_exitproc>

00400a14 <__libc_fini_array>:
  400a14:	b538      	push	{r3, r4, r5, lr}
  400a16:	4c0a      	ldr	r4, [pc, #40]	; (400a40 <__libc_fini_array+0x2c>)
  400a18:	4d0a      	ldr	r5, [pc, #40]	; (400a44 <__libc_fini_array+0x30>)
  400a1a:	1b64      	subs	r4, r4, r5
  400a1c:	10a4      	asrs	r4, r4, #2
  400a1e:	d00a      	beq.n	400a36 <__libc_fini_array+0x22>
  400a20:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400a24:	3b01      	subs	r3, #1
  400a26:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400a2a:	3c01      	subs	r4, #1
  400a2c:	f855 3904 	ldr.w	r3, [r5], #-4
  400a30:	4798      	blx	r3
  400a32:	2c00      	cmp	r4, #0
  400a34:	d1f9      	bne.n	400a2a <__libc_fini_array+0x16>
  400a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400a3a:	f000 ba79 	b.w	400f30 <_fini>
  400a3e:	bf00      	nop
  400a40:	00400f40 	.word	0x00400f40
  400a44:	00400f3c 	.word	0x00400f3c

00400a48 <__retarget_lock_acquire_recursive>:
  400a48:	4770      	bx	lr
  400a4a:	bf00      	nop

00400a4c <__retarget_lock_release_recursive>:
  400a4c:	4770      	bx	lr
  400a4e:	bf00      	nop

00400a50 <memchr>:
  400a50:	0783      	lsls	r3, r0, #30
  400a52:	b470      	push	{r4, r5, r6}
  400a54:	b2cd      	uxtb	r5, r1
  400a56:	d03d      	beq.n	400ad4 <memchr+0x84>
  400a58:	1e54      	subs	r4, r2, #1
  400a5a:	b30a      	cbz	r2, 400aa0 <memchr+0x50>
  400a5c:	7803      	ldrb	r3, [r0, #0]
  400a5e:	42ab      	cmp	r3, r5
  400a60:	d01f      	beq.n	400aa2 <memchr+0x52>
  400a62:	1c43      	adds	r3, r0, #1
  400a64:	e005      	b.n	400a72 <memchr+0x22>
  400a66:	f114 34ff 	adds.w	r4, r4, #4294967295
  400a6a:	d319      	bcc.n	400aa0 <memchr+0x50>
  400a6c:	7802      	ldrb	r2, [r0, #0]
  400a6e:	42aa      	cmp	r2, r5
  400a70:	d017      	beq.n	400aa2 <memchr+0x52>
  400a72:	f013 0f03 	tst.w	r3, #3
  400a76:	4618      	mov	r0, r3
  400a78:	f103 0301 	add.w	r3, r3, #1
  400a7c:	d1f3      	bne.n	400a66 <memchr+0x16>
  400a7e:	2c03      	cmp	r4, #3
  400a80:	d811      	bhi.n	400aa6 <memchr+0x56>
  400a82:	b34c      	cbz	r4, 400ad8 <memchr+0x88>
  400a84:	7803      	ldrb	r3, [r0, #0]
  400a86:	42ab      	cmp	r3, r5
  400a88:	d00b      	beq.n	400aa2 <memchr+0x52>
  400a8a:	4404      	add	r4, r0
  400a8c:	1c43      	adds	r3, r0, #1
  400a8e:	e002      	b.n	400a96 <memchr+0x46>
  400a90:	7802      	ldrb	r2, [r0, #0]
  400a92:	42aa      	cmp	r2, r5
  400a94:	d005      	beq.n	400aa2 <memchr+0x52>
  400a96:	429c      	cmp	r4, r3
  400a98:	4618      	mov	r0, r3
  400a9a:	f103 0301 	add.w	r3, r3, #1
  400a9e:	d1f7      	bne.n	400a90 <memchr+0x40>
  400aa0:	2000      	movs	r0, #0
  400aa2:	bc70      	pop	{r4, r5, r6}
  400aa4:	4770      	bx	lr
  400aa6:	0209      	lsls	r1, r1, #8
  400aa8:	b289      	uxth	r1, r1
  400aaa:	4329      	orrs	r1, r5
  400aac:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  400ab0:	6803      	ldr	r3, [r0, #0]
  400ab2:	4606      	mov	r6, r0
  400ab4:	404b      	eors	r3, r1
  400ab6:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  400aba:	ea22 0303 	bic.w	r3, r2, r3
  400abe:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  400ac2:	f100 0004 	add.w	r0, r0, #4
  400ac6:	d103      	bne.n	400ad0 <memchr+0x80>
  400ac8:	3c04      	subs	r4, #4
  400aca:	2c03      	cmp	r4, #3
  400acc:	d8f0      	bhi.n	400ab0 <memchr+0x60>
  400ace:	e7d8      	b.n	400a82 <memchr+0x32>
  400ad0:	4630      	mov	r0, r6
  400ad2:	e7d7      	b.n	400a84 <memchr+0x34>
  400ad4:	4614      	mov	r4, r2
  400ad6:	e7d2      	b.n	400a7e <memchr+0x2e>
  400ad8:	4620      	mov	r0, r4
  400ada:	e7e2      	b.n	400aa2 <memchr+0x52>

00400adc <memcmp>:
  400adc:	2a03      	cmp	r2, #3
  400ade:	b470      	push	{r4, r5, r6}
  400ae0:	d922      	bls.n	400b28 <memcmp+0x4c>
  400ae2:	ea40 0301 	orr.w	r3, r0, r1
  400ae6:	079b      	lsls	r3, r3, #30
  400ae8:	d011      	beq.n	400b0e <memcmp+0x32>
  400aea:	7803      	ldrb	r3, [r0, #0]
  400aec:	780c      	ldrb	r4, [r1, #0]
  400aee:	42a3      	cmp	r3, r4
  400af0:	d11d      	bne.n	400b2e <memcmp+0x52>
  400af2:	440a      	add	r2, r1
  400af4:	3101      	adds	r1, #1
  400af6:	e005      	b.n	400b04 <memcmp+0x28>
  400af8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  400afc:	f811 4b01 	ldrb.w	r4, [r1], #1
  400b00:	42a3      	cmp	r3, r4
  400b02:	d114      	bne.n	400b2e <memcmp+0x52>
  400b04:	4291      	cmp	r1, r2
  400b06:	d1f7      	bne.n	400af8 <memcmp+0x1c>
  400b08:	2000      	movs	r0, #0
  400b0a:	bc70      	pop	{r4, r5, r6}
  400b0c:	4770      	bx	lr
  400b0e:	680d      	ldr	r5, [r1, #0]
  400b10:	6806      	ldr	r6, [r0, #0]
  400b12:	460c      	mov	r4, r1
  400b14:	42ae      	cmp	r6, r5
  400b16:	4603      	mov	r3, r0
  400b18:	f101 0104 	add.w	r1, r1, #4
  400b1c:	f100 0004 	add.w	r0, r0, #4
  400b20:	d108      	bne.n	400b34 <memcmp+0x58>
  400b22:	3a04      	subs	r2, #4
  400b24:	2a03      	cmp	r2, #3
  400b26:	d8f2      	bhi.n	400b0e <memcmp+0x32>
  400b28:	2a00      	cmp	r2, #0
  400b2a:	d1de      	bne.n	400aea <memcmp+0xe>
  400b2c:	e7ec      	b.n	400b08 <memcmp+0x2c>
  400b2e:	1b18      	subs	r0, r3, r4
  400b30:	bc70      	pop	{r4, r5, r6}
  400b32:	4770      	bx	lr
  400b34:	4621      	mov	r1, r4
  400b36:	4618      	mov	r0, r3
  400b38:	e7d7      	b.n	400aea <memcmp+0xe>
  400b3a:	bf00      	nop

00400b3c <strchr>:
  400b3c:	b2c9      	uxtb	r1, r1
  400b3e:	2900      	cmp	r1, #0
  400b40:	d041      	beq.n	400bc6 <strchr+0x8a>
  400b42:	0782      	lsls	r2, r0, #30
  400b44:	b4f0      	push	{r4, r5, r6, r7}
  400b46:	d067      	beq.n	400c18 <strchr+0xdc>
  400b48:	7803      	ldrb	r3, [r0, #0]
  400b4a:	2b00      	cmp	r3, #0
  400b4c:	d068      	beq.n	400c20 <strchr+0xe4>
  400b4e:	4299      	cmp	r1, r3
  400b50:	d037      	beq.n	400bc2 <strchr+0x86>
  400b52:	1c43      	adds	r3, r0, #1
  400b54:	e004      	b.n	400b60 <strchr+0x24>
  400b56:	f813 0b01 	ldrb.w	r0, [r3], #1
  400b5a:	b390      	cbz	r0, 400bc2 <strchr+0x86>
  400b5c:	4281      	cmp	r1, r0
  400b5e:	d02f      	beq.n	400bc0 <strchr+0x84>
  400b60:	079a      	lsls	r2, r3, #30
  400b62:	461c      	mov	r4, r3
  400b64:	d1f7      	bne.n	400b56 <strchr+0x1a>
  400b66:	6825      	ldr	r5, [r4, #0]
  400b68:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  400b6c:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  400b70:	ea83 0605 	eor.w	r6, r3, r5
  400b74:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  400b78:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  400b7c:	ea20 0006 	bic.w	r0, r0, r6
  400b80:	ea22 0205 	bic.w	r2, r2, r5
  400b84:	4302      	orrs	r2, r0
  400b86:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  400b8a:	d111      	bne.n	400bb0 <strchr+0x74>
  400b8c:	4620      	mov	r0, r4
  400b8e:	f850 6f04 	ldr.w	r6, [r0, #4]!
  400b92:	ea83 0706 	eor.w	r7, r3, r6
  400b96:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  400b9a:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  400b9e:	ea25 0507 	bic.w	r5, r5, r7
  400ba2:	ea22 0206 	bic.w	r2, r2, r6
  400ba6:	432a      	orrs	r2, r5
  400ba8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  400bac:	d0ef      	beq.n	400b8e <strchr+0x52>
  400bae:	4604      	mov	r4, r0
  400bb0:	7820      	ldrb	r0, [r4, #0]
  400bb2:	b918      	cbnz	r0, 400bbc <strchr+0x80>
  400bb4:	e005      	b.n	400bc2 <strchr+0x86>
  400bb6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  400bba:	b110      	cbz	r0, 400bc2 <strchr+0x86>
  400bbc:	4281      	cmp	r1, r0
  400bbe:	d1fa      	bne.n	400bb6 <strchr+0x7a>
  400bc0:	4620      	mov	r0, r4
  400bc2:	bcf0      	pop	{r4, r5, r6, r7}
  400bc4:	4770      	bx	lr
  400bc6:	0783      	lsls	r3, r0, #30
  400bc8:	d024      	beq.n	400c14 <strchr+0xd8>
  400bca:	7803      	ldrb	r3, [r0, #0]
  400bcc:	2b00      	cmp	r3, #0
  400bce:	d0f9      	beq.n	400bc4 <strchr+0x88>
  400bd0:	1c43      	adds	r3, r0, #1
  400bd2:	e003      	b.n	400bdc <strchr+0xa0>
  400bd4:	7802      	ldrb	r2, [r0, #0]
  400bd6:	3301      	adds	r3, #1
  400bd8:	2a00      	cmp	r2, #0
  400bda:	d0f3      	beq.n	400bc4 <strchr+0x88>
  400bdc:	0799      	lsls	r1, r3, #30
  400bde:	4618      	mov	r0, r3
  400be0:	d1f8      	bne.n	400bd4 <strchr+0x98>
  400be2:	6819      	ldr	r1, [r3, #0]
  400be4:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  400be8:	ea22 0201 	bic.w	r2, r2, r1
  400bec:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  400bf0:	d108      	bne.n	400c04 <strchr+0xc8>
  400bf2:	f853 1f04 	ldr.w	r1, [r3, #4]!
  400bf6:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  400bfa:	ea22 0201 	bic.w	r2, r2, r1
  400bfe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  400c02:	d0f6      	beq.n	400bf2 <strchr+0xb6>
  400c04:	781a      	ldrb	r2, [r3, #0]
  400c06:	4618      	mov	r0, r3
  400c08:	b142      	cbz	r2, 400c1c <strchr+0xe0>
  400c0a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  400c0e:	2b00      	cmp	r3, #0
  400c10:	d1fb      	bne.n	400c0a <strchr+0xce>
  400c12:	4770      	bx	lr
  400c14:	4603      	mov	r3, r0
  400c16:	e7e4      	b.n	400be2 <strchr+0xa6>
  400c18:	4604      	mov	r4, r0
  400c1a:	e7a4      	b.n	400b66 <strchr+0x2a>
  400c1c:	4618      	mov	r0, r3
  400c1e:	4770      	bx	lr
  400c20:	4618      	mov	r0, r3
  400c22:	e7ce      	b.n	400bc2 <strchr+0x86>

00400c24 <__register_exitproc>:
  400c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400c28:	4d2c      	ldr	r5, [pc, #176]	; (400cdc <__register_exitproc+0xb8>)
  400c2a:	4606      	mov	r6, r0
  400c2c:	6828      	ldr	r0, [r5, #0]
  400c2e:	4698      	mov	r8, r3
  400c30:	460f      	mov	r7, r1
  400c32:	4691      	mov	r9, r2
  400c34:	f7ff ff08 	bl	400a48 <__retarget_lock_acquire_recursive>
  400c38:	4b29      	ldr	r3, [pc, #164]	; (400ce0 <__register_exitproc+0xbc>)
  400c3a:	681c      	ldr	r4, [r3, #0]
  400c3c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400c40:	2b00      	cmp	r3, #0
  400c42:	d03e      	beq.n	400cc2 <__register_exitproc+0x9e>
  400c44:	685a      	ldr	r2, [r3, #4]
  400c46:	2a1f      	cmp	r2, #31
  400c48:	dc1c      	bgt.n	400c84 <__register_exitproc+0x60>
  400c4a:	f102 0e01 	add.w	lr, r2, #1
  400c4e:	b176      	cbz	r6, 400c6e <__register_exitproc+0x4a>
  400c50:	2101      	movs	r1, #1
  400c52:	eb03 0482 	add.w	r4, r3, r2, lsl #2
  400c56:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
  400c5a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400c5e:	4091      	lsls	r1, r2
  400c60:	4308      	orrs	r0, r1
  400c62:	2e02      	cmp	r6, #2
  400c64:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400c68:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
  400c6c:	d023      	beq.n	400cb6 <__register_exitproc+0x92>
  400c6e:	3202      	adds	r2, #2
  400c70:	f8c3 e004 	str.w	lr, [r3, #4]
  400c74:	6828      	ldr	r0, [r5, #0]
  400c76:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400c7a:	f7ff fee7 	bl	400a4c <__retarget_lock_release_recursive>
  400c7e:	2000      	movs	r0, #0
  400c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400c84:	4b17      	ldr	r3, [pc, #92]	; (400ce4 <__register_exitproc+0xc0>)
  400c86:	b30b      	cbz	r3, 400ccc <__register_exitproc+0xa8>
  400c88:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400c8c:	f3af 8000 	nop.w
  400c90:	4603      	mov	r3, r0
  400c92:	b1d8      	cbz	r0, 400ccc <__register_exitproc+0xa8>
  400c94:	2000      	movs	r0, #0
  400c96:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  400c9a:	f04f 0e01 	mov.w	lr, #1
  400c9e:	6058      	str	r0, [r3, #4]
  400ca0:	6019      	str	r1, [r3, #0]
  400ca2:	4602      	mov	r2, r0
  400ca4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400ca8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400cac:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
  400cb0:	2e00      	cmp	r6, #0
  400cb2:	d0dc      	beq.n	400c6e <__register_exitproc+0x4a>
  400cb4:	e7cc      	b.n	400c50 <__register_exitproc+0x2c>
  400cb6:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
  400cba:	4301      	orrs	r1, r0
  400cbc:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
  400cc0:	e7d5      	b.n	400c6e <__register_exitproc+0x4a>
  400cc2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  400cc6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400cca:	e7bb      	b.n	400c44 <__register_exitproc+0x20>
  400ccc:	6828      	ldr	r0, [r5, #0]
  400cce:	f7ff febd 	bl	400a4c <__retarget_lock_release_recursive>
  400cd2:	f04f 30ff 	mov.w	r0, #4294967295
  400cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400cda:	bf00      	nop
  400cdc:	20000440 	.word	0x20000440
  400ce0:	00400f18 	.word	0x00400f18
  400ce4:	00000000 	.word	0x00000000
  400ce8:	00000001 	.word	0x00000001
  400cec:	00000002 	.word	0x00000002
  400cf0:	00000004 	.word	0x00000004
  400cf4:	00000008 	.word	0x00000008
  400cf8:	00000010 	.word	0x00000010
  400cfc:	00000020 	.word	0x00000020
  400d00:	00000040 	.word	0x00000040
  400d04:	00000080 	.word	0x00000080
  400d08:	00000100 	.word	0x00000100
  400d0c:	00000200 	.word	0x00000200
  400d10:	00000400 	.word	0x00000400
  400d14:	20202020 	.word	0x20202020
  400d18:	20202020 	.word	0x20202020
  400d1c:	20202020 	.word	0x20202020
  400d20:	20202020 	.word	0x20202020
  400d24:	00002020 	.word	0x00002020
	...
  400d34:	5145522f 	.word	0x5145522f
  400d38:	0000003a 	.word	0x0000003a
  400d3c:	6f64656c 	.word	0x6f64656c
  400d40:	0000006e 	.word	0x0000006e
  400d44:	6f64656c 	.word	0x6f64656c
  400d48:	00006666 	.word	0x00006666
  400d4c:	333a3231 	.word	0x333a3231
  400d50:	36353a34 	.word	0x36353a34
  400d54:	00000000 	.word	0x00000000
  400d58:	6f622f3c 	.word	0x6f622f3c
  400d5c:	3c3e7964 	.word	0x3c3e7964
  400d60:	6d74682f 	.word	0x6d74682f
  400d64:	00003e6c 	.word	0x00003e6c
  400d68:	433e703c 	.word	0x433e703c
  400d6c:	65727275 	.word	0x65727275
  400d70:	4820746e 	.word	0x4820746e
  400d74:	64696d75 	.word	0x64696d75
  400d78:	3a797469 	.word	0x3a797469
  400d7c:	3e702f3c 	.word	0x3e702f3c
  400d80:	00000000 	.word	0x00000000
  400d84:	433e703c 	.word	0x433e703c
  400d88:	65727275 	.word	0x65727275
  400d8c:	5420746e 	.word	0x5420746e
  400d90:	65706d65 	.word	0x65706d65
  400d94:	75746172 	.word	0x75746172
  400d98:	3c3a6572 	.word	0x3c3a6572
  400d9c:	003e702f 	.word	0x003e702f
  400da0:	4c3e703c 	.word	0x4c3e703c
  400da4:	43204445 	.word	0x43204445
  400da8:	72746e6f 	.word	0x72746e6f
  400dac:	3c3a6c6f 	.word	0x3c3a6c6f
  400db0:	3c3e702f 	.word	0x3c3e702f
  400db4:	6d726f66 	.word	0x6d726f66
  400db8:	74636120 	.word	0x74636120
  400dbc:	3d6e6f69 	.word	0x3d6e6f69
  400dc0:	64656c22 	.word	0x64656c22
  400dc4:	3e226e6f 	.word	0x3e226e6f
  400dc8:	706e693c 	.word	0x706e693c
  400dcc:	74207475 	.word	0x74207475
  400dd0:	3d657079 	.word	0x3d657079
  400dd4:	62757322 	.word	0x62757322
  400dd8:	2274696d 	.word	0x2274696d
  400ddc:	6c617620 	.word	0x6c617620
  400de0:	223d6575 	.word	0x223d6575
  400de4:	6e727554 	.word	0x6e727554
  400de8:	65687420 	.word	0x65687420
  400dec:	44454c20 	.word	0x44454c20
  400df0:	216e6f20 	.word	0x216e6f20
  400df4:	3e2f2022 	.word	0x3e2f2022
  400df8:	6f662f3c 	.word	0x6f662f3c
  400dfc:	203e6d72 	.word	0x203e6d72
  400e00:	726f663c 	.word	0x726f663c
  400e04:	6361206d 	.word	0x6361206d
  400e08:	6e6f6974 	.word	0x6e6f6974
  400e0c:	656c223d 	.word	0x656c223d
  400e10:	66666f64 	.word	0x66666f64
  400e14:	693c3e22 	.word	0x693c3e22
  400e18:	7475706e 	.word	0x7475706e
  400e1c:	70797420 	.word	0x70797420
  400e20:	73223d65 	.word	0x73223d65
  400e24:	696d6275 	.word	0x696d6275
  400e28:	76202274 	.word	0x76202274
  400e2c:	65756c61 	.word	0x65756c61
  400e30:	7554223d 	.word	0x7554223d
  400e34:	74206e72 	.word	0x74206e72
  400e38:	4c206568 	.word	0x4c206568
  400e3c:	6f204445 	.word	0x6f204445
  400e40:	22216666 	.word	0x22216666
  400e44:	3c3e2f20 	.word	0x3c3e2f20
  400e48:	726f662f 	.word	0x726f662f
  400e4c:	00003e6d 	.word	0x00003e6d
  400e50:	433e703c 	.word	0x433e703c
  400e54:	65727275 	.word	0x65727275
  400e58:	4d20746e 	.word	0x4d20746e
  400e5c:	6f726369 	.word	0x6f726369
  400e60:	746e6f63 	.word	0x746e6f63
  400e64:	6c6c6f72 	.word	0x6c6c6f72
  400e68:	54207265 	.word	0x54207265
  400e6c:	3a656d69 	.word	0x3a656d69
  400e70:	3e702f3c 	.word	0x3e702f3c
  400e74:	00000000 	.word	0x00000000
  400e78:	4f44213c 	.word	0x4f44213c
  400e7c:	50595443 	.word	0x50595443
  400e80:	74682045 	.word	0x74682045
  400e84:	3c3e6c6d 	.word	0x3c3e6c6d
  400e88:	6c6d7468 	.word	0x6c6d7468
  400e8c:	65683c3e 	.word	0x65683c3e
  400e90:	3c3e6461 	.word	0x3c3e6461
  400e94:	6c746974 	.word	0x6c746974
  400e98:	31453e65 	.word	0x31453e65
  400e9c:	57203535 	.word	0x57203535
  400ea0:	53206265 	.word	0x53206265
  400ea4:	65767265 	.word	0x65767265
  400ea8:	65442072 	.word	0x65442072
  400eac:	57206f6d 	.word	0x57206f6d
  400eb0:	61706265 	.word	0x61706265
  400eb4:	2f3c6567 	.word	0x2f3c6567
  400eb8:	6c746974 	.word	0x6c746974
  400ebc:	6d3c3e65 	.word	0x6d3c3e65
  400ec0:	20617465 	.word	0x20617465
  400ec4:	70747468 	.word	0x70747468
  400ec8:	7571652d 	.word	0x7571652d
  400ecc:	223d7669 	.word	0x223d7669
  400ed0:	72666572 	.word	0x72666572
  400ed4:	22687365 	.word	0x22687365
  400ed8:	6e6f6320 	.word	0x6e6f6320
  400edc:	746e6574 	.word	0x746e6574
  400ee0:	2235223d 	.word	0x2235223d
  400ee4:	682f3c3e 	.word	0x682f3c3e
  400ee8:	3e646165 	.word	0x3e646165
  400eec:	646f623c 	.word	0x646f623c
  400ef0:	683c3e79 	.word	0x683c3e79
  400ef4:	31453e31 	.word	0x31453e31
  400ef8:	57203535 	.word	0x57203535
  400efc:	53206265 	.word	0x53206265
  400f00:	65767265 	.word	0x65767265
  400f04:	65442072 	.word	0x65442072
  400f08:	57206f6d 	.word	0x57206f6d
  400f0c:	61706265 	.word	0x61706265
  400f10:	2f3c6567 	.word	0x2f3c6567
  400f14:	003e3168 	.word	0x003e3168

00400f18 <_global_impure_ptr>:
  400f18:	20000018                                ... 

00400f1c <_init>:
  400f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f1e:	bf00      	nop
  400f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400f22:	bc08      	pop	{r3}
  400f24:	469e      	mov	lr, r3
  400f26:	4770      	bx	lr

00400f28 <__init_array_start>:
  400f28:	004009f5 	.word	0x004009f5

00400f2c <__frame_dummy_init_array_entry>:
  400f2c:	004000f1                                ..@.

00400f30 <_fini>:
  400f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f32:	bf00      	nop
  400f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400f36:	bc08      	pop	{r3}
  400f38:	469e      	mov	lr, r3
  400f3a:	4770      	bx	lr

00400f3c <__fini_array_start>:
  400f3c:	004000cd 	.word	0x004000cd
