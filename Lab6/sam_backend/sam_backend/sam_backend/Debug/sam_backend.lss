
sam_backend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fd8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00400fd8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000434  0040140c  00020434  2**2
                  ALLOC
  3 .stack        00000404  20000474  0040144c  00020434  2**0
                  ALLOC
  4 .heap         00000200  20000878  00401850  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000025fa  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005c0  00000000  00000000  00022ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000bd7  00000000  00000000  00023070  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000130  00000000  00000000  00023c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  00023d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000c3b1  00000000  00000000  00023ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000c6e  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0003c223  00000000  00000000  00030eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000064c  00000000  00000000  0006d114  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	78 08 00 20 3d 01 40 00 39 01 40 00 39 01 40 00     x.. =.@.9.@.9.@.
  400010:	39 01 40 00 39 01 40 00 39 01 40 00 00 00 00 00     9.@.9.@.9.@.....
	...
  40002c:	39 01 40 00 39 01 40 00 00 00 00 00 39 01 40 00     9.@.9.@.....9.@.
  40003c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40004c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40005c:	00 00 00 00 39 01 40 00 39 01 40 00 00 00 00 00     ....9.@.9.@.....
  40006c:	39 01 40 00 39 01 40 00 00 00 00 00 39 01 40 00     9.@.9.@.....9.@.
  40007c:	39 01 40 00 00 00 00 00 00 00 00 00 39 01 40 00     9.@.........9.@.
  40008c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40009c:	39 01 40 00 39 01 40 00 39 01 40 00 00 00 00 00     9.@.9.@.9.@.....
	...
  4000b4:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  4000c4:	39 01 40 00 39 01 40 00                             9.@.9.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000434 	.word	0x20000434
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00400fd8 	.word	0x00400fd8

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	b510      	push	{r4, lr}
  4000f8:	490c      	ldr	r1, [pc, #48]	; (40012c <frame_dummy+0x3c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00400fd8 	.word	0x00400fd8
  40012c:	20000438 	.word	0x20000438
  400130:	00400fd8 	.word	0x00400fd8
  400134:	00000000 	.word	0x00000000

00400138 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400138:	e7fe      	b.n	400138 <Dummy_Handler>
	...

0040013c <Reset_Handler>:
{
  40013c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  40013e:	4b18      	ldr	r3, [pc, #96]	; (4001a0 <Reset_Handler+0x64>)
  400140:	4a18      	ldr	r2, [pc, #96]	; (4001a4 <Reset_Handler+0x68>)
  400142:	429a      	cmp	r2, r3
  400144:	d010      	beq.n	400168 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  400146:	4b18      	ldr	r3, [pc, #96]	; (4001a8 <Reset_Handler+0x6c>)
  400148:	4a15      	ldr	r2, [pc, #84]	; (4001a0 <Reset_Handler+0x64>)
  40014a:	429a      	cmp	r2, r3
  40014c:	d20c      	bcs.n	400168 <Reset_Handler+0x2c>
  40014e:	3b01      	subs	r3, #1
  400150:	1a9b      	subs	r3, r3, r2
  400152:	f023 0303 	bic.w	r3, r3, #3
  400156:	3304      	adds	r3, #4
  400158:	4413      	add	r3, r2
  40015a:	4912      	ldr	r1, [pc, #72]	; (4001a4 <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
  40015c:	f851 0b04 	ldr.w	r0, [r1], #4
  400160:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400164:	429a      	cmp	r2, r3
  400166:	d1f9      	bne.n	40015c <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  400168:	4b10      	ldr	r3, [pc, #64]	; (4001ac <Reset_Handler+0x70>)
  40016a:	4a11      	ldr	r2, [pc, #68]	; (4001b0 <Reset_Handler+0x74>)
  40016c:	429a      	cmp	r2, r3
  40016e:	d20a      	bcs.n	400186 <Reset_Handler+0x4a>
  400170:	3b01      	subs	r3, #1
  400172:	1a9b      	subs	r3, r3, r2
  400174:	f023 0303 	bic.w	r3, r3, #3
  400178:	3304      	adds	r3, #4
  40017a:	4413      	add	r3, r2
                *pDest++ = 0;
  40017c:	2100      	movs	r1, #0
  40017e:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400182:	4293      	cmp	r3, r2
  400184:	d1fb      	bne.n	40017e <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400186:	4b0b      	ldr	r3, [pc, #44]	; (4001b4 <Reset_Handler+0x78>)
  400188:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
  40018c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400190:	4a09      	ldr	r2, [pc, #36]	; (4001b8 <Reset_Handler+0x7c>)
  400192:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400194:	4b09      	ldr	r3, [pc, #36]	; (4001bc <Reset_Handler+0x80>)
  400196:	4798      	blx	r3
        main();
  400198:	4b09      	ldr	r3, [pc, #36]	; (4001c0 <Reset_Handler+0x84>)
  40019a:	4798      	blx	r3
  40019c:	e7fe      	b.n	40019c <Reset_Handler+0x60>
  40019e:	bf00      	nop
  4001a0:	20000000 	.word	0x20000000
  4001a4:	00400fd8 	.word	0x00400fd8
  4001a8:	20000434 	.word	0x20000434
  4001ac:	20000474 	.word	0x20000474
  4001b0:	20000434 	.word	0x20000434
  4001b4:	00400000 	.word	0x00400000
  4001b8:	e000ed00 	.word	0xe000ed00
  4001bc:	00400549 	.word	0x00400549
  4001c0:	00400409 	.word	0x00400409

004001c4 <pinMode>:

// Note: Upon reset, pins are configured as input I/O lines (as opposed to being
// controlled by peripheral functions), the peripheral function defaults to PERIPH_A,
// the pull-up resistor is enabled, and the pull-down resistor is disabled. All other
// optional pin functions, which are not provided in this header file, are off upon reset.
void pinMode(int pin, int function) {
  4001c4:	b410      	push	{r4}
    return pin >> 5;
  4001c6:	1144      	asrs	r4, r0, #5
    return (uint32_t) (port ? PIOB : PIOA);
  4001c8:	4a32      	ldr	r2, [pc, #200]	; (400294 <pinMode+0xd0>)
  4001ca:	4b33      	ldr	r3, [pc, #204]	; (400298 <pinMode+0xd4>)
  4001cc:	2c00      	cmp	r4, #0
  4001ce:	bf08      	it	eq
  4001d0:	4613      	moveq	r3, r2
    Pio* port = (Pio*) pinToBase(pin);
  4001d2:	461c      	mov	r4, r3
    int offset = pin % 32;
  4001d4:	4242      	negs	r2, r0
  4001d6:	f000 001f 	and.w	r0, r0, #31
  4001da:	f002 021f 	and.w	r2, r2, #31
  4001de:	bf58      	it	pl
  4001e0:	4250      	negpl	r0, r2

    switch (function) {
  4001e2:	3901      	subs	r1, #1
  4001e4:	2906      	cmp	r1, #6
  4001e6:	d853      	bhi.n	400290 <pinMode+0xcc>
  4001e8:	e8df f001 	tbb	[pc, r1]
  4001ec:	27190b04 	.word	0x27190b04
  4001f0:	4235      	.short	0x4235
  4001f2:	4c          	.byte	0x4c
  4001f3:	00          	.byte	0x00
        case INPUT:
            break;
        case OUTPUT:
            port->PIO_OER     |=  (1 << offset); // Configures an I/O line as an output
  4001f4:	2201      	movs	r2, #1
  4001f6:	fa02 f000 	lsl.w	r0, r2, r0
  4001fa:	691a      	ldr	r2, [r3, #16]
  4001fc:	4302      	orrs	r2, r0
  4001fe:	611a      	str	r2, [r3, #16]
            break;
  400200:	e046      	b.n	400290 <pinMode+0xcc>
        case PERIPH_A:
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
  400202:	2201      	movs	r2, #1
  400204:	fa02 f000 	lsl.w	r0, r2, r0
  400208:	685a      	ldr	r2, [r3, #4]
  40020a:	4302      	orrs	r2, r0
  40020c:	605a      	str	r2, [r3, #4]
            port->PIO_ABCDSR1 &= ~(1 << offset); // Sets the peripheral which controls a pin
  40020e:	43c0      	mvns	r0, r0
  400210:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400212:	4002      	ands	r2, r0
  400214:	671a      	str	r2, [r3, #112]	; 0x70
            port->PIO_ABCDSR2 &= ~(1 << offset); // Sets the peripheral which controls a pin
  400216:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400218:	4010      	ands	r0, r2
  40021a:	6758      	str	r0, [r3, #116]	; 0x74
            break;
  40021c:	e038      	b.n	400290 <pinMode+0xcc>
        case PERIPH_B:
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
  40021e:	2201      	movs	r2, #1
  400220:	fa02 f000 	lsl.w	r0, r2, r0
  400224:	685a      	ldr	r2, [r3, #4]
  400226:	4302      	orrs	r2, r0
  400228:	605a      	str	r2, [r3, #4]
            port->PIO_ABCDSR1 |=  (1 << offset); // Sets the peripheral which controls a pin
  40022a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40022c:	4302      	orrs	r2, r0
  40022e:	671a      	str	r2, [r3, #112]	; 0x70
            port->PIO_ABCDSR2 &= ~(1 << offset); // Sets the peripheral which controls a pin
  400230:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400232:	ea22 0000 	bic.w	r0, r2, r0
  400236:	6758      	str	r0, [r3, #116]	; 0x74
            break;
  400238:	e02a      	b.n	400290 <pinMode+0xcc>
        case PERIPH_C:
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
  40023a:	2201      	movs	r2, #1
  40023c:	fa02 f000 	lsl.w	r0, r2, r0
  400240:	685a      	ldr	r2, [r3, #4]
  400242:	4302      	orrs	r2, r0
  400244:	605a      	str	r2, [r3, #4]
            port->PIO_ABCDSR1 &= ~(1 << offset); // Sets the peripheral which controls a pin
  400246:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400248:	ea22 0200 	bic.w	r2, r2, r0
  40024c:	671a      	str	r2, [r3, #112]	; 0x70
            port->PIO_ABCDSR2 |=  (1 << offset); // Sets the peripheral which controls a pin
  40024e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400250:	4310      	orrs	r0, r2
  400252:	6758      	str	r0, [r3, #116]	; 0x74
            break;
  400254:	e01c      	b.n	400290 <pinMode+0xcc>
        case PERIPH_D:
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
  400256:	2201      	movs	r2, #1
  400258:	fa02 f000 	lsl.w	r0, r2, r0
  40025c:	685a      	ldr	r2, [r3, #4]
  40025e:	4302      	orrs	r2, r0
  400260:	605a      	str	r2, [r3, #4]
            port->PIO_ABCDSR1 |=  (1 << offset); // Sets the peripheral which controls a pin
  400262:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400264:	4302      	orrs	r2, r0
  400266:	671a      	str	r2, [r3, #112]	; 0x70
            port->PIO_ABCDSR2 |=  (1 << offset); // Sets the peripheral which controls a pin
  400268:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40026a:	4310      	orrs	r0, r2
  40026c:	6758      	str	r0, [r3, #116]	; 0x74
            break;
  40026e:	e00f      	b.n	400290 <pinMode+0xcc>
        case PULL_DOWN:
            port->PIO_PUDR    |=  (1 << offset); // Disables the pull-up resistor
  400270:	2201      	movs	r2, #1
  400272:	4082      	lsls	r2, r0
  400274:	6e19      	ldr	r1, [r3, #96]	; 0x60
  400276:	4311      	orrs	r1, r2
  400278:	6619      	str	r1, [r3, #96]	; 0x60
            port->PIO_PPDER   |=  (1 << offset); // Enables the pull-down resistor
  40027a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
  40027e:	430a      	orrs	r2, r1
  400280:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        case FLOATING:
            port->PIO_PUDR    |=  (1 << offset); // Disables the pull-down resistor
  400284:	2301      	movs	r3, #1
  400286:	fa03 f000 	lsl.w	r0, r3, r0
  40028a:	6e23      	ldr	r3, [r4, #96]	; 0x60
  40028c:	4303      	orrs	r3, r0
  40028e:	6623      	str	r3, [r4, #96]	; 0x60
    }
}
  400290:	bc10      	pop	{r4}
  400292:	4770      	bx	lr
  400294:	400e0e00 	.word	0x400e0e00
  400298:	400e1000 	.word	0x400e1000

0040029c <digitalWrite>:
    int offset = pin % 32;
    return ((port->PIO_PDSR) >> offset) & 1;
}

// Writes a digital voltage to a pin configured as an output I/O line
void digitalWrite(int pin, int val) {
  40029c:	b410      	push	{r4}
    return pin >> 5;
  40029e:	1144      	asrs	r4, r0, #5
    return (uint32_t) (port ? PIOB : PIOA);
  4002a0:	4a0d      	ldr	r2, [pc, #52]	; (4002d8 <digitalWrite+0x3c>)
  4002a2:	4b0e      	ldr	r3, [pc, #56]	; (4002dc <digitalWrite+0x40>)
  4002a4:	2c00      	cmp	r4, #0
  4002a6:	bf08      	it	eq
  4002a8:	4613      	moveq	r3, r2
    Pio* port = (Pio*) pinToBase(pin);
    int offset = pin % 32;
  4002aa:	4242      	negs	r2, r0
  4002ac:	f000 001f 	and.w	r0, r0, #31
  4002b0:	f002 021f 	and.w	r2, r2, #31
  4002b4:	bf58      	it	pl
  4002b6:	4250      	negpl	r0, r2
    if (val) {
  4002b8:	b939      	cbnz	r1, 4002ca <digitalWrite+0x2e>
        port->PIO_SODR |= (1 << offset);
    } else {
        port->PIO_CODR |= (1 << offset);
  4002ba:	2201      	movs	r2, #1
  4002bc:	fa02 f000 	lsl.w	r0, r2, r0
  4002c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  4002c2:	4302      	orrs	r2, r0
  4002c4:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
  4002c6:	bc10      	pop	{r4}
  4002c8:	4770      	bx	lr
        port->PIO_SODR |= (1 << offset);
  4002ca:	2201      	movs	r2, #1
  4002cc:	fa02 f000 	lsl.w	r0, r2, r0
  4002d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4002d2:	4302      	orrs	r2, r0
  4002d4:	631a      	str	r2, [r3, #48]	; 0x30
  4002d6:	e7f6      	b.n	4002c6 <digitalWrite+0x2a>
  4002d8:	400e0e00 	.word	0x400e0e00
  4002dc:	400e1000 	.word	0x400e1000

004002e0 <uartInit>:
 *	 2: Space (forced to 0)
 *	 3: Mark (forced to 1)
 *	 4: No (no parity)
 * Baud Rate =  MCK/(16*CD), CD is an unsigned short
 */	
void uartInit(int parity, int CD) {
  4002e0:	b538      	push	{r3, r4, r5, lr}
  4002e2:	460c      	mov	r4, r1
	pinMode(9, PERIPH_A);		  // Set URXD0 pin mode
  4002e4:	2102      	movs	r1, #2
  4002e6:	2009      	movs	r0, #9
  4002e8:	4d0c      	ldr	r5, [pc, #48]	; (40031c <uartInit+0x3c>)
  4002ea:	47a8      	blx	r5
	pinMode(10, PERIPH_A);		  // Set ITXD0 pin mode
  4002ec:	2102      	movs	r1, #2
  4002ee:	200a      	movs	r0, #10
  4002f0:	47a8      	blx	r5

	REG_UART_CR   |= 1 << 6; // Enable transmitter
  4002f2:	4b0b      	ldr	r3, [pc, #44]	; (400320 <uartInit+0x40>)
  4002f4:	681a      	ldr	r2, [r3, #0]
  4002f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4002fa:	601a      	str	r2, [r3, #0]
	REG_UART_CR   |= 1 << 4; // Enable receiver
  4002fc:	681a      	ldr	r2, [r3, #0]
  4002fe:	f042 0210 	orr.w	r2, r2, #16
  400302:	601a      	str	r2, [r3, #0]
	
	// Parity
	//REG_UART_MR   |= parity << 9;    
	//REG_UART_MR   &= ~(parity << 9);
	REG_UART_MR   |= 1 << 11;
  400304:	3304      	adds	r3, #4
  400306:	681a      	ldr	r2, [r3, #0]
  400308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40030c:	601a      	str	r2, [r3, #0]
	REG_UART_MR   &= ~((0x3) << 9);
  40030e:	681a      	ldr	r2, [r3, #0]
  400310:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  400314:	601a      	str	r2, [r3, #0]
	
	REG_UART_BRGR = CD;	  // Set baud rate divider
  400316:	331c      	adds	r3, #28
  400318:	601c      	str	r4, [r3, #0]
  40031a:	bd38      	pop	{r3, r4, r5, pc}
  40031c:	004001c5 	.word	0x004001c5
  400320:	400e0600 	.word	0x400e0600

00400324 <uartTx>:
}

// Transmits a character (1 byte) over UART
void uartTx(char data) {
	while (!((REG_UART_SR >> 1) & 1)); // Wait until previous data has been transmitted
  400324:	4a03      	ldr	r2, [pc, #12]	; (400334 <uartTx+0x10>)
  400326:	6813      	ldr	r3, [r2, #0]
  400328:	f013 0f02 	tst.w	r3, #2
  40032c:	d0fb      	beq.n	400326 <uartTx+0x2>
	REG_UART_THR = data; // Write data into holding register for transmit
  40032e:	4b02      	ldr	r3, [pc, #8]	; (400338 <uartTx+0x14>)
  400330:	6018      	str	r0, [r3, #0]
  400332:	4770      	bx	lr
  400334:	400e0614 	.word	0x400e0614
  400338:	400e061c 	.word	0x400e061c

0040033c <uartRx>:
}

// Returns a character (1 byte) received over UART
char uartRx() {
	while(!((REG_UART_SR) & 1)); // Wait until data has been received
  40033c:	4a04      	ldr	r2, [pc, #16]	; (400350 <uartRx+0x14>)
  40033e:	6813      	ldr	r3, [r2, #0]
  400340:	f013 0f01 	tst.w	r3, #1
  400344:	d0fb      	beq.n	40033e <uartRx+0x2>
	return (char) REG_UART_RHR; // Return received data in holding register
  400346:	4b03      	ldr	r3, [pc, #12]	; (400354 <uartRx+0x18>)
  400348:	6818      	ldr	r0, [r3, #0]
	
}
  40034a:	b2c0      	uxtb	r0, r0
  40034c:	4770      	bx	lr
  40034e:	bf00      	nop
  400350:	400e0614 	.word	0x400e0614
  400354:	400e0618 	.word	0x400e0618

00400358 <samInit>:
/////////////////////////////////////////////////////////////////////
void samInit() {
    //Many peripherals on the SAM4S are write protected: unless the correct password is written in a peripheral memory address, write access to peripheral control registers is disabled. This is done for security reasons, but is not necessary in this header file. In the first part of this function, we enable write access to the PMC, PIO, SPI, and UART by writing a password into the peripheral's Write Protect Mode Register (WPMR)

	//disabling PMC write protection (Password: "PMC")
    *((uint32_t *) REG_PMC_WPMR) = PMC_WPMR_WPKEY_PASSWD;
  400358:	4a10      	ldr	r2, [pc, #64]	; (40039c <samInit+0x44>)
  40035a:	4b11      	ldr	r3, [pc, #68]	; (4003a0 <samInit+0x48>)
  40035c:	601a      	str	r2, [r3, #0]
	//disabling PIO write protection (Password: "PIO")
    Pio* pioBaseA = (Pio*) PIOA;
    Pio* pioBaseB = (Pio*) PIOB;
    pioBaseA->PIO_WPMR = PIO_WPMR_WPKEY_PASSWD;
  40035e:	4b11      	ldr	r3, [pc, #68]	; (4003a4 <samInit+0x4c>)
  400360:	4a11      	ldr	r2, [pc, #68]	; (4003a8 <samInit+0x50>)
  400362:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    pioBaseB->PIO_WPMR = PIO_WPMR_WPKEY_PASSWD;
  400366:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40036a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	//disabling SPI write protection (Password: "SPI")
    *((uint32_t *) REG_SPI_WPMR) = SPI_WPMR_WPKEY_PASSWD;
  40036e:	4b0f      	ldr	r3, [pc, #60]	; (4003ac <samInit+0x54>)
  400370:	681b      	ldr	r3, [r3, #0]
  400372:	4a0f      	ldr	r2, [pc, #60]	; (4003b0 <samInit+0x58>)
  400374:	601a      	str	r2, [r3, #0]
	//There is no UART write protection

	//disabling timer write protection (Password: "TIM")
    Tc* tcBase0 = (Tc*) TC0;
    Tc* tcBase1 = (Tc*) TC1;
    tcBase0->TC_WPMR = TC_WPMR_WPKEY_PASSWD;
  400376:	4b0f      	ldr	r3, [pc, #60]	; (4003b4 <samInit+0x5c>)
  400378:	4a0f      	ldr	r2, [pc, #60]	; (4003b8 <samInit+0x60>)
  40037a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    tcBase1->TC_WPMR = TC_WPMR_WPKEY_PASSWD;
  40037e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
  400382:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    //Activating clocks for UART 0 (PID 8), PIO A (PID 11), SPI (PID 21), TC0 (Timer/Counter CH0) (PID 23)

	*((uint32_t *) REG_PMC_PCER0) |= (1<<8);
	*((uint32_t *) REG_PMC_PCER0) |= (1<<11);
	*((uint32_t *) REG_PMC_PCER0) |= (1<<21);
	*((uint32_t *) REG_PMC_PCER0) |= (1<<23);
  400386:	f502 224c 	add.w	r2, r2, #835584	; 0xcc000
  40038a:	f502 6282 	add.w	r2, r2, #1040	; 0x410
  40038e:	6813      	ldr	r3, [r2, #0]
  400390:	f443 0320 	orr.w	r3, r3, #10485760	; 0xa00000
  400394:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
  400398:	6013      	str	r3, [r2, #0]
  40039a:	4770      	bx	lr
  40039c:	504d4300 	.word	0x504d4300
  4003a0:	400e04e4 	.word	0x400e04e4
  4003a4:	50494f00 	.word	0x50494f00
  4003a8:	400e0e00 	.word	0x400e0e00
  4003ac:	400080e4 	.word	0x400080e4
  4003b0:	53504900 	.word	0x53504900
  4003b4:	54494d00 	.word	0x54494d00
  4003b8:	40010000 	.word	0x40010000

004003bc <inString>:
		}	
    }
}

//determines whether a given character sequence is in a char array request, returning 1 if present, -1 if not present
int inString(char request[], char des[]) {
  4003bc:	b508      	push	{r3, lr}
	if (strstr(request, des) != NULL) {return 1;}
  4003be:	4b04      	ldr	r3, [pc, #16]	; (4003d0 <inString+0x14>)
  4003c0:	4798      	blx	r3
  4003c2:	2800      	cmp	r0, #0
	return -1;
}
  4003c4:	bf14      	ite	ne
  4003c6:	2001      	movne	r0, #1
  4003c8:	f04f 30ff 	moveq.w	r0, #4294967295
  4003cc:	bd08      	pop	{r3, pc}
  4003ce:	bf00      	nop
  4003d0:	00400849 	.word	0x00400849

004003d4 <requestInString>:

//determines if tags "REQ:" and "/REQ" are in the input string
int requestInString(char request[]) {
  4003d4:	b570      	push	{r4, r5, r6, lr}
  4003d6:	4606      	mov	r6, r0
	int tag1InString = inString(request, "REQ:");
  4003d8:	4908      	ldr	r1, [pc, #32]	; (4003fc <requestInString+0x28>)
  4003da:	4c09      	ldr	r4, [pc, #36]	; (400400 <requestInString+0x2c>)
  4003dc:	47a0      	blx	r4
  4003de:	4605      	mov	r5, r0
	int tag2InString = inString(request, "/REQ");
  4003e0:	4908      	ldr	r1, [pc, #32]	; (400404 <requestInString+0x30>)
  4003e2:	4630      	mov	r0, r6
  4003e4:	47a0      	blx	r4
	if(tag1InString == 1 && tag2InString == 1) {
  4003e6:	2d01      	cmp	r5, #1
  4003e8:	d104      	bne.n	4003f4 <requestInString+0x20>
		return 1;
	}
	return -1;
  4003ea:	2801      	cmp	r0, #1
  4003ec:	bf18      	it	ne
  4003ee:	f04f 30ff 	movne.w	r0, #4294967295
  4003f2:	bd70      	pop	{r4, r5, r6, pc}
  4003f4:	f04f 30ff 	mov.w	r0, #4294967295
}
  4003f8:	bd70      	pop	{r4, r5, r6, pc}
  4003fa:	bf00      	nop
  4003fc:	00400d70 	.word	0x00400d70
  400400:	004003bd 	.word	0x004003bd
  400404:	00400d78 	.word	0x00400d78

00400408 <main>:
{
  400408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40040c:	b088      	sub	sp, #32
	samInit();
  40040e:	4b3e      	ldr	r3, [pc, #248]	; (400508 <main+0x100>)
  400410:	4798      	blx	r3
	pinMode(LED_PIN, OUTPUT);
  400412:	2101      	movs	r1, #1
  400414:	2010      	movs	r0, #16
  400416:	4b3d      	ldr	r3, [pc, #244]	; (40050c <main+0x104>)
  400418:	4798      	blx	r3
	uartInit(4, 26);
  40041a:	211a      	movs	r1, #26
  40041c:	2004      	movs	r0, #4
  40041e:	4b3c      	ldr	r3, [pc, #240]	; (400510 <main+0x108>)
  400420:	4798      	blx	r3
		char request[18] = "                  "; //initializing to a known value
  400422:	f8df 8118 	ldr.w	r8, [pc, #280]	; 40053c <main+0x134>
		while (requestInString(request) == -1 && charIndex < 18) {
  400426:	4d3b      	ldr	r5, [pc, #236]	; (400514 <main+0x10c>)
			request[charIndex] = uartRx();
  400428:	4f3b      	ldr	r7, [pc, #236]	; (400518 <main+0x110>)
			if (inString(request, "/REQ") == 1 && inString(request, "REQ:") == -1) {
  40042a:	4e3c      	ldr	r6, [pc, #240]	; (40051c <main+0x114>)
  40042c:	e058      	b.n	4004e0 <main+0xd8>
			charIndex++;
  40042e:	3401      	adds	r4, #1
		while (requestInString(request) == -1 && charIndex < 18) {
  400430:	a803      	add	r0, sp, #12
  400432:	47a8      	blx	r5
  400434:	f1b0 3fff 	cmp.w	r0, #4294967295
  400438:	d11e      	bne.n	400478 <main+0x70>
  40043a:	2c11      	cmp	r4, #17
  40043c:	dc1c      	bgt.n	400478 <main+0x70>
			request[charIndex] = uartRx();
  40043e:	47b8      	blx	r7
  400440:	ab08      	add	r3, sp, #32
  400442:	4423      	add	r3, r4
  400444:	f803 0c14 	strb.w	r0, [r3, #-20]
			if (inString(request, "/REQ") == 1 && inString(request, "REQ:") == -1) {
  400448:	4631      	mov	r1, r6
  40044a:	a803      	add	r0, sp, #12
  40044c:	4b34      	ldr	r3, [pc, #208]	; (400520 <main+0x118>)
  40044e:	4798      	blx	r3
  400450:	2801      	cmp	r0, #1
  400452:	d1ec      	bne.n	40042e <main+0x26>
  400454:	4933      	ldr	r1, [pc, #204]	; (400524 <main+0x11c>)
  400456:	a803      	add	r0, sp, #12
  400458:	4b31      	ldr	r3, [pc, #196]	; (400520 <main+0x118>)
  40045a:	4798      	blx	r3
  40045c:	f1b0 3fff 	cmp.w	r0, #4294967295
  400460:	d1e5      	bne.n	40042e <main+0x26>
  400462:	f10d 030b 	add.w	r3, sp, #11
  400466:	f10d 011d 	add.w	r1, sp, #29
					request[i] = " ";
  40046a:	4a2f      	ldr	r2, [pc, #188]	; (400528 <main+0x120>)
  40046c:	f803 2f01 	strb.w	r2, [r3, #1]!
				for (int i = 0; i < 18; i++) {
  400470:	428b      	cmp	r3, r1
  400472:	d1fb      	bne.n	40046c <main+0x64>
				charIndex = 0;
  400474:	2400      	movs	r4, #0
  400476:	e7da      	b.n	40042e <main+0x26>
		if (inString(request, "ledon")) {
  400478:	492c      	ldr	r1, [pc, #176]	; (40052c <main+0x124>)
  40047a:	a803      	add	r0, sp, #12
  40047c:	4b28      	ldr	r3, [pc, #160]	; (400520 <main+0x118>)
  40047e:	4798      	blx	r3
  400480:	2800      	cmp	r0, #0
  400482:	d137      	bne.n	4004f4 <main+0xec>
		else if (inString(request, "ledoff")) {
  400484:	492a      	ldr	r1, [pc, #168]	; (400530 <main+0x128>)
  400486:	a803      	add	r0, sp, #12
  400488:	4b25      	ldr	r3, [pc, #148]	; (400520 <main+0x118>)
  40048a:	4798      	blx	r3
  40048c:	2800      	cmp	r0, #0
  40048e:	d136      	bne.n	4004fe <main+0xf6>
		char currtime[] = "12:34:56";
  400490:	4a28      	ldr	r2, [pc, #160]	; (400534 <main+0x12c>)
  400492:	466b      	mov	r3, sp
  400494:	ca07      	ldmia	r2, {r0, r1, r2}
  400496:	c303      	stmia	r3!, {r0, r1}
  400498:	701a      	strb	r2, [r3, #0]
		for (int charCount = 0; charCount < webpageStartChars; charCount++) {
  40049a:	2400      	movs	r4, #0
			uartTx(webpageStart[charCount]);
  40049c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 400540 <main+0x138>
  4004a0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 400544 <main+0x13c>
  4004a4:	f8da 3000 	ldr.w	r3, [sl]
  4004a8:	5d18      	ldrb	r0, [r3, r4]
  4004aa:	47c8      	blx	r9
		for (int charCount = 0; charCount < webpageStartChars; charCount++) {
  4004ac:	3401      	adds	r4, #1
  4004ae:	2cff      	cmp	r4, #255	; 0xff
  4004b0:	d1f8      	bne.n	4004a4 <main+0x9c>
  4004b2:	f10d 34ff 	add.w	r4, sp, #4294967295
  4004b6:	f10d 0a07 	add.w	sl, sp, #7
			uartTx(currtime[charCount]);
  4004ba:	f8df 9088 	ldr.w	r9, [pc, #136]	; 400544 <main+0x13c>
  4004be:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  4004c2:	47c8      	blx	r9
		for (int charCount = 0; charCount < currtimeLen; charCount++) {
  4004c4:	45a2      	cmp	sl, r4
  4004c6:	d1fa      	bne.n	4004be <main+0xb6>
  4004c8:	2400      	movs	r4, #0
			uartTx(webpageStart[charCount]);
  4004ca:	f8df a074 	ldr.w	sl, [pc, #116]	; 400540 <main+0x138>
  4004ce:	f8df 9074 	ldr.w	r9, [pc, #116]	; 400544 <main+0x13c>
  4004d2:	f8da 3000 	ldr.w	r3, [sl]
  4004d6:	5d18      	ldrb	r0, [r3, r4]
  4004d8:	47c8      	blx	r9
		for (int charCount = 0; charCount < webpageStartChars; charCount++) {
  4004da:	3401      	adds	r4, #1
  4004dc:	2cff      	cmp	r4, #255	; 0xff
  4004de:	d1f8      	bne.n	4004d2 <main+0xca>
		char request[18] = "                  "; //initializing to a known value
  4004e0:	ac03      	add	r4, sp, #12
  4004e2:	46c6      	mov	lr, r8
  4004e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  4004e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4004ea:	f8de 3000 	ldr.w	r3, [lr]
  4004ee:	8023      	strh	r3, [r4, #0]
		int  charIndex = 0;
  4004f0:	2400      	movs	r4, #0
		while (requestInString(request) == -1 && charIndex < 18) {
  4004f2:	e79d      	b.n	400430 <main+0x28>
			digitalWrite(LED_PIN, HIGH);
  4004f4:	2101      	movs	r1, #1
  4004f6:	2010      	movs	r0, #16
  4004f8:	4b0f      	ldr	r3, [pc, #60]	; (400538 <main+0x130>)
  4004fa:	4798      	blx	r3
  4004fc:	e7c8      	b.n	400490 <main+0x88>
			digitalWrite(LED_PIN, LOW);
  4004fe:	2100      	movs	r1, #0
  400500:	2010      	movs	r0, #16
  400502:	4b0d      	ldr	r3, [pc, #52]	; (400538 <main+0x130>)
  400504:	4798      	blx	r3
  400506:	e7c3      	b.n	400490 <main+0x88>
  400508:	00400359 	.word	0x00400359
  40050c:	004001c5 	.word	0x004001c5
  400510:	004002e1 	.word	0x004002e1
  400514:	004003d5 	.word	0x004003d5
  400518:	0040033d 	.word	0x0040033d
  40051c:	00400d78 	.word	0x00400d78
  400520:	004003bd 	.word	0x004003bd
  400524:	00400d70 	.word	0x00400d70
  400528:	00400d80 	.word	0x00400d80
  40052c:	00400d84 	.word	0x00400d84
  400530:	00400d8c 	.word	0x00400d8c
  400534:	00400d94 	.word	0x00400d94
  400538:	0040029d 	.word	0x0040029d
  40053c:	00400d54 	.word	0x00400d54
  400540:	20000000 	.word	0x20000000
  400544:	00400325 	.word	0x00400325

00400548 <__libc_init_array>:
  400548:	b570      	push	{r4, r5, r6, lr}
  40054a:	4e0f      	ldr	r6, [pc, #60]	; (400588 <__libc_init_array+0x40>)
  40054c:	4d0f      	ldr	r5, [pc, #60]	; (40058c <__libc_init_array+0x44>)
  40054e:	1b76      	subs	r6, r6, r5
  400550:	10b6      	asrs	r6, r6, #2
  400552:	bf18      	it	ne
  400554:	2400      	movne	r4, #0
  400556:	d005      	beq.n	400564 <__libc_init_array+0x1c>
  400558:	3401      	adds	r4, #1
  40055a:	f855 3b04 	ldr.w	r3, [r5], #4
  40055e:	4798      	blx	r3
  400560:	42a6      	cmp	r6, r4
  400562:	d1f9      	bne.n	400558 <__libc_init_array+0x10>
  400564:	4e0a      	ldr	r6, [pc, #40]	; (400590 <__libc_init_array+0x48>)
  400566:	4d0b      	ldr	r5, [pc, #44]	; (400594 <__libc_init_array+0x4c>)
  400568:	f000 fd24 	bl	400fb4 <_init>
  40056c:	1b76      	subs	r6, r6, r5
  40056e:	10b6      	asrs	r6, r6, #2
  400570:	bf18      	it	ne
  400572:	2400      	movne	r4, #0
  400574:	d006      	beq.n	400584 <__libc_init_array+0x3c>
  400576:	3401      	adds	r4, #1
  400578:	f855 3b04 	ldr.w	r3, [r5], #4
  40057c:	4798      	blx	r3
  40057e:	42a6      	cmp	r6, r4
  400580:	d1f9      	bne.n	400576 <__libc_init_array+0x2e>
  400582:	bd70      	pop	{r4, r5, r6, pc}
  400584:	bd70      	pop	{r4, r5, r6, pc}
  400586:	bf00      	nop
  400588:	00400fc0 	.word	0x00400fc0
  40058c:	00400fc0 	.word	0x00400fc0
  400590:	00400fc8 	.word	0x00400fc8
  400594:	00400fc0 	.word	0x00400fc0

00400598 <critical_factorization>:
  400598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40059c:	f04f 0e01 	mov.w	lr, #1
  4005a0:	2500      	movs	r5, #0
  4005a2:	4674      	mov	r4, lr
  4005a4:	f04f 36ff 	mov.w	r6, #4294967295
  4005a8:	192b      	adds	r3, r5, r4
  4005aa:	428b      	cmp	r3, r1
  4005ac:	eb00 0706 	add.w	r7, r0, r6
  4005b0:	d20d      	bcs.n	4005ce <critical_factorization+0x36>
  4005b2:	5d3f      	ldrb	r7, [r7, r4]
  4005b4:	f810 c003 	ldrb.w	ip, [r0, r3]
  4005b8:	45bc      	cmp	ip, r7
  4005ba:	d22d      	bcs.n	400618 <critical_factorization+0x80>
  4005bc:	461d      	mov	r5, r3
  4005be:	2401      	movs	r4, #1
  4005c0:	eba3 0e06 	sub.w	lr, r3, r6
  4005c4:	192b      	adds	r3, r5, r4
  4005c6:	428b      	cmp	r3, r1
  4005c8:	eb00 0706 	add.w	r7, r0, r6
  4005cc:	d3f1      	bcc.n	4005b2 <critical_factorization+0x1a>
  4005ce:	f04f 0801 	mov.w	r8, #1
  4005d2:	2500      	movs	r5, #0
  4005d4:	4644      	mov	r4, r8
  4005d6:	f04f 37ff 	mov.w	r7, #4294967295
  4005da:	f8c2 e000 	str.w	lr, [r2]
  4005de:	192b      	adds	r3, r5, r4
  4005e0:	4299      	cmp	r1, r3
  4005e2:	eb00 0e07 	add.w	lr, r0, r7
  4005e6:	d90e      	bls.n	400606 <critical_factorization+0x6e>
  4005e8:	f81e e004 	ldrb.w	lr, [lr, r4]
  4005ec:	f810 c003 	ldrb.w	ip, [r0, r3]
  4005f0:	45f4      	cmp	ip, lr
  4005f2:	d918      	bls.n	400626 <critical_factorization+0x8e>
  4005f4:	461d      	mov	r5, r3
  4005f6:	2401      	movs	r4, #1
  4005f8:	eba3 0807 	sub.w	r8, r3, r7
  4005fc:	192b      	adds	r3, r5, r4
  4005fe:	4299      	cmp	r1, r3
  400600:	eb00 0e07 	add.w	lr, r0, r7
  400604:	d8f0      	bhi.n	4005e8 <critical_factorization+0x50>
  400606:	3701      	adds	r7, #1
  400608:	1c70      	adds	r0, r6, #1
  40060a:	4287      	cmp	r7, r0
  40060c:	bf24      	itt	cs
  40060e:	4638      	movcs	r0, r7
  400610:	f8c2 8000 	strcs.w	r8, [r2]
  400614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400618:	d00c      	beq.n	400634 <critical_factorization+0x9c>
  40061a:	f04f 0e01 	mov.w	lr, #1
  40061e:	462e      	mov	r6, r5
  400620:	4674      	mov	r4, lr
  400622:	4475      	add	r5, lr
  400624:	e7c0      	b.n	4005a8 <critical_factorization+0x10>
  400626:	d00b      	beq.n	400640 <critical_factorization+0xa8>
  400628:	f04f 0801 	mov.w	r8, #1
  40062c:	462f      	mov	r7, r5
  40062e:	4644      	mov	r4, r8
  400630:	4445      	add	r5, r8
  400632:	e7d4      	b.n	4005de <critical_factorization+0x46>
  400634:	4574      	cmp	r4, lr
  400636:	bf12      	itee	ne
  400638:	3401      	addne	r4, #1
  40063a:	461d      	moveq	r5, r3
  40063c:	2401      	moveq	r4, #1
  40063e:	e7b3      	b.n	4005a8 <critical_factorization+0x10>
  400640:	4544      	cmp	r4, r8
  400642:	bf12      	itee	ne
  400644:	3401      	addne	r4, #1
  400646:	461d      	moveq	r5, r3
  400648:	2401      	moveq	r4, #1
  40064a:	e7c8      	b.n	4005de <critical_factorization+0x46>

0040064c <two_way_long_needle>:
  40064c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400650:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  400654:	4616      	mov	r6, r2
  400656:	4605      	mov	r5, r0
  400658:	468b      	mov	fp, r1
  40065a:	4610      	mov	r0, r2
  40065c:	4619      	mov	r1, r3
  40065e:	aa03      	add	r2, sp, #12
  400660:	461c      	mov	r4, r3
  400662:	f7ff ff99 	bl	400598 <critical_factorization>
  400666:	4681      	mov	r9, r0
  400668:	ab03      	add	r3, sp, #12
  40066a:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  40066e:	f843 4f04 	str.w	r4, [r3, #4]!
  400672:	4293      	cmp	r3, r2
  400674:	d1fb      	bne.n	40066e <two_way_long_needle+0x22>
  400676:	b14c      	cbz	r4, 40068c <two_way_long_needle+0x40>
  400678:	1e63      	subs	r3, r4, #1
  40067a:	1e72      	subs	r2, r6, #1
  40067c:	a804      	add	r0, sp, #16
  40067e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  400682:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  400686:	f113 33ff 	adds.w	r3, r3, #4294967295
  40068a:	d2f8      	bcs.n	40067e <two_way_long_needle+0x32>
  40068c:	9903      	ldr	r1, [sp, #12]
  40068e:	464a      	mov	r2, r9
  400690:	4431      	add	r1, r6
  400692:	4630      	mov	r0, r6
  400694:	f000 fa58 	bl	400b48 <memcmp>
  400698:	2800      	cmp	r0, #0
  40069a:	d16f      	bne.n	40077c <two_way_long_needle+0x130>
  40069c:	f109 33ff 	add.w	r3, r9, #4294967295
  4006a0:	9300      	str	r3, [sp, #0]
  4006a2:	18f3      	adds	r3, r6, r3
  4006a4:	4682      	mov	sl, r0
  4006a6:	9301      	str	r3, [sp, #4]
  4006a8:	4623      	mov	r3, r4
  4006aa:	4680      	mov	r8, r0
  4006ac:	4654      	mov	r4, sl
  4006ae:	4658      	mov	r0, fp
  4006b0:	469a      	mov	sl, r3
  4006b2:	eb08 070a 	add.w	r7, r8, sl
  4006b6:	1a3a      	subs	r2, r7, r0
  4006b8:	2100      	movs	r1, #0
  4006ba:	4428      	add	r0, r5
  4006bc:	f000 f9fe 	bl	400abc <memchr>
  4006c0:	2800      	cmp	r0, #0
  4006c2:	d156      	bne.n	400772 <two_way_long_needle+0x126>
  4006c4:	2f00      	cmp	r7, #0
  4006c6:	d054      	beq.n	400772 <two_way_long_needle+0x126>
  4006c8:	19eb      	adds	r3, r5, r7
  4006ca:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  4006ce:	ab04      	add	r3, sp, #16
  4006d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4006d4:	b14b      	cbz	r3, 4006ea <two_way_long_needle+0x9e>
  4006d6:	b124      	cbz	r4, 4006e2 <two_way_long_needle+0x96>
  4006d8:	9a03      	ldr	r2, [sp, #12]
  4006da:	4293      	cmp	r3, r2
  4006dc:	d201      	bcs.n	4006e2 <two_way_long_needle+0x96>
  4006de:	ebaa 0302 	sub.w	r3, sl, r2
  4006e2:	4498      	add	r8, r3
  4006e4:	2400      	movs	r4, #0
  4006e6:	4638      	mov	r0, r7
  4006e8:	e7e3      	b.n	4006b2 <two_way_long_needle+0x66>
  4006ea:	454c      	cmp	r4, r9
  4006ec:	4623      	mov	r3, r4
  4006ee:	bf38      	it	cc
  4006f0:	464b      	movcc	r3, r9
  4006f2:	f10a 3eff 	add.w	lr, sl, #4294967295
  4006f6:	4573      	cmp	r3, lr
  4006f8:	d213      	bcs.n	400722 <two_way_long_needle+0xd6>
  4006fa:	eb08 0203 	add.w	r2, r8, r3
  4006fe:	5ca8      	ldrb	r0, [r5, r2]
  400700:	f816 c003 	ldrb.w	ip, [r6, r3]
  400704:	442a      	add	r2, r5
  400706:	4584      	cmp	ip, r0
  400708:	eb06 0103 	add.w	r1, r6, r3
  40070c:	d006      	beq.n	40071c <two_way_long_needle+0xd0>
  40070e:	e02c      	b.n	40076a <two_way_long_needle+0x11e>
  400710:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  400714:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  400718:	4584      	cmp	ip, r0
  40071a:	d126      	bne.n	40076a <two_way_long_needle+0x11e>
  40071c:	3301      	adds	r3, #1
  40071e:	4573      	cmp	r3, lr
  400720:	d3f6      	bcc.n	400710 <two_way_long_needle+0xc4>
  400722:	454c      	cmp	r4, r9
  400724:	9900      	ldr	r1, [sp, #0]
  400726:	f080 8089 	bcs.w	40083c <two_way_long_needle+0x1f0>
  40072a:	9b00      	ldr	r3, [sp, #0]
  40072c:	eb08 0203 	add.w	r2, r8, r3
  400730:	9b01      	ldr	r3, [sp, #4]
  400732:	5ca8      	ldrb	r0, [r5, r2]
  400734:	781b      	ldrb	r3, [r3, #0]
  400736:	442a      	add	r2, r5
  400738:	4298      	cmp	r0, r3
  40073a:	d17f      	bne.n	40083c <two_way_long_needle+0x1f0>
  40073c:	9801      	ldr	r0, [sp, #4]
  40073e:	f104 3bff 	add.w	fp, r4, #4294967295
  400742:	e006      	b.n	400752 <two_way_long_needle+0x106>
  400744:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  400748:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  40074c:	45f4      	cmp	ip, lr
  40074e:	d103      	bne.n	400758 <two_way_long_needle+0x10c>
  400750:	4619      	mov	r1, r3
  400752:	1e4b      	subs	r3, r1, #1
  400754:	459b      	cmp	fp, r3
  400756:	d1f5      	bne.n	400744 <two_way_long_needle+0xf8>
  400758:	3401      	adds	r4, #1
  40075a:	428c      	cmp	r4, r1
  40075c:	d870      	bhi.n	400840 <two_way_long_needle+0x1f4>
  40075e:	9c03      	ldr	r4, [sp, #12]
  400760:	4638      	mov	r0, r7
  400762:	44a0      	add	r8, r4
  400764:	ebaa 0404 	sub.w	r4, sl, r4
  400768:	e7a3      	b.n	4006b2 <two_way_long_needle+0x66>
  40076a:	f1c9 0201 	rsb	r2, r9, #1
  40076e:	4490      	add	r8, r2
  400770:	e7b7      	b.n	4006e2 <two_way_long_needle+0x96>
  400772:	2000      	movs	r0, #0
  400774:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  400778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40077c:	eba4 0309 	sub.w	r3, r4, r9
  400780:	454b      	cmp	r3, r9
  400782:	bf38      	it	cc
  400784:	464b      	movcc	r3, r9
  400786:	f109 38ff 	add.w	r8, r9, #4294967295
  40078a:	3301      	adds	r3, #1
  40078c:	9303      	str	r3, [sp, #12]
  40078e:	eb06 0308 	add.w	r3, r6, r8
  400792:	4658      	mov	r0, fp
  400794:	f04f 0a00 	mov.w	sl, #0
  400798:	46cb      	mov	fp, r9
  40079a:	4699      	mov	r9, r3
  40079c:	eb0a 0704 	add.w	r7, sl, r4
  4007a0:	1a3a      	subs	r2, r7, r0
  4007a2:	2100      	movs	r1, #0
  4007a4:	4428      	add	r0, r5
  4007a6:	f000 f989 	bl	400abc <memchr>
  4007aa:	2800      	cmp	r0, #0
  4007ac:	d1e1      	bne.n	400772 <two_way_long_needle+0x126>
  4007ae:	2f00      	cmp	r7, #0
  4007b0:	d0df      	beq.n	400772 <two_way_long_needle+0x126>
  4007b2:	19eb      	adds	r3, r5, r7
  4007b4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  4007b8:	ab04      	add	r3, sp, #16
  4007ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4007be:	bba3      	cbnz	r3, 40082a <two_way_long_needle+0x1de>
  4007c0:	1e60      	subs	r0, r4, #1
  4007c2:	4583      	cmp	fp, r0
  4007c4:	d215      	bcs.n	4007f2 <two_way_long_needle+0x1a6>
  4007c6:	eb0a 020b 	add.w	r2, sl, fp
  4007ca:	f815 e002 	ldrb.w	lr, [r5, r2]
  4007ce:	f816 300b 	ldrb.w	r3, [r6, fp]
  4007d2:	442a      	add	r2, r5
  4007d4:	459e      	cmp	lr, r3
  4007d6:	eb06 010b 	add.w	r1, r6, fp
  4007da:	465b      	mov	r3, fp
  4007dc:	d006      	beq.n	4007ec <two_way_long_needle+0x1a0>
  4007de:	e027      	b.n	400830 <two_way_long_needle+0x1e4>
  4007e0:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  4007e4:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  4007e8:	45f4      	cmp	ip, lr
  4007ea:	d121      	bne.n	400830 <two_way_long_needle+0x1e4>
  4007ec:	3301      	adds	r3, #1
  4007ee:	4283      	cmp	r3, r0
  4007f0:	d3f6      	bcc.n	4007e0 <two_way_long_needle+0x194>
  4007f2:	f1b8 3fff 	cmp.w	r8, #4294967295
  4007f6:	d011      	beq.n	40081c <two_way_long_needle+0x1d0>
  4007f8:	eb0a 0208 	add.w	r2, sl, r8
  4007fc:	5cab      	ldrb	r3, [r5, r2]
  4007fe:	f899 1000 	ldrb.w	r1, [r9]
  400802:	442a      	add	r2, r5
  400804:	4299      	cmp	r1, r3
  400806:	d10f      	bne.n	400828 <two_way_long_needle+0x1dc>
  400808:	464b      	mov	r3, r9
  40080a:	e005      	b.n	400818 <two_way_long_needle+0x1cc>
  40080c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  400810:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  400814:	4288      	cmp	r0, r1
  400816:	d107      	bne.n	400828 <two_way_long_needle+0x1dc>
  400818:	42b3      	cmp	r3, r6
  40081a:	d1f7      	bne.n	40080c <two_way_long_needle+0x1c0>
  40081c:	eb05 000a 	add.w	r0, r5, sl
  400820:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  400824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400828:	9b03      	ldr	r3, [sp, #12]
  40082a:	449a      	add	sl, r3
  40082c:	4638      	mov	r0, r7
  40082e:	e7b5      	b.n	40079c <two_way_long_needle+0x150>
  400830:	f1cb 0201 	rsb	r2, fp, #1
  400834:	4492      	add	sl, r2
  400836:	449a      	add	sl, r3
  400838:	4638      	mov	r0, r7
  40083a:	e7af      	b.n	40079c <two_way_long_needle+0x150>
  40083c:	4649      	mov	r1, r9
  40083e:	e78b      	b.n	400758 <two_way_long_needle+0x10c>
  400840:	eb05 0008 	add.w	r0, r5, r8
  400844:	e796      	b.n	400774 <two_way_long_needle+0x128>
  400846:	bf00      	nop

00400848 <strstr>:
  400848:	7802      	ldrb	r2, [r0, #0]
  40084a:	2a00      	cmp	r2, #0
  40084c:	f000 8101 	beq.w	400a52 <strstr+0x20a>
  400850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400854:	f891 8000 	ldrb.w	r8, [r1]
  400858:	b085      	sub	sp, #20
  40085a:	4644      	mov	r4, r8
  40085c:	f1b8 0f00 	cmp.w	r8, #0
  400860:	d016      	beq.n	400890 <strstr+0x48>
  400862:	4686      	mov	lr, r0
  400864:	f101 0c01 	add.w	ip, r1, #1
  400868:	2701      	movs	r7, #1
  40086a:	e004      	b.n	400876 <strstr+0x2e>
  40086c:	4663      	mov	r3, ip
  40086e:	f813 4b01 	ldrb.w	r4, [r3], #1
  400872:	b164      	cbz	r4, 40088e <strstr+0x46>
  400874:	469c      	mov	ip, r3
  400876:	42a2      	cmp	r2, r4
  400878:	bf14      	ite	ne
  40087a:	2700      	movne	r7, #0
  40087c:	f007 0701 	andeq.w	r7, r7, #1
  400880:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  400884:	2a00      	cmp	r2, #0
  400886:	d1f1      	bne.n	40086c <strstr+0x24>
  400888:	f89c 3000 	ldrb.w	r3, [ip]
  40088c:	b9fb      	cbnz	r3, 4008ce <strstr+0x86>
  40088e:	b117      	cbz	r7, 400896 <strstr+0x4e>
  400890:	b005      	add	sp, #20
  400892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400896:	460e      	mov	r6, r1
  400898:	4605      	mov	r5, r0
  40089a:	4641      	mov	r1, r8
  40089c:	3001      	adds	r0, #1
  40089e:	ebac 0406 	sub.w	r4, ip, r6
  4008a2:	f000 f981 	bl	400ba8 <strchr>
  4008a6:	4607      	mov	r7, r0
  4008a8:	b188      	cbz	r0, 4008ce <strstr+0x86>
  4008aa:	2c01      	cmp	r4, #1
  4008ac:	d0f0      	beq.n	400890 <strstr+0x48>
  4008ae:	1928      	adds	r0, r5, r4
  4008b0:	4287      	cmp	r7, r0
  4008b2:	bf8c      	ite	hi
  4008b4:	2101      	movhi	r1, #1
  4008b6:	1bc1      	subls	r1, r0, r7
  4008b8:	2c1f      	cmp	r4, #31
  4008ba:	468b      	mov	fp, r1
  4008bc:	d90b      	bls.n	4008d6 <strstr+0x8e>
  4008be:	4623      	mov	r3, r4
  4008c0:	4632      	mov	r2, r6
  4008c2:	4638      	mov	r0, r7
  4008c4:	f7ff fec2 	bl	40064c <two_way_long_needle>
  4008c8:	b005      	add	sp, #20
  4008ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4008ce:	2000      	movs	r0, #0
  4008d0:	b005      	add	sp, #20
  4008d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4008d6:	aa03      	add	r2, sp, #12
  4008d8:	4621      	mov	r1, r4
  4008da:	4630      	mov	r0, r6
  4008dc:	f7ff fe5c 	bl	400598 <critical_factorization>
  4008e0:	9903      	ldr	r1, [sp, #12]
  4008e2:	4680      	mov	r8, r0
  4008e4:	4602      	mov	r2, r0
  4008e6:	4431      	add	r1, r6
  4008e8:	4630      	mov	r0, r6
  4008ea:	f000 f92d 	bl	400b48 <memcmp>
  4008ee:	2800      	cmp	r0, #0
  4008f0:	d157      	bne.n	4009a2 <strstr+0x15a>
  4008f2:	4681      	mov	r9, r0
  4008f4:	4605      	mov	r5, r0
  4008f6:	46b2      	mov	sl, r6
  4008f8:	4658      	mov	r0, fp
  4008fa:	f108 33ff 	add.w	r3, r8, #4294967295
  4008fe:	9300      	str	r3, [sp, #0]
  400900:	18f3      	adds	r3, r6, r3
  400902:	9301      	str	r3, [sp, #4]
  400904:	1966      	adds	r6, r4, r5
  400906:	1a32      	subs	r2, r6, r0
  400908:	2100      	movs	r1, #0
  40090a:	4438      	add	r0, r7
  40090c:	f000 f8d6 	bl	400abc <memchr>
  400910:	2800      	cmp	r0, #0
  400912:	d1dc      	bne.n	4008ce <strstr+0x86>
  400914:	2e00      	cmp	r6, #0
  400916:	d0da      	beq.n	4008ce <strstr+0x86>
  400918:	45c8      	cmp	r8, r9
  40091a:	4643      	mov	r3, r8
  40091c:	bf38      	it	cc
  40091e:	464b      	movcc	r3, r9
  400920:	429c      	cmp	r4, r3
  400922:	d912      	bls.n	40094a <strstr+0x102>
  400924:	195a      	adds	r2, r3, r5
  400926:	5cb9      	ldrb	r1, [r7, r2]
  400928:	f81a 0003 	ldrb.w	r0, [sl, r3]
  40092c:	443a      	add	r2, r7
  40092e:	4288      	cmp	r0, r1
  400930:	eb0a 0e03 	add.w	lr, sl, r3
  400934:	d006      	beq.n	400944 <strstr+0xfc>
  400936:	e02c      	b.n	400992 <strstr+0x14a>
  400938:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  40093c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  400940:	4288      	cmp	r0, r1
  400942:	d126      	bne.n	400992 <strstr+0x14a>
  400944:	3301      	adds	r3, #1
  400946:	429c      	cmp	r4, r3
  400948:	d1f6      	bne.n	400938 <strstr+0xf0>
  40094a:	45c8      	cmp	r8, r9
  40094c:	9900      	ldr	r1, [sp, #0]
  40094e:	f240 8083 	bls.w	400a58 <strstr+0x210>
  400952:	9b00      	ldr	r3, [sp, #0]
  400954:	18ea      	adds	r2, r5, r3
  400956:	9b01      	ldr	r3, [sp, #4]
  400958:	5cb8      	ldrb	r0, [r7, r2]
  40095a:	781b      	ldrb	r3, [r3, #0]
  40095c:	443a      	add	r2, r7
  40095e:	4298      	cmp	r0, r3
  400960:	d17a      	bne.n	400a58 <strstr+0x210>
  400962:	9801      	ldr	r0, [sp, #4]
  400964:	f109 3bff 	add.w	fp, r9, #4294967295
  400968:	e006      	b.n	400978 <strstr+0x130>
  40096a:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40096e:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  400972:	45f4      	cmp	ip, lr
  400974:	d103      	bne.n	40097e <strstr+0x136>
  400976:	4619      	mov	r1, r3
  400978:	1e4b      	subs	r3, r1, #1
  40097a:	455b      	cmp	r3, fp
  40097c:	d1f5      	bne.n	40096a <strstr+0x122>
  40097e:	f109 0901 	add.w	r9, r9, #1
  400982:	4589      	cmp	r9, r1
  400984:	d857      	bhi.n	400a36 <strstr+0x1ee>
  400986:	9b03      	ldr	r3, [sp, #12]
  400988:	4630      	mov	r0, r6
  40098a:	441d      	add	r5, r3
  40098c:	eba4 0903 	sub.w	r9, r4, r3
  400990:	e7b8      	b.n	400904 <strstr+0xbc>
  400992:	f1c8 0201 	rsb	r2, r8, #1
  400996:	4415      	add	r5, r2
  400998:	441d      	add	r5, r3
  40099a:	f04f 0900 	mov.w	r9, #0
  40099e:	4630      	mov	r0, r6
  4009a0:	e7b0      	b.n	400904 <strstr+0xbc>
  4009a2:	eba4 0308 	sub.w	r3, r4, r8
  4009a6:	4543      	cmp	r3, r8
  4009a8:	bf38      	it	cc
  4009aa:	4643      	movcc	r3, r8
  4009ac:	f108 39ff 	add.w	r9, r8, #4294967295
  4009b0:	3301      	adds	r3, #1
  4009b2:	9303      	str	r3, [sp, #12]
  4009b4:	eb06 0309 	add.w	r3, r6, r9
  4009b8:	4658      	mov	r0, fp
  4009ba:	2500      	movs	r5, #0
  4009bc:	46bb      	mov	fp, r7
  4009be:	469a      	mov	sl, r3
  4009c0:	1967      	adds	r7, r4, r5
  4009c2:	1a3a      	subs	r2, r7, r0
  4009c4:	2100      	movs	r1, #0
  4009c6:	4458      	add	r0, fp
  4009c8:	f000 f878 	bl	400abc <memchr>
  4009cc:	2800      	cmp	r0, #0
  4009ce:	f47f af7e 	bne.w	4008ce <strstr+0x86>
  4009d2:	2f00      	cmp	r7, #0
  4009d4:	f43f af7b 	beq.w	4008ce <strstr+0x86>
  4009d8:	4544      	cmp	r4, r8
  4009da:	d915      	bls.n	400a08 <strstr+0x1c0>
  4009dc:	eb08 0205 	add.w	r2, r8, r5
  4009e0:	f81b 0002 	ldrb.w	r0, [fp, r2]
  4009e4:	f816 3008 	ldrb.w	r3, [r6, r8]
  4009e8:	445a      	add	r2, fp
  4009ea:	4298      	cmp	r0, r3
  4009ec:	eb06 0108 	add.w	r1, r6, r8
  4009f0:	4643      	mov	r3, r8
  4009f2:	d006      	beq.n	400a02 <strstr+0x1ba>
  4009f4:	e023      	b.n	400a3e <strstr+0x1f6>
  4009f6:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  4009fa:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  4009fe:	4586      	cmp	lr, r0
  400a00:	d11d      	bne.n	400a3e <strstr+0x1f6>
  400a02:	3301      	adds	r3, #1
  400a04:	429c      	cmp	r4, r3
  400a06:	d1f6      	bne.n	4009f6 <strstr+0x1ae>
  400a08:	f1b9 3fff 	cmp.w	r9, #4294967295
  400a0c:	d012      	beq.n	400a34 <strstr+0x1ec>
  400a0e:	eb05 0209 	add.w	r2, r5, r9
  400a12:	f81b 1002 	ldrb.w	r1, [fp, r2]
  400a16:	f89a 3000 	ldrb.w	r3, [sl]
  400a1a:	445a      	add	r2, fp
  400a1c:	4299      	cmp	r1, r3
  400a1e:	d114      	bne.n	400a4a <strstr+0x202>
  400a20:	4653      	mov	r3, sl
  400a22:	e005      	b.n	400a30 <strstr+0x1e8>
  400a24:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  400a28:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  400a2c:	4288      	cmp	r0, r1
  400a2e:	d10c      	bne.n	400a4a <strstr+0x202>
  400a30:	42b3      	cmp	r3, r6
  400a32:	d1f7      	bne.n	400a24 <strstr+0x1dc>
  400a34:	465f      	mov	r7, fp
  400a36:	1978      	adds	r0, r7, r5
  400a38:	b005      	add	sp, #20
  400a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400a3e:	f1c8 0201 	rsb	r2, r8, #1
  400a42:	4415      	add	r5, r2
  400a44:	441d      	add	r5, r3
  400a46:	4638      	mov	r0, r7
  400a48:	e7ba      	b.n	4009c0 <strstr+0x178>
  400a4a:	9b03      	ldr	r3, [sp, #12]
  400a4c:	4638      	mov	r0, r7
  400a4e:	441d      	add	r5, r3
  400a50:	e7b6      	b.n	4009c0 <strstr+0x178>
  400a52:	780b      	ldrb	r3, [r1, #0]
  400a54:	b913      	cbnz	r3, 400a5c <strstr+0x214>
  400a56:	4770      	bx	lr
  400a58:	4641      	mov	r1, r8
  400a5a:	e790      	b.n	40097e <strstr+0x136>
  400a5c:	2000      	movs	r0, #0
  400a5e:	4770      	bx	lr

00400a60 <register_fini>:
  400a60:	4b02      	ldr	r3, [pc, #8]	; (400a6c <register_fini+0xc>)
  400a62:	b113      	cbz	r3, 400a6a <register_fini+0xa>
  400a64:	4802      	ldr	r0, [pc, #8]	; (400a70 <register_fini+0x10>)
  400a66:	f000 b805 	b.w	400a74 <atexit>
  400a6a:	4770      	bx	lr
  400a6c:	00000000 	.word	0x00000000
  400a70:	00400a81 	.word	0x00400a81

00400a74 <atexit>:
  400a74:	2300      	movs	r3, #0
  400a76:	4601      	mov	r1, r0
  400a78:	461a      	mov	r2, r3
  400a7a:	4618      	mov	r0, r3
  400a7c:	f000 b908 	b.w	400c90 <__register_exitproc>

00400a80 <__libc_fini_array>:
  400a80:	b538      	push	{r3, r4, r5, lr}
  400a82:	4c0a      	ldr	r4, [pc, #40]	; (400aac <__libc_fini_array+0x2c>)
  400a84:	4d0a      	ldr	r5, [pc, #40]	; (400ab0 <__libc_fini_array+0x30>)
  400a86:	1b64      	subs	r4, r4, r5
  400a88:	10a4      	asrs	r4, r4, #2
  400a8a:	d00a      	beq.n	400aa2 <__libc_fini_array+0x22>
  400a8c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400a90:	3b01      	subs	r3, #1
  400a92:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400a96:	3c01      	subs	r4, #1
  400a98:	f855 3904 	ldr.w	r3, [r5], #-4
  400a9c:	4798      	blx	r3
  400a9e:	2c00      	cmp	r4, #0
  400aa0:	d1f9      	bne.n	400a96 <__libc_fini_array+0x16>
  400aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400aa6:	f000 ba8f 	b.w	400fc8 <_fini>
  400aaa:	bf00      	nop
  400aac:	00400fd8 	.word	0x00400fd8
  400ab0:	00400fd4 	.word	0x00400fd4

00400ab4 <__retarget_lock_acquire_recursive>:
  400ab4:	4770      	bx	lr
  400ab6:	bf00      	nop

00400ab8 <__retarget_lock_release_recursive>:
  400ab8:	4770      	bx	lr
  400aba:	bf00      	nop

00400abc <memchr>:
  400abc:	0783      	lsls	r3, r0, #30
  400abe:	b470      	push	{r4, r5, r6}
  400ac0:	b2cd      	uxtb	r5, r1
  400ac2:	d03d      	beq.n	400b40 <memchr+0x84>
  400ac4:	1e54      	subs	r4, r2, #1
  400ac6:	b30a      	cbz	r2, 400b0c <memchr+0x50>
  400ac8:	7803      	ldrb	r3, [r0, #0]
  400aca:	42ab      	cmp	r3, r5
  400acc:	d01f      	beq.n	400b0e <memchr+0x52>
  400ace:	1c43      	adds	r3, r0, #1
  400ad0:	e005      	b.n	400ade <memchr+0x22>
  400ad2:	f114 34ff 	adds.w	r4, r4, #4294967295
  400ad6:	d319      	bcc.n	400b0c <memchr+0x50>
  400ad8:	7802      	ldrb	r2, [r0, #0]
  400ada:	42aa      	cmp	r2, r5
  400adc:	d017      	beq.n	400b0e <memchr+0x52>
  400ade:	f013 0f03 	tst.w	r3, #3
  400ae2:	4618      	mov	r0, r3
  400ae4:	f103 0301 	add.w	r3, r3, #1
  400ae8:	d1f3      	bne.n	400ad2 <memchr+0x16>
  400aea:	2c03      	cmp	r4, #3
  400aec:	d811      	bhi.n	400b12 <memchr+0x56>
  400aee:	b34c      	cbz	r4, 400b44 <memchr+0x88>
  400af0:	7803      	ldrb	r3, [r0, #0]
  400af2:	42ab      	cmp	r3, r5
  400af4:	d00b      	beq.n	400b0e <memchr+0x52>
  400af6:	4404      	add	r4, r0
  400af8:	1c43      	adds	r3, r0, #1
  400afa:	e002      	b.n	400b02 <memchr+0x46>
  400afc:	7802      	ldrb	r2, [r0, #0]
  400afe:	42aa      	cmp	r2, r5
  400b00:	d005      	beq.n	400b0e <memchr+0x52>
  400b02:	429c      	cmp	r4, r3
  400b04:	4618      	mov	r0, r3
  400b06:	f103 0301 	add.w	r3, r3, #1
  400b0a:	d1f7      	bne.n	400afc <memchr+0x40>
  400b0c:	2000      	movs	r0, #0
  400b0e:	bc70      	pop	{r4, r5, r6}
  400b10:	4770      	bx	lr
  400b12:	0209      	lsls	r1, r1, #8
  400b14:	b289      	uxth	r1, r1
  400b16:	4329      	orrs	r1, r5
  400b18:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  400b1c:	6803      	ldr	r3, [r0, #0]
  400b1e:	4606      	mov	r6, r0
  400b20:	404b      	eors	r3, r1
  400b22:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  400b26:	ea22 0303 	bic.w	r3, r2, r3
  400b2a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  400b2e:	f100 0004 	add.w	r0, r0, #4
  400b32:	d103      	bne.n	400b3c <memchr+0x80>
  400b34:	3c04      	subs	r4, #4
  400b36:	2c03      	cmp	r4, #3
  400b38:	d8f0      	bhi.n	400b1c <memchr+0x60>
  400b3a:	e7d8      	b.n	400aee <memchr+0x32>
  400b3c:	4630      	mov	r0, r6
  400b3e:	e7d7      	b.n	400af0 <memchr+0x34>
  400b40:	4614      	mov	r4, r2
  400b42:	e7d2      	b.n	400aea <memchr+0x2e>
  400b44:	4620      	mov	r0, r4
  400b46:	e7e2      	b.n	400b0e <memchr+0x52>

00400b48 <memcmp>:
  400b48:	2a03      	cmp	r2, #3
  400b4a:	b470      	push	{r4, r5, r6}
  400b4c:	d922      	bls.n	400b94 <memcmp+0x4c>
  400b4e:	ea40 0301 	orr.w	r3, r0, r1
  400b52:	079b      	lsls	r3, r3, #30
  400b54:	d011      	beq.n	400b7a <memcmp+0x32>
  400b56:	7803      	ldrb	r3, [r0, #0]
  400b58:	780c      	ldrb	r4, [r1, #0]
  400b5a:	42a3      	cmp	r3, r4
  400b5c:	d11d      	bne.n	400b9a <memcmp+0x52>
  400b5e:	440a      	add	r2, r1
  400b60:	3101      	adds	r1, #1
  400b62:	e005      	b.n	400b70 <memcmp+0x28>
  400b64:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  400b68:	f811 4b01 	ldrb.w	r4, [r1], #1
  400b6c:	42a3      	cmp	r3, r4
  400b6e:	d114      	bne.n	400b9a <memcmp+0x52>
  400b70:	4291      	cmp	r1, r2
  400b72:	d1f7      	bne.n	400b64 <memcmp+0x1c>
  400b74:	2000      	movs	r0, #0
  400b76:	bc70      	pop	{r4, r5, r6}
  400b78:	4770      	bx	lr
  400b7a:	680d      	ldr	r5, [r1, #0]
  400b7c:	6806      	ldr	r6, [r0, #0]
  400b7e:	460c      	mov	r4, r1
  400b80:	42ae      	cmp	r6, r5
  400b82:	4603      	mov	r3, r0
  400b84:	f101 0104 	add.w	r1, r1, #4
  400b88:	f100 0004 	add.w	r0, r0, #4
  400b8c:	d108      	bne.n	400ba0 <memcmp+0x58>
  400b8e:	3a04      	subs	r2, #4
  400b90:	2a03      	cmp	r2, #3
  400b92:	d8f2      	bhi.n	400b7a <memcmp+0x32>
  400b94:	2a00      	cmp	r2, #0
  400b96:	d1de      	bne.n	400b56 <memcmp+0xe>
  400b98:	e7ec      	b.n	400b74 <memcmp+0x2c>
  400b9a:	1b18      	subs	r0, r3, r4
  400b9c:	bc70      	pop	{r4, r5, r6}
  400b9e:	4770      	bx	lr
  400ba0:	4621      	mov	r1, r4
  400ba2:	4618      	mov	r0, r3
  400ba4:	e7d7      	b.n	400b56 <memcmp+0xe>
  400ba6:	bf00      	nop

00400ba8 <strchr>:
  400ba8:	b2c9      	uxtb	r1, r1
  400baa:	2900      	cmp	r1, #0
  400bac:	d041      	beq.n	400c32 <strchr+0x8a>
  400bae:	0782      	lsls	r2, r0, #30
  400bb0:	b4f0      	push	{r4, r5, r6, r7}
  400bb2:	d067      	beq.n	400c84 <strchr+0xdc>
  400bb4:	7803      	ldrb	r3, [r0, #0]
  400bb6:	2b00      	cmp	r3, #0
  400bb8:	d068      	beq.n	400c8c <strchr+0xe4>
  400bba:	4299      	cmp	r1, r3
  400bbc:	d037      	beq.n	400c2e <strchr+0x86>
  400bbe:	1c43      	adds	r3, r0, #1
  400bc0:	e004      	b.n	400bcc <strchr+0x24>
  400bc2:	f813 0b01 	ldrb.w	r0, [r3], #1
  400bc6:	b390      	cbz	r0, 400c2e <strchr+0x86>
  400bc8:	4281      	cmp	r1, r0
  400bca:	d02f      	beq.n	400c2c <strchr+0x84>
  400bcc:	079a      	lsls	r2, r3, #30
  400bce:	461c      	mov	r4, r3
  400bd0:	d1f7      	bne.n	400bc2 <strchr+0x1a>
  400bd2:	6825      	ldr	r5, [r4, #0]
  400bd4:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  400bd8:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  400bdc:	ea83 0605 	eor.w	r6, r3, r5
  400be0:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  400be4:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  400be8:	ea20 0006 	bic.w	r0, r0, r6
  400bec:	ea22 0205 	bic.w	r2, r2, r5
  400bf0:	4302      	orrs	r2, r0
  400bf2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  400bf6:	d111      	bne.n	400c1c <strchr+0x74>
  400bf8:	4620      	mov	r0, r4
  400bfa:	f850 6f04 	ldr.w	r6, [r0, #4]!
  400bfe:	ea83 0706 	eor.w	r7, r3, r6
  400c02:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  400c06:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  400c0a:	ea25 0507 	bic.w	r5, r5, r7
  400c0e:	ea22 0206 	bic.w	r2, r2, r6
  400c12:	432a      	orrs	r2, r5
  400c14:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  400c18:	d0ef      	beq.n	400bfa <strchr+0x52>
  400c1a:	4604      	mov	r4, r0
  400c1c:	7820      	ldrb	r0, [r4, #0]
  400c1e:	b918      	cbnz	r0, 400c28 <strchr+0x80>
  400c20:	e005      	b.n	400c2e <strchr+0x86>
  400c22:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  400c26:	b110      	cbz	r0, 400c2e <strchr+0x86>
  400c28:	4281      	cmp	r1, r0
  400c2a:	d1fa      	bne.n	400c22 <strchr+0x7a>
  400c2c:	4620      	mov	r0, r4
  400c2e:	bcf0      	pop	{r4, r5, r6, r7}
  400c30:	4770      	bx	lr
  400c32:	0783      	lsls	r3, r0, #30
  400c34:	d024      	beq.n	400c80 <strchr+0xd8>
  400c36:	7803      	ldrb	r3, [r0, #0]
  400c38:	2b00      	cmp	r3, #0
  400c3a:	d0f9      	beq.n	400c30 <strchr+0x88>
  400c3c:	1c43      	adds	r3, r0, #1
  400c3e:	e003      	b.n	400c48 <strchr+0xa0>
  400c40:	7802      	ldrb	r2, [r0, #0]
  400c42:	3301      	adds	r3, #1
  400c44:	2a00      	cmp	r2, #0
  400c46:	d0f3      	beq.n	400c30 <strchr+0x88>
  400c48:	0799      	lsls	r1, r3, #30
  400c4a:	4618      	mov	r0, r3
  400c4c:	d1f8      	bne.n	400c40 <strchr+0x98>
  400c4e:	6819      	ldr	r1, [r3, #0]
  400c50:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  400c54:	ea22 0201 	bic.w	r2, r2, r1
  400c58:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  400c5c:	d108      	bne.n	400c70 <strchr+0xc8>
  400c5e:	f853 1f04 	ldr.w	r1, [r3, #4]!
  400c62:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  400c66:	ea22 0201 	bic.w	r2, r2, r1
  400c6a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  400c6e:	d0f6      	beq.n	400c5e <strchr+0xb6>
  400c70:	781a      	ldrb	r2, [r3, #0]
  400c72:	4618      	mov	r0, r3
  400c74:	b142      	cbz	r2, 400c88 <strchr+0xe0>
  400c76:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  400c7a:	2b00      	cmp	r3, #0
  400c7c:	d1fb      	bne.n	400c76 <strchr+0xce>
  400c7e:	4770      	bx	lr
  400c80:	4603      	mov	r3, r0
  400c82:	e7e4      	b.n	400c4e <strchr+0xa6>
  400c84:	4604      	mov	r4, r0
  400c86:	e7a4      	b.n	400bd2 <strchr+0x2a>
  400c88:	4618      	mov	r0, r3
  400c8a:	4770      	bx	lr
  400c8c:	4618      	mov	r0, r3
  400c8e:	e7ce      	b.n	400c2e <strchr+0x86>

00400c90 <__register_exitproc>:
  400c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400c94:	4d2c      	ldr	r5, [pc, #176]	; (400d48 <__register_exitproc+0xb8>)
  400c96:	4606      	mov	r6, r0
  400c98:	6828      	ldr	r0, [r5, #0]
  400c9a:	4698      	mov	r8, r3
  400c9c:	460f      	mov	r7, r1
  400c9e:	4691      	mov	r9, r2
  400ca0:	f7ff ff08 	bl	400ab4 <__retarget_lock_acquire_recursive>
  400ca4:	4b29      	ldr	r3, [pc, #164]	; (400d4c <__register_exitproc+0xbc>)
  400ca6:	681c      	ldr	r4, [r3, #0]
  400ca8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400cac:	2b00      	cmp	r3, #0
  400cae:	d03e      	beq.n	400d2e <__register_exitproc+0x9e>
  400cb0:	685a      	ldr	r2, [r3, #4]
  400cb2:	2a1f      	cmp	r2, #31
  400cb4:	dc1c      	bgt.n	400cf0 <__register_exitproc+0x60>
  400cb6:	f102 0e01 	add.w	lr, r2, #1
  400cba:	b176      	cbz	r6, 400cda <__register_exitproc+0x4a>
  400cbc:	2101      	movs	r1, #1
  400cbe:	eb03 0482 	add.w	r4, r3, r2, lsl #2
  400cc2:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
  400cc6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400cca:	4091      	lsls	r1, r2
  400ccc:	4308      	orrs	r0, r1
  400cce:	2e02      	cmp	r6, #2
  400cd0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400cd4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
  400cd8:	d023      	beq.n	400d22 <__register_exitproc+0x92>
  400cda:	3202      	adds	r2, #2
  400cdc:	f8c3 e004 	str.w	lr, [r3, #4]
  400ce0:	6828      	ldr	r0, [r5, #0]
  400ce2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400ce6:	f7ff fee7 	bl	400ab8 <__retarget_lock_release_recursive>
  400cea:	2000      	movs	r0, #0
  400cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400cf0:	4b17      	ldr	r3, [pc, #92]	; (400d50 <__register_exitproc+0xc0>)
  400cf2:	b30b      	cbz	r3, 400d38 <__register_exitproc+0xa8>
  400cf4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400cf8:	f3af 8000 	nop.w
  400cfc:	4603      	mov	r3, r0
  400cfe:	b1d8      	cbz	r0, 400d38 <__register_exitproc+0xa8>
  400d00:	2000      	movs	r0, #0
  400d02:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  400d06:	f04f 0e01 	mov.w	lr, #1
  400d0a:	6058      	str	r0, [r3, #4]
  400d0c:	6019      	str	r1, [r3, #0]
  400d0e:	4602      	mov	r2, r0
  400d10:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400d14:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400d18:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
  400d1c:	2e00      	cmp	r6, #0
  400d1e:	d0dc      	beq.n	400cda <__register_exitproc+0x4a>
  400d20:	e7cc      	b.n	400cbc <__register_exitproc+0x2c>
  400d22:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
  400d26:	4301      	orrs	r1, r0
  400d28:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
  400d2c:	e7d5      	b.n	400cda <__register_exitproc+0x4a>
  400d2e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  400d32:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400d36:	e7bb      	b.n	400cb0 <__register_exitproc+0x20>
  400d38:	6828      	ldr	r0, [r5, #0]
  400d3a:	f7ff febd 	bl	400ab8 <__retarget_lock_release_recursive>
  400d3e:	f04f 30ff 	mov.w	r0, #4294967295
  400d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400d46:	bf00      	nop
  400d48:	20000430 	.word	0x20000430
  400d4c:	00400fb0 	.word	0x00400fb0
  400d50:	00000000 	.word	0x00000000
  400d54:	20202020 	.word	0x20202020
  400d58:	20202020 	.word	0x20202020
  400d5c:	20202020 	.word	0x20202020
  400d60:	20202020 	.word	0x20202020
  400d64:	00002020 	.word	0x00002020

00400d68 <webpageEndChars>:
  400d68:	0000010c                                ....

00400d6c <webpageStartChars>:
  400d6c:	000000ff 3a514552 00000000 5145522f     ....REQ:..../REQ
  400d7c:	00000000 00000020 6f64656c 0000006e     .... ...ledon...
  400d8c:	6f64656c 00006666 333a3231 36353a34     ledoff..12:34:56
  400d9c:	00000000 2020200a 20202020 3e703c20     .....        <p>
  400dac:	2044454c 746e6f43 3a6c6f72 3e702f3c     LED Control:</p>
  400dbc:	2020200a 20202020 6f663c20 61206d72     .        <form a
  400dcc:	6f697463 6c223d6e 6e6f6465 200a3e22     ction="ledon">. 
  400ddc:	20202020 20202020 3c202020 75706e69                <inpu
  400dec:	79742074 223d6570 6d627573 20227469     t type="submit" 
  400dfc:	756c6176 54223d65 206e7275 20656874     value="Turn the 
  400e0c:	2044454c 22216e6f 0a3e2f20 20202020     LED on!" />.    
  400e1c:	20202020 6f662f3c 0a3e6d72 20202020         </form>.    
  400e2c:	20202020 726f663c 6361206d 6e6f6974         <form action
  400e3c:	656c223d 66666f64 200a3e22 20202020     ="ledoff">.     
  400e4c:	20202020 20202020 3c202020 75706e69                <inpu
  400e5c:	79742074 223d6570 6d627573 20227469     t type="submit" 
  400e6c:	756c6176 54223d65 206e7275 20656874     value="Turn the 
  400e7c:	2044454c 2166666f 3e2f2022 2020200a     LED off!" />.   
  400e8c:	20202020 662f3c20 3e6d726f 2020200a          </form>.   
  400e9c:	622f3c20 3e79646f 682f3c0a 3e6c6d74      </body>.</html>
  400eac:	00000000 4f44213c 50595443 74682045     ....<!DOCTYPE ht
  400ebc:	3c3e6c6d 6c6d7468 20200a3e 683c2020     ml><html>.    <h
  400ecc:	3e646165 2020200a 20202020 69743c20     ead>.        <ti
  400edc:	3e656c74 35353145 62655720 72655320     tle>E155 Web Ser
  400eec:	20726576 6f6d6544 62655720 65676170     ver Demo Webpage
  400efc:	69742f3c 3e656c74 2020200a 20202020     </title>.       
  400f0c:	656d3c20 68206174 2d707474 69757165      <meta http-equi
  400f1c:	72223d76 65726665 20226873 746e6f63     v="refresh" cont
  400f2c:	3d746e65 3e223522 2020200a 682f3c20     ent="5">.    </h
  400f3c:	3e646165 2020200a 6f623c20 0a3e7964     ead>.    <body>.
  400f4c:	20202020 20202020 3e31683c 35353145             <h1>E155
  400f5c:	62655720 72655320 20726576 6f6d6544      Web Server Demo
  400f6c:	62655720 65676170 31682f3c 20200a3e      Webpage</h1>.  
  400f7c:	20202020 703c2020 7275433e 746e6572           <p>Current
  400f8c:	63694d20 6f636f72 6f72746e 72656c6c      Microcontroller
  400f9c:	6d695420 2f3c3a65 200a3e70 20202020      Time:</p>.     
  400fac:	00202020                                   .

00400fb0 <_global_impure_ptr>:
  400fb0:	20000008                                ... 

00400fb4 <_init>:
  400fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400fb6:	bf00      	nop
  400fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400fba:	bc08      	pop	{r3}
  400fbc:	469e      	mov	lr, r3
  400fbe:	4770      	bx	lr

00400fc0 <__init_array_start>:
  400fc0:	00400a61 	.word	0x00400a61

00400fc4 <__frame_dummy_init_array_entry>:
  400fc4:	004000f1                                ..@.

00400fc8 <_fini>:
  400fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400fca:	bf00      	nop
  400fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400fce:	bc08      	pop	{r3}
  400fd0:	469e      	mov	lr, r3
  400fd2:	4770      	bx	lr

00400fd4 <__fini_array_start>:
  400fd4:	004000cd 	.word	0x004000cd
