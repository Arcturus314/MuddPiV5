
sam_backend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002550  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00402550  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000060  20000440  00402990  0002043c  2**3
                  ALLOC
  3 .stack        00000400  200004a0  004029f0  0002043c  2**0
                  ALLOC
  4 .heap         00000200  200008a0  00402df0  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020465  2**0
                  CONTENTS, READONLY
  7 .debug_info   00004d10  00000000  00000000  000204be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006c2  00000000  00000000  000251ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000017e7  00000000  00000000  00025890  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000200  00000000  00000000  00027077  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  00027277  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000c6de  00000000  00000000  0002746f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001085  00000000  00000000  00033b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0003cfb4  00000000  00000000  00034bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000b84  00000000  00000000  00071b88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	a0 08 00 20 3d 01 40 00 39 01 40 00 39 01 40 00     ... =.@.9.@.9.@.
  400010:	39 01 40 00 39 01 40 00 39 01 40 00 00 00 00 00     9.@.9.@.9.@.....
	...
  40002c:	39 01 40 00 39 01 40 00 00 00 00 00 39 01 40 00     9.@.9.@.....9.@.
  40003c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40004c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40005c:	00 00 00 00 39 01 40 00 39 01 40 00 00 00 00 00     ....9.@.9.@.....
  40006c:	39 01 40 00 39 01 40 00 00 00 00 00 39 01 40 00     9.@.9.@.....9.@.
  40007c:	39 01 40 00 00 00 00 00 00 00 00 00 39 01 40 00     9.@.........9.@.
  40008c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40009c:	39 01 40 00 39 01 40 00 39 01 40 00 00 00 00 00     9.@.9.@.9.@.....
	...
  4000b4:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  4000c4:	39 01 40 00 39 01 40 00                             9.@.9.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000440 	.word	0x20000440
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402550 	.word	0x00402550

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	b510      	push	{r4, lr}
  4000f8:	490c      	ldr	r1, [pc, #48]	; (40012c <frame_dummy+0x3c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00402550 	.word	0x00402550
  40012c:	20000444 	.word	0x20000444
  400130:	00402550 	.word	0x00402550
  400134:	00000000 	.word	0x00000000

00400138 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400138:	e7fe      	b.n	400138 <Dummy_Handler>
	...

0040013c <Reset_Handler>:
{
  40013c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  40013e:	4b18      	ldr	r3, [pc, #96]	; (4001a0 <Reset_Handler+0x64>)
  400140:	4a18      	ldr	r2, [pc, #96]	; (4001a4 <Reset_Handler+0x68>)
  400142:	429a      	cmp	r2, r3
  400144:	d010      	beq.n	400168 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  400146:	4b18      	ldr	r3, [pc, #96]	; (4001a8 <Reset_Handler+0x6c>)
  400148:	4a15      	ldr	r2, [pc, #84]	; (4001a0 <Reset_Handler+0x64>)
  40014a:	429a      	cmp	r2, r3
  40014c:	d20c      	bcs.n	400168 <Reset_Handler+0x2c>
  40014e:	3b01      	subs	r3, #1
  400150:	1a9b      	subs	r3, r3, r2
  400152:	f023 0303 	bic.w	r3, r3, #3
  400156:	3304      	adds	r3, #4
  400158:	4413      	add	r3, r2
  40015a:	4912      	ldr	r1, [pc, #72]	; (4001a4 <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
  40015c:	f851 0b04 	ldr.w	r0, [r1], #4
  400160:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400164:	429a      	cmp	r2, r3
  400166:	d1f9      	bne.n	40015c <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  400168:	4b10      	ldr	r3, [pc, #64]	; (4001ac <Reset_Handler+0x70>)
  40016a:	4a11      	ldr	r2, [pc, #68]	; (4001b0 <Reset_Handler+0x74>)
  40016c:	429a      	cmp	r2, r3
  40016e:	d20a      	bcs.n	400186 <Reset_Handler+0x4a>
  400170:	3b01      	subs	r3, #1
  400172:	1a9b      	subs	r3, r3, r2
  400174:	f023 0303 	bic.w	r3, r3, #3
  400178:	3304      	adds	r3, #4
  40017a:	4413      	add	r3, r2
                *pDest++ = 0;
  40017c:	2100      	movs	r1, #0
  40017e:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400182:	4293      	cmp	r3, r2
  400184:	d1fb      	bne.n	40017e <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400186:	4b0b      	ldr	r3, [pc, #44]	; (4001b4 <Reset_Handler+0x78>)
  400188:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
  40018c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400190:	4a09      	ldr	r2, [pc, #36]	; (4001b8 <Reset_Handler+0x7c>)
  400192:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400194:	4b09      	ldr	r3, [pc, #36]	; (4001bc <Reset_Handler+0x80>)
  400196:	4798      	blx	r3
        main();
  400198:	4b09      	ldr	r3, [pc, #36]	; (4001c0 <Reset_Handler+0x84>)
  40019a:	4798      	blx	r3
  40019c:	e7fe      	b.n	40019c <Reset_Handler+0x60>
  40019e:	bf00      	nop
  4001a0:	20000000 	.word	0x20000000
  4001a4:	00402550 	.word	0x00402550
  4001a8:	2000043c 	.word	0x2000043c
  4001ac:	200004a0 	.word	0x200004a0
  4001b0:	20000440 	.word	0x20000440
  4001b4:	00400000 	.word	0x00400000
  4001b8:	e000ed00 	.word	0xe000ed00
  4001bc:	00401a89 	.word	0x00401a89
  4001c0:	004009b9 	.word	0x004009b9

004001c4 <pioInit>:
////////////////////////////////////////////////////////////////////////////////////////////////////

/* Routes Master Clock to the desired peripheral, thereby enabling it.
 *    -- periphID: a PMC peripheral ID to enable, e.g. PMC_ID_PIOA */
void pmcEnablePeriph(int periphID) {
    PMC->PMC_PCER0 = 1 << periphID;
  4001c4:	4b03      	ldr	r3, [pc, #12]	; (4001d4 <pioInit+0x10>)
  4001c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4001ca:	611a      	str	r2, [r3, #16]
  4001cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4001d0:	611a      	str	r2, [r3, #16]
  4001d2:	4770      	bx	lr
  4001d4:	400e0400 	.word	0x400e0400

004001d8 <pioPinMode>:
 *    -- pin: a PIO pin ID, e.g. PIO_PA3
 *    -- function: a PIO function ID, e.g. PIO_PERIPH_C. I/O functions (PIO_INPUT, PIO_OUTPUT)
 *       and peripherals (PIO_PERIPH_A - PIO_PERIPH_D) are mutually exclusive.
 * Note: Upon reset, pins are configured as input I/O lines (as opposed to peripheral functions),
 * and the peripheral defaults to PIO_PERIPH_A. */
void pioPinMode(int pin, int function) {
  4001d8:	b410      	push	{r4}
    return pin >> 5;
  4001da:	1144      	asrs	r4, r0, #5
    return port ? PIOB : PIOA;
  4001dc:	4a2e      	ldr	r2, [pc, #184]	; (400298 <pioPinMode+0xc0>)
  4001de:	4b2f      	ldr	r3, [pc, #188]	; (40029c <pioPinMode+0xc4>)
  4001e0:	2c00      	cmp	r4, #0
  4001e2:	bf08      	it	eq
  4001e4:	4613      	moveq	r3, r2
    Pio* port = pioPinToBase(pin);
    int offset = pin % 32;
  4001e6:	4242      	negs	r2, r0
  4001e8:	f000 001f 	and.w	r0, r0, #31
  4001ec:	f002 021f 	and.w	r2, r2, #31
  4001f0:	bf58      	it	pl
  4001f2:	4250      	negpl	r0, r2

    switch (function) {
  4001f4:	2905      	cmp	r1, #5
  4001f6:	d815      	bhi.n	400224 <pioPinMode+0x4c>
  4001f8:	e8df f001 	tbb	[pc, r1]
  4001fc:	24160b03 	.word	0x24160b03
  400200:	4032      	.short	0x4032
        case PIO_INPUT:
            port->PIO_PER     |=  (1 << offset); // Sets a pin to be PIO-controlled
  400202:	6819      	ldr	r1, [r3, #0]
  400204:	2201      	movs	r2, #1
  400206:	4082      	lsls	r2, r0
  400208:	4311      	orrs	r1, r2
  40020a:	6019      	str	r1, [r3, #0]
            port->PIO_ODR     |=  (1 << offset); // Configures an I/O line as an input
  40020c:	6959      	ldr	r1, [r3, #20]
  40020e:	430a      	orrs	r2, r1
  400210:	615a      	str	r2, [r3, #20]
        case PIO_OUTPUT:
            port->PIO_PER     |=  (1 << offset); // Sets a pin to be PIO-controlled
  400212:	6819      	ldr	r1, [r3, #0]
  400214:	2201      	movs	r2, #1
  400216:	fa02 f000 	lsl.w	r0, r2, r0
  40021a:	4301      	orrs	r1, r0
  40021c:	6019      	str	r1, [r3, #0]
            port->PIO_OER     |=  (1 << offset); // Configures an I/O line as an output
  40021e:	691a      	ldr	r2, [r3, #16]
  400220:	4310      	orrs	r0, r2
  400222:	6118      	str	r0, [r3, #16]
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
            port->PIO_ABCDSR1 |=  (1 << offset); // Sets the peripheral which controls a pin
            port->PIO_ABCDSR2 |=  (1 << offset); // Sets the peripheral which controls a pin
            break;
    }
}
  400224:	bc10      	pop	{r4}
  400226:	4770      	bx	lr
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
  400228:	6859      	ldr	r1, [r3, #4]
  40022a:	2201      	movs	r2, #1
  40022c:	fa02 f000 	lsl.w	r0, r2, r0
  400230:	4301      	orrs	r1, r0
  400232:	6059      	str	r1, [r3, #4]
            port->PIO_ABCDSR1 &= ~(1 << offset); // Sets the peripheral which controls a pin
  400234:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400236:	43c0      	mvns	r0, r0
  400238:	4002      	ands	r2, r0
  40023a:	671a      	str	r2, [r3, #112]	; 0x70
            port->PIO_ABCDSR2 &= ~(1 << offset); // Sets the peripheral which controls a pin
  40023c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40023e:	4010      	ands	r0, r2
  400240:	6758      	str	r0, [r3, #116]	; 0x74
            break;
  400242:	e7ef      	b.n	400224 <pioPinMode+0x4c>
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
  400244:	6859      	ldr	r1, [r3, #4]
  400246:	2201      	movs	r2, #1
  400248:	fa02 f000 	lsl.w	r0, r2, r0
  40024c:	4301      	orrs	r1, r0
  40024e:	6059      	str	r1, [r3, #4]
            port->PIO_ABCDSR1 |=  (1 << offset); // Sets the peripheral which controls a pin
  400250:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400252:	4302      	orrs	r2, r0
  400254:	671a      	str	r2, [r3, #112]	; 0x70
            port->PIO_ABCDSR2 &= ~(1 << offset); // Sets the peripheral which controls a pin
  400256:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400258:	ea22 0000 	bic.w	r0, r2, r0
  40025c:	6758      	str	r0, [r3, #116]	; 0x74
            break;
  40025e:	e7e1      	b.n	400224 <pioPinMode+0x4c>
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
  400260:	6859      	ldr	r1, [r3, #4]
  400262:	2201      	movs	r2, #1
  400264:	fa02 f000 	lsl.w	r0, r2, r0
  400268:	4301      	orrs	r1, r0
  40026a:	6059      	str	r1, [r3, #4]
            port->PIO_ABCDSR1 &= ~(1 << offset); // Sets the peripheral which controls a pin
  40026c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40026e:	ea22 0200 	bic.w	r2, r2, r0
  400272:	671a      	str	r2, [r3, #112]	; 0x70
            port->PIO_ABCDSR2 |=  (1 << offset); // Sets the peripheral which controls a pin
  400274:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400276:	4310      	orrs	r0, r2
  400278:	6758      	str	r0, [r3, #116]	; 0x74
            break;
  40027a:	e7d3      	b.n	400224 <pioPinMode+0x4c>
            port->PIO_PDR     |=  (1 << offset); // Sets a pin to be peripheral-controlled
  40027c:	6859      	ldr	r1, [r3, #4]
  40027e:	2201      	movs	r2, #1
  400280:	fa02 f000 	lsl.w	r0, r2, r0
  400284:	4301      	orrs	r1, r0
  400286:	6059      	str	r1, [r3, #4]
            port->PIO_ABCDSR1 |=  (1 << offset); // Sets the peripheral which controls a pin
  400288:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40028a:	4302      	orrs	r2, r0
  40028c:	671a      	str	r2, [r3, #112]	; 0x70
            port->PIO_ABCDSR2 |=  (1 << offset); // Sets the peripheral which controls a pin
  40028e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400290:	4310      	orrs	r0, r2
  400292:	6758      	str	r0, [r3, #116]	; 0x74
}
  400294:	e7c6      	b.n	400224 <pioPinMode+0x4c>
  400296:	bf00      	nop
  400298:	400e0e00 	.word	0x400e0e00
  40029c:	400e1000 	.word	0x400e1000

004002a0 <pioDigitalWrite>:
}

/* Writes a digital voltage to a pin configured as an output I/O line.
 *    -- pin: a PIO pin ID, e.g. PIO_PA3
 *    -- val: a PIO value ID, either PIO_HIGH or PIO_LOW */
void pioDigitalWrite(int pin, int val) {
  4002a0:	b410      	push	{r4}
    return pin >> 5;
  4002a2:	1144      	asrs	r4, r0, #5
    return port ? PIOB : PIOA;
  4002a4:	4a0d      	ldr	r2, [pc, #52]	; (4002dc <pioDigitalWrite+0x3c>)
  4002a6:	4b0e      	ldr	r3, [pc, #56]	; (4002e0 <pioDigitalWrite+0x40>)
  4002a8:	2c00      	cmp	r4, #0
  4002aa:	bf08      	it	eq
  4002ac:	4613      	moveq	r3, r2
    Pio* port = pioPinToBase(pin);
    int offset = pin % 32;
  4002ae:	4242      	negs	r2, r0
  4002b0:	f000 001f 	and.w	r0, r0, #31
  4002b4:	f002 021f 	and.w	r2, r2, #31
  4002b8:	bf58      	it	pl
  4002ba:	4250      	negpl	r0, r2
    if (val) port->PIO_SODR |= (1 << offset);
  4002bc:	b939      	cbnz	r1, 4002ce <pioDigitalWrite+0x2e>
    else     port->PIO_CODR |= (1 << offset);
  4002be:	6b59      	ldr	r1, [r3, #52]	; 0x34
  4002c0:	2201      	movs	r2, #1
  4002c2:	fa02 f000 	lsl.w	r0, r2, r0
  4002c6:	4308      	orrs	r0, r1
  4002c8:	6358      	str	r0, [r3, #52]	; 0x34
}
  4002ca:	bc10      	pop	{r4}
  4002cc:	4770      	bx	lr
    if (val) port->PIO_SODR |= (1 << offset);
  4002ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4002d0:	2201      	movs	r2, #1
  4002d2:	fa02 f000 	lsl.w	r0, r2, r0
  4002d6:	4308      	orrs	r0, r1
  4002d8:	6318      	str	r0, [r3, #48]	; 0x30
  4002da:	e7f6      	b.n	4002ca <pioDigitalWrite+0x2a>
  4002dc:	400e0e00 	.word	0x400e0e00
  4002e0:	400e1000 	.word	0x400e1000

004002e4 <tcInit>:
  4002e4:	4b03      	ldr	r3, [pc, #12]	; (4002f4 <tcInit+0x10>)
  4002e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4002ea:	611a      	str	r2, [r3, #16]
  4002ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4002f0:	611a      	str	r2, [r3, #16]
  4002f2:	4770      	bx	lr
  4002f4:	400e0400 	.word	0x400e0400

004002f8 <tcChannelInit>:

/* Enables a TC channel and configures it with the desired clock and mode.
 *    -- channelID: a TC channel ID, e.g. TC_CH3_ID
 *    -- clock: a TC clock ID, e.g. TC_CLK3_ID
 *    -- mode: a TC mode ID, e.g. TC_MODE_UP_RC */
void tcChannelInit(int channelID, uint32_t clock, uint32_t mode) {
  4002f8:	b430      	push	{r4, r5}
    return channelID / 3;
  4002fa:	4c13      	ldr	r4, [pc, #76]	; (400348 <tcChannelInit+0x50>)
  4002fc:	fb84 3400 	smull	r3, r4, r4, r0
  400300:	eba4 73e0 	sub.w	r3, r4, r0, asr #31
    return (block ? TC1 : TC0);
  400304:	4d11      	ldr	r5, [pc, #68]	; (40034c <tcChannelInit+0x54>)
  400306:	4c12      	ldr	r4, [pc, #72]	; (400350 <tcChannelInit+0x58>)
  400308:	2b00      	cmp	r3, #0
  40030a:	bf08      	it	eq
  40030c:	462c      	moveq	r4, r5
    Tc* block = tcChannelToBlockBase(channelID);
    int chInd = channelID % TC_CH_NUMBER;
  40030e:	4b0e      	ldr	r3, [pc, #56]	; (400348 <tcChannelInit+0x50>)
  400310:	fb83 5300 	smull	r5, r3, r3, r0
  400314:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  400318:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40031c:	1ac3      	subs	r3, r0, r3
    block->TC_CH[chInd].TC_CCR.CLKEN   = 1;     // Enable clock
  40031e:	019b      	lsls	r3, r3, #6
  400320:	18e0      	adds	r0, r4, r3
  400322:	58e5      	ldr	r5, [r4, r3]
  400324:	f045 0501 	orr.w	r5, r5, #1
  400328:	50e5      	str	r5, [r4, r3]
    block->TC_CH[chInd].TC_CMR.TCCLKS  = clock; // Set clock to desired clock
  40032a:	6843      	ldr	r3, [r0, #4]
  40032c:	f361 0302 	bfi	r3, r1, #0, #3
  400330:	6043      	str	r3, [r0, #4]
    block->TC_CH[chInd].TC_CMR.WAVE    = 1;     // Waveform mode
  400332:	6843      	ldr	r3, [r0, #4]
  400334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400338:	6043      	str	r3, [r0, #4]
    block->TC_CH[chInd].TC_CMR.WAVESEL = mode;  // Set counting mode to desired mode
  40033a:	6843      	ldr	r3, [r0, #4]
  40033c:	f362 334e 	bfi	r3, r2, #13, #2
  400340:	6043      	str	r3, [r0, #4]
}
  400342:	bc30      	pop	{r4, r5}
  400344:	4770      	bx	lr
  400346:	bf00      	nop
  400348:	55555556 	.word	0x55555556
  40034c:	40010000 	.word	0x40010000
  400350:	40014000 	.word	0x40014000

00400354 <tcDelayInit>:
// TC User Functions - Delay Unit (Higher Level)
////////////////////////////////////////////////////////////////////////////////////////////////////

/* Configures TC Channel 0 to perform delays using the fastest clock and RC compares. Does not
 * require the user to call any lower-level functions such as tcInit(). */
void tcDelayInit() {
  400354:	b508      	push	{r3, lr}
    tcInit();
  400356:	4b04      	ldr	r3, [pc, #16]	; (400368 <tcDelayInit+0x14>)
  400358:	4798      	blx	r3
    tcChannelInit(TC_CH0_ID, TC_CLK1_ID, TC_MODE_UP_RC);
  40035a:	2202      	movs	r2, #2
  40035c:	2100      	movs	r1, #0
  40035e:	4608      	mov	r0, r1
  400360:	4b02      	ldr	r3, [pc, #8]	; (40036c <tcDelayInit+0x18>)
  400362:	4798      	blx	r3
  400364:	bd08      	pop	{r3, pc}
  400366:	bf00      	nop
  400368:	004002e5 	.word	0x004002e5
  40036c:	004002f9 	.word	0x004002f9

00400370 <spiInit>:
 *    -- Mode fault detection enabled
 *    -- WDRBT disabled
 *    -- LLB disabled
 *    -- PCS = 0000 (Peripheral 0 selected), means NPCS[3:0] = 1110
 * Refer to the datasheet for more low-level details. */ 
void spiInit(uint32_t clkdivide, uint32_t cpol, uint32_t ncpha) {
  400370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400372:	4605      	mov	r5, r0
  400374:	460f      	mov	r7, r1
  400376:	4616      	mov	r6, r2
  400378:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40037c:	4b13      	ldr	r3, [pc, #76]	; (4003cc <spiInit+0x5c>)
  40037e:	611a      	str	r2, [r3, #16]
    pmcEnablePeriph(PMC_ID_SPI);
    pioInit();
  400380:	4b13      	ldr	r3, [pc, #76]	; (4003d0 <spiInit+0x60>)
  400382:	4798      	blx	r3

    // Initially assigning SPI pins (PA11-PA14) to peripheral A (SPI)
    pioPinMode(PIO_PA11, PIO_PERIPH_A);
  400384:	2102      	movs	r1, #2
  400386:	200b      	movs	r0, #11
  400388:	4c12      	ldr	r4, [pc, #72]	; (4003d4 <spiInit+0x64>)
  40038a:	47a0      	blx	r4
    pioPinMode(PIO_PA12, PIO_PERIPH_A);
  40038c:	2102      	movs	r1, #2
  40038e:	200c      	movs	r0, #12
  400390:	47a0      	blx	r4
    pioPinMode(PIO_PA13, PIO_PERIPH_A);
  400392:	2102      	movs	r1, #2
  400394:	200d      	movs	r0, #13
  400396:	47a0      	blx	r4
    pioPinMode(PIO_PA14, PIO_PERIPH_A);
  400398:	2102      	movs	r1, #2
  40039a:	200e      	movs	r0, #14
  40039c:	47a0      	blx	r4

    SPI->SPI_CR.SPIEN = 1; // Enable SPI
  40039e:	4b0e      	ldr	r3, [pc, #56]	; (4003d8 <spiInit+0x68>)
  4003a0:	681a      	ldr	r2, [r3, #0]
  4003a2:	f042 0201 	orr.w	r2, r2, #1
  4003a6:	601a      	str	r2, [r3, #0]
    SPI->SPI_MR.MSTR = 1; // Put SPI in master mode
  4003a8:	685a      	ldr	r2, [r3, #4]
  4003aa:	f042 0201 	orr.w	r2, r2, #1
  4003ae:	605a      	str	r2, [r3, #4]
    SPI->SPI_CSR0.SCBR = clkdivide; // Set the clock divisor
  4003b0:	b2ed      	uxtb	r5, r5
  4003b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4003b4:	f365 220f 	bfi	r2, r5, #8, #8
  4003b8:	631a      	str	r2, [r3, #48]	; 0x30
    SPI->SPI_CSR0.CPOL = cpol; // Set the polarity
  4003ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4003bc:	f367 0200 	bfi	r2, r7, #0, #1
  4003c0:	631a      	str	r2, [r3, #48]	; 0x30
    SPI->SPI_CSR0.NCPHA = ncpha; // Set the phase
  4003c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4003c4:	f366 0241 	bfi	r2, r6, #1, #1
  4003c8:	631a      	str	r2, [r3, #48]	; 0x30
  4003ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4003cc:	400e0400 	.word	0x400e0400
  4003d0:	004001c5 	.word	0x004001c5
  4003d4:	004001d9 	.word	0x004001d9
  4003d8:	40008000 	.word	0x40008000

004003dc <spiSendReceive>:

/* Transmits a character (1 byte) over SPI and returns the received character.
 *    -- send: the character to send over SPI
 *    -- return: the character received over SPI */
char spiSendReceive(char send) {
    SPI->SPI_TDR.TD = send; // Transmit the character over SPI
  4003dc:	4b06      	ldr	r3, [pc, #24]	; (4003f8 <spiSendReceive+0x1c>)
  4003de:	68da      	ldr	r2, [r3, #12]
  4003e0:	f360 020f 	bfi	r2, r0, #0, #16
  4003e4:	60da      	str	r2, [r3, #12]
    while (!(SPI->SPI_SR.RDRF)); // Wait until data has been received
  4003e6:	461a      	mov	r2, r3
  4003e8:	6913      	ldr	r3, [r2, #16]
  4003ea:	f013 0f01 	tst.w	r3, #1
  4003ee:	d0fb      	beq.n	4003e8 <spiSendReceive+0xc>
    return (char) (SPI->SPI_RDR.RD); // Return received character
  4003f0:	4b01      	ldr	r3, [pc, #4]	; (4003f8 <spiSendReceive+0x1c>)
  4003f2:	6898      	ldr	r0, [r3, #8]
}
  4003f4:	b2c0      	uxtb	r0, r0
  4003f6:	4770      	bx	lr
  4003f8:	40008000 	.word	0x40008000

004003fc <spiSendReceive16>:

/* Transmits a short (2 bytes) over SPI and returns the received short.
 *    -- send: the short to send over SPI
 *    -- return: the short received over SPI */
short spiSendReceive16(uint16_t send) {
  4003fc:	b570      	push	{r4, r5, r6, lr}
  4003fe:	4606      	mov	r6, r0
    short rec; // Variable for received data, filled one byte at a time
    rec = spiSendReceive((send & 0xFF00) >> 8); // Send the MSB of the data first
  400400:	0a00      	lsrs	r0, r0, #8
  400402:	4d04      	ldr	r5, [pc, #16]	; (400414 <spiSendReceive16+0x18>)
  400404:	47a8      	blx	r5
  400406:	4604      	mov	r4, r0
    rec = (rec << 8) | spiSendReceive(send & 0xFF); // Send the LSB of the data
  400408:	b2f0      	uxtb	r0, r6
  40040a:	47a8      	blx	r5
  40040c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    return rec;
}
  400410:	b200      	sxth	r0, r0
  400412:	bd70      	pop	{r4, r5, r6, pc}
  400414:	004003dd 	.word	0x004003dd

00400418 <uartInit>:
 *    -- CD: a 16-bit unsigned integer which determines the baud rate as follows:
 *       Baud Rate = MCK_FREQ/(16*CD)
 * Note that pin PA9 is used as receive and pin PA10 is used as transmit. pioInit() must be called
 * first. */
// *** Discuss keeping CD as is instead of changing to baud rate
void uartInit(uint32_t parity, uint16_t CD) {
  400418:	b570      	push	{r4, r5, r6, lr}
  40041a:	4606      	mov	r6, r0
  40041c:	460d      	mov	r5, r1
  40041e:	f44f 7280 	mov.w	r2, #256	; 0x100
  400422:	4b0d      	ldr	r3, [pc, #52]	; (400458 <uartInit+0x40>)
  400424:	611a      	str	r2, [r3, #16]
    pmcEnablePeriph(PMC_ID_UART0);
    pioInit();
  400426:	4b0d      	ldr	r3, [pc, #52]	; (40045c <uartInit+0x44>)
  400428:	4798      	blx	r3

    pioPinMode(UART_URXD0_PIN, UART_FUNC); // Set URXD0 pin mode
  40042a:	2102      	movs	r1, #2
  40042c:	2009      	movs	r0, #9
  40042e:	4c0c      	ldr	r4, [pc, #48]	; (400460 <uartInit+0x48>)
  400430:	47a0      	blx	r4
    pioPinMode(UART_ITXD0_PIN, UART_FUNC); // Set ITXD0 pin mode
  400432:	2102      	movs	r1, #2
  400434:	200a      	movs	r0, #10
  400436:	47a0      	blx	r4

    UART->UART_CR.TXEN = 1; // Enable transmitter
  400438:	4b0a      	ldr	r3, [pc, #40]	; (400464 <uartInit+0x4c>)
  40043a:	681a      	ldr	r2, [r3, #0]
  40043c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  400440:	601a      	str	r2, [r3, #0]
    UART->UART_CR.RXEN = 1; // Enable receiver
  400442:	681a      	ldr	r2, [r3, #0]
  400444:	f042 0210 	orr.w	r2, r2, #16
  400448:	601a      	str	r2, [r3, #0]

    UART->UART_MR.PAR = parity; // Set parity
  40044a:	685a      	ldr	r2, [r3, #4]
  40044c:	f366 224b 	bfi	r2, r6, #9, #3
  400450:	605a      	str	r2, [r3, #4]
    UART->UART_BRGR   = CD; // Set baud rate divisor
  400452:	621d      	str	r5, [r3, #32]
  400454:	bd70      	pop	{r4, r5, r6, pc}
  400456:	bf00      	nop
  400458:	400e0400 	.word	0x400e0400
  40045c:	004001c5 	.word	0x004001c5
  400460:	004001d9 	.word	0x004001d9
  400464:	400e0600 	.word	0x400e0600

00400468 <uartTx>:
}

/* Transmits a character (1 byte) over UART.
 *    -- data: the character to send over UART */
void uartTx(char data) {
    while (!(UART->UART_SR.TXRDY)); // Wait until previous data has been transmitted
  400468:	4a03      	ldr	r2, [pc, #12]	; (400478 <uartTx+0x10>)
  40046a:	6953      	ldr	r3, [r2, #20]
  40046c:	f013 0f02 	tst.w	r3, #2
  400470:	d0fb      	beq.n	40046a <uartTx+0x2>
    UART->UART_THR = data; // Write data into holding register for transmit
  400472:	4b01      	ldr	r3, [pc, #4]	; (400478 <uartTx+0x10>)
  400474:	61d8      	str	r0, [r3, #28]
  400476:	4770      	bx	lr
  400478:	400e0600 	.word	0x400e0600

0040047c <uartRx>:
}

/* Checks if a character has been received over UART.
 *    -- return: true if a character has been received; false otherwise */
int uartRxReady() {
    return UART->UART_SR.RXRDY; // Check if data has been received
  40047c:	4b04      	ldr	r3, [pc, #16]	; (400490 <uartRx+0x14>)
  40047e:	695b      	ldr	r3, [r3, #20]
}

/* Receives a character (1 byte) over UART.
 *    -- return: the character received over UART */
char uartRx() {
    if (uartRxReady()) return (char) UART->UART_RHR; // Return received data in holding register
  400480:	f013 0f01 	tst.w	r3, #1
  400484:	bf1a      	itte	ne
  400486:	4b02      	ldrne	r3, [pc, #8]	; (400490 <uartRx+0x14>)
  400488:	6998      	ldrne	r0, [r3, #24]
  40048a:	2000      	moveq	r0, #0
    else               return (char) 0;
}
  40048c:	b2c0      	uxtb	r0, r0
  40048e:	4770      	bx	lr
  400490:	400e0600 	.word	0x400e0600

00400494 <adcInit>:

/* Enables the ADC peripheral and initializes its resolution
 *    -- resolution: an ADC resolution ID, e.g. ADC_MR_LOWRES_BITS_10
 * Note: the ADC clock defaults to MCK_FREQ / 2 = 2 MHz; 1 MHz to 20 MHz is possible with a 
 * faster clock. */
void adcInit(uint32_t resolution) {
  400494:	b510      	push	{r4, lr}
  400496:	4604      	mov	r4, r0
  400498:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40049c:	4b06      	ldr	r3, [pc, #24]	; (4004b8 <adcInit+0x24>)
  40049e:	611a      	str	r2, [r3, #16]
    pmcEnablePeriph(PMC_ID_ADC);
    pioInit();
  4004a0:	4b06      	ldr	r3, [pc, #24]	; (4004bc <adcInit+0x28>)
  4004a2:	4798      	blx	r3

    ADC->ADC_MR.LOWRES = resolution; // Set resolution
  4004a4:	4b06      	ldr	r3, [pc, #24]	; (4004c0 <adcInit+0x2c>)
  4004a6:	685a      	ldr	r2, [r3, #4]
  4004a8:	f364 1204 	bfi	r2, r4, #4, #1
  4004ac:	605a      	str	r2, [r3, #4]
    ADC->ADC_MR.ANACH = 1; // Allow channels to have independent settings
  4004ae:	685a      	ldr	r2, [r3, #4]
  4004b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  4004b4:	605a      	str	r2, [r3, #4]
  4004b6:	bd10      	pop	{r4, pc}
  4004b8:	400e0400 	.word	0x400e0400
  4004bc:	004001c5 	.word	0x004001c5
  4004c0:	40038000 	.word	0x40038000

004004c4 <adcChannelInit>:
/* Enables an ADC channel and initializes its gain and offset
 *    -- channel: an ADC channel ID, e.g. ADC_CH3
 *    -- gain: an ADC gain ID, e.g. ADC_CGR_GAIN_X2
 *    -- offset: an ADC offset ID, e.g. ADC_COR_OFFSET_ON. Set the offset to 1 to center the analog
 *       signal on (Gain - 1)*Vref/2 prior to gain */
void adcChannelInit(int channel, int gain, int offset) {
  4004c4:	b570      	push	{r4, r5, r6, lr}
  4004c6:	4605      	mov	r5, r0
  4004c8:	460c      	mov	r4, r1
  4004ca:	4616      	mov	r6, r2
    // Set the channel's PIO pin to perform its ADC function.
    switch (channel) {
  4004cc:	2809      	cmp	r0, #9
  4004ce:	d80a      	bhi.n	4004e6 <adcChannelInit+0x22>
  4004d0:	e8df f000 	tbb	[pc, r0]
  4004d4:	38332e05 	.word	0x38332e05
  4004d8:	4c47423d 	.word	0x4c47423d
  4004dc:	5651      	.short	0x5651
        case ADC_CH0: pioPinMode(ADC_CH0_PIN, ADC_FUNC); break;
  4004de:	2105      	movs	r1, #5
  4004e0:	2011      	movs	r0, #17
  4004e2:	4b2a      	ldr	r3, [pc, #168]	; (40058c <adcChannelInit+0xc8>)
  4004e4:	4798      	blx	r3
        case ADC_CH7: pioPinMode(ADC_CH7_PIN, ADC_FUNC); break;
        case ADC_CH8: pioPinMode(ADC_CH8_PIN, ADC_FUNC); break;
        case ADC_CH9: pioPinMode(ADC_CH9_PIN, ADC_FUNC); break;
        case ADC_CH15:                                   break;
    }
    ADC->ADC_CHER |= (1 << channel); // Enable the ADC channel
  4004e6:	4b2a      	ldr	r3, [pc, #168]	; (400590 <adcChannelInit+0xcc>)
  4004e8:	6919      	ldr	r1, [r3, #16]
  4004ea:	2201      	movs	r2, #1
  4004ec:	40aa      	lsls	r2, r5
  4004ee:	430a      	orrs	r2, r1
  4004f0:	611a      	str	r2, [r3, #16]

    // Set the gain
    ADC->ADC_CGR |= (gain << (2*channel));
  4004f2:	6c98      	ldr	r0, [r3, #72]	; 0x48
  4004f4:	0069      	lsls	r1, r5, #1
  4004f6:	fa04 f201 	lsl.w	r2, r4, r1
  4004fa:	4302      	orrs	r2, r0
  4004fc:	649a      	str	r2, [r3, #72]	; 0x48
    ADC->ADC_CGR &= ~((~gain & 0b11) << (2*channel));
  4004fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  400500:	43e4      	mvns	r4, r4
  400502:	f004 0403 	and.w	r4, r4, #3
  400506:	408c      	lsls	r4, r1
  400508:	ea22 0404 	bic.w	r4, r2, r4
  40050c:	649c      	str	r4, [r3, #72]	; 0x48

    // Set the offset
    ADC->ADC_COR |= (offset << channel);
  40050e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
  400510:	fa06 f205 	lsl.w	r2, r6, r5
  400514:	430a      	orrs	r2, r1
  400516:	64da      	str	r2, [r3, #76]	; 0x4c
    ADC->ADC_COR &= ~((~offset & 0b1) << channel);
  400518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  40051a:	f016 0f01 	tst.w	r6, #1
  40051e:	bf0c      	ite	eq
  400520:	2101      	moveq	r1, #1
  400522:	2100      	movne	r1, #0
  400524:	fa01 f505 	lsl.w	r5, r1, r5
  400528:	ea22 0505 	bic.w	r5, r2, r5
  40052c:	64dd      	str	r5, [r3, #76]	; 0x4c
  40052e:	bd70      	pop	{r4, r5, r6, pc}
        case ADC_CH1: pioPinMode(ADC_CH1_PIN, ADC_FUNC); break;
  400530:	2105      	movs	r1, #5
  400532:	2012      	movs	r0, #18
  400534:	4b15      	ldr	r3, [pc, #84]	; (40058c <adcChannelInit+0xc8>)
  400536:	4798      	blx	r3
  400538:	e7d5      	b.n	4004e6 <adcChannelInit+0x22>
        case ADC_CH2: pioPinMode(ADC_CH2_PIN, ADC_FUNC); break;
  40053a:	2105      	movs	r1, #5
  40053c:	2013      	movs	r0, #19
  40053e:	4b13      	ldr	r3, [pc, #76]	; (40058c <adcChannelInit+0xc8>)
  400540:	4798      	blx	r3
  400542:	e7d0      	b.n	4004e6 <adcChannelInit+0x22>
        case ADC_CH3: pioPinMode(ADC_CH3_PIN, ADC_FUNC); break;
  400544:	2105      	movs	r1, #5
  400546:	2014      	movs	r0, #20
  400548:	4b10      	ldr	r3, [pc, #64]	; (40058c <adcChannelInit+0xc8>)
  40054a:	4798      	blx	r3
  40054c:	e7cb      	b.n	4004e6 <adcChannelInit+0x22>
        case ADC_CH4: pioPinMode(ADC_CH4_PIN, ADC_FUNC); break;
  40054e:	2105      	movs	r1, #5
  400550:	2020      	movs	r0, #32
  400552:	4b0e      	ldr	r3, [pc, #56]	; (40058c <adcChannelInit+0xc8>)
  400554:	4798      	blx	r3
  400556:	e7c6      	b.n	4004e6 <adcChannelInit+0x22>
        case ADC_CH5: pioPinMode(ADC_CH5_PIN, ADC_FUNC); break;
  400558:	2105      	movs	r1, #5
  40055a:	2021      	movs	r0, #33	; 0x21
  40055c:	4b0b      	ldr	r3, [pc, #44]	; (40058c <adcChannelInit+0xc8>)
  40055e:	4798      	blx	r3
  400560:	e7c1      	b.n	4004e6 <adcChannelInit+0x22>
        case ADC_CH6: pioPinMode(ADC_CH6_PIN, ADC_FUNC); break;
  400562:	2105      	movs	r1, #5
  400564:	2022      	movs	r0, #34	; 0x22
  400566:	4b09      	ldr	r3, [pc, #36]	; (40058c <adcChannelInit+0xc8>)
  400568:	4798      	blx	r3
  40056a:	e7bc      	b.n	4004e6 <adcChannelInit+0x22>
        case ADC_CH7: pioPinMode(ADC_CH7_PIN, ADC_FUNC); break;
  40056c:	2105      	movs	r1, #5
  40056e:	2023      	movs	r0, #35	; 0x23
  400570:	4b06      	ldr	r3, [pc, #24]	; (40058c <adcChannelInit+0xc8>)
  400572:	4798      	blx	r3
  400574:	e7b7      	b.n	4004e6 <adcChannelInit+0x22>
        case ADC_CH8: pioPinMode(ADC_CH8_PIN, ADC_FUNC); break;
  400576:	2105      	movs	r1, #5
  400578:	2015      	movs	r0, #21
  40057a:	4b04      	ldr	r3, [pc, #16]	; (40058c <adcChannelInit+0xc8>)
  40057c:	4798      	blx	r3
  40057e:	e7b2      	b.n	4004e6 <adcChannelInit+0x22>
        case ADC_CH9: pioPinMode(ADC_CH9_PIN, ADC_FUNC); break;
  400580:	2105      	movs	r1, #5
  400582:	2016      	movs	r0, #22
  400584:	4b01      	ldr	r3, [pc, #4]	; (40058c <adcChannelInit+0xc8>)
  400586:	4798      	blx	r3
  400588:	e7ad      	b.n	4004e6 <adcChannelInit+0x22>
  40058a:	bf00      	nop
  40058c:	004001d9 	.word	0x004001d9
  400590:	40038000 	.word	0x40038000
  400594:	00000000 	.word	0x00000000

00400598 <adcRead>:
/* Reads the analog voltage reported by an ADC channel
 *    -- channel: an ADC channel ID, e.g. ADC_CH3
 *    -- return: the analog voltage represented by the ADC's report (in V)
 * Note: it is important to measure the voltage at the ADC's Vref pin and record it in 
 * SAM4S4B_sys.h for accurate results. */
float adcRead(int channel) {
  400598:	b570      	push	{r4, r5, r6, lr}
    ADC->ADC_CR.START = 1; // Start conversion
  40059a:	4a19      	ldr	r2, [pc, #100]	; (400600 <adcRead+0x68>)
  40059c:	6813      	ldr	r3, [r2, #0]
  40059e:	f043 0302 	orr.w	r3, r3, #2
  4005a2:	6013      	str	r3, [r2, #0]
  4005a4:	2201      	movs	r2, #1
  4005a6:	4082      	lsls	r2, r0
    while (!((ADC->ADC_ISR >> channel) & 1)); // Wait for conversion
  4005a8:	4915      	ldr	r1, [pc, #84]	; (400600 <adcRead+0x68>)
  4005aa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4005ac:	4213      	tst	r3, r2
  4005ae:	d0fc      	beq.n	4005aa <adcRead+0x12>
    int d = ADC->ADC_CDR[channel]; // Received digital value
  4005b0:	4b13      	ldr	r3, [pc, #76]	; (400600 <adcRead+0x68>)
  4005b2:	3014      	adds	r0, #20
  4005b4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    int dMax = (ADC->ADC_MR.LOWRES) ? ADC_DMAX_10 : ADC_DMAX_12; // Maximum possible value
  4005b8:	685b      	ldr	r3, [r3, #4]
  4005ba:	f3c3 1300 	ubfx	r3, r3, #4, #1
  4005be:	f640 72ff 	movw	r2, #4095	; 0xfff
  4005c2:	f240 34ff 	movw	r4, #1023	; 0x3ff
  4005c6:	2b00      	cmp	r3, #0
  4005c8:	bf08      	it	eq
  4005ca:	4614      	moveq	r4, r2
    return (((float) d) / dMax) * ADC_VREF;
  4005cc:	4d0d      	ldr	r5, [pc, #52]	; (400604 <adcRead+0x6c>)
  4005ce:	47a8      	blx	r5
  4005d0:	4606      	mov	r6, r0
  4005d2:	4620      	mov	r0, r4
  4005d4:	47a8      	blx	r5
  4005d6:	4601      	mov	r1, r0
  4005d8:	4630      	mov	r0, r6
  4005da:	4b0b      	ldr	r3, [pc, #44]	; (400608 <adcRead+0x70>)
  4005dc:	4798      	blx	r3
  4005de:	4b0b      	ldr	r3, [pc, #44]	; (40060c <adcRead+0x74>)
  4005e0:	4798      	blx	r3
  4005e2:	a305      	add	r3, pc, #20	; (adr r3, 4005f8 <adcRead+0x60>)
  4005e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4005e8:	4c09      	ldr	r4, [pc, #36]	; (400610 <adcRead+0x78>)
  4005ea:	47a0      	blx	r4
  4005ec:	4b09      	ldr	r3, [pc, #36]	; (400614 <adcRead+0x7c>)
  4005ee:	4798      	blx	r3
}
  4005f0:	bd70      	pop	{r4, r5, r6, pc}
  4005f2:	bf00      	nop
  4005f4:	f3af 8000 	nop.w
  4005f8:	66666666 	.word	0x66666666
  4005fc:	400a6666 	.word	0x400a6666
  400600:	40038000 	.word	0x40038000
  400604:	00401741 	.word	0x00401741
  400608:	00401951 	.word	0x00401951
  40060c:	00400f01 	.word	0x00400f01
  400610:	00400fa9 	.word	0x00400fa9
  400614:	0040152d 	.word	0x0040152d

00400618 <sendString>:
//Please see the e155 website for a human-readable version of the file "webpage.html"
const char* webpageStart = "<!DOCTYPE html><html><head><title>E155 Web Server Demo Webpage</title><meta http-equiv=\"refresh\" content=\"5\"></head><body><h1>E155 Web Server Demo Webpage</h1>";
const char* ledStr = "<p>LED Control:</p><form action=\"ledon\"><input type=\"submit\" value=\"Turn the LED on!\" /></form> <form action=\"ledoff\"><input type=\"submit\" value=\"Turn the LED off!\" /></form>";
const char* webpageEnd   = "</body></html>";

void sendString(char* str) {
  400618:	b538      	push	{r3, r4, r5, lr}
  40061a:	4604      	mov	r4, r0
	char* ptr = str;
	while (*ptr) uartTx(*ptr++);
  40061c:	7800      	ldrb	r0, [r0, #0]
  40061e:	b128      	cbz	r0, 40062c <sendString+0x14>
  400620:	4d03      	ldr	r5, [pc, #12]	; (400630 <sendString+0x18>)
  400622:	47a8      	blx	r5
  400624:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  400628:	2800      	cmp	r0, #0
  40062a:	d1fa      	bne.n	400622 <sendString+0xa>
  40062c:	bd38      	pop	{r3, r4, r5, pc}
  40062e:	bf00      	nop
  400630:	00400469 	.word	0x00400469

00400634 <inString>:
}

//determines whether a given character sequence is in a char array request, returning 1 if present, -1 if not present
int inString(char request[], char des[]) {
  400634:	b508      	push	{r3, lr}
	if (strstr(request, des) != NULL) {return 1;}
  400636:	4b04      	ldr	r3, [pc, #16]	; (400648 <inString+0x14>)
  400638:	4798      	blx	r3
  40063a:	2800      	cmp	r0, #0
	return -1;
}
  40063c:	bf14      	ite	ne
  40063e:	2001      	movne	r0, #1
  400640:	f04f 30ff 	moveq.w	r0, #4294967295
  400644:	bd08      	pop	{r3, pc}
  400646:	bf00      	nop
  400648:	00401dbd 	.word	0x00401dbd

0040064c <requestInString>:

//determines if tags "REQ:" and "/REQ" are in the input string
int requestInString(char request[]) {
  40064c:	b508      	push	{r3, lr}
	int tag1InString = inString(request, "\n");
  40064e:	4904      	ldr	r1, [pc, #16]	; (400660 <requestInString+0x14>)
  400650:	4b04      	ldr	r3, [pc, #16]	; (400664 <requestInString+0x18>)
  400652:	4798      	blx	r3
	if(tag1InString > 0) {
  400654:	2800      	cmp	r0, #0
		return 1;
	}
	return -1;
}
  400656:	bfcc      	ite	gt
  400658:	2001      	movgt	r0, #1
  40065a:	f04f 30ff 	movle.w	r0, #4294967295
  40065e:	bd08      	pop	{r3, pc}
  400660:	00402348 	.word	0x00402348
  400664:	00400635 	.word	0x00400635

00400668 <convertTemp>:

// Returns temperature in DegC, double precision. Output value of �51.23� equals 51.23 DegC.
// t_fine carries fine temperature as global value
volatile double convertTemp (volatile char msb, volatile char lsb, volatile char xlsb) {
  400668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40066c:	b08b      	sub	sp, #44	; 0x2c
  40066e:	f88d 0007 	strb.w	r0, [sp, #7]
  400672:	f88d 1006 	strb.w	r1, [sp, #6]
  400676:	f88d 2005 	strb.w	r2, [sp, #5]
	volatile signed long adc_T = (msb << 12) | (lsb << 4) | xlsb;
  40067a:	f89d 1007 	ldrb.w	r1, [sp, #7]
  40067e:	f89d 3006 	ldrb.w	r3, [sp, #6]
  400682:	f89d 2005 	ldrb.w	r2, [sp, #5]
  400686:	011b      	lsls	r3, r3, #4
  400688:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  40068c:	4313      	orrs	r3, r2
  40068e:	9309      	str	r3, [sp, #36]	; 0x24
	volatile double var1, var2, T;
	var1 = (((double) adc_T)/16384.0 - ((double) 27504)/1024.0) * ((double) 26435);
  400690:	9809      	ldr	r0, [sp, #36]	; 0x24
  400692:	4e2d      	ldr	r6, [pc, #180]	; (400748 <convertTemp+0xe0>)
  400694:	47b0      	blx	r6
  400696:	4c2d      	ldr	r4, [pc, #180]	; (40074c <convertTemp+0xe4>)
  400698:	2200      	movs	r2, #0
  40069a:	4b2d      	ldr	r3, [pc, #180]	; (400750 <convertTemp+0xe8>)
  40069c:	47a0      	blx	r4
  40069e:	4d2d      	ldr	r5, [pc, #180]	; (400754 <convertTemp+0xec>)
  4006a0:	a321      	add	r3, pc, #132	; (adr r3, 400728 <convertTemp+0xc0>)
  4006a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4006a6:	47a8      	blx	r5
  4006a8:	a321      	add	r3, pc, #132	; (adr r3, 400730 <convertTemp+0xc8>)
  4006aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4006ae:	47a0      	blx	r4
  4006b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
	var2 = ((((double )adc_T)/131072.0 - ((double) 27504)/8192.0) *
  4006b4:	9809      	ldr	r0, [sp, #36]	; 0x24
	(((double) adc_T)/131072.0 - ((double) 27504)/8192.0)) * ((double) (-1000));
  4006b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
	var2 = ((((double )adc_T)/131072.0 - ((double) 27504)/8192.0) *
  4006b8:	47b0      	blx	r6
  4006ba:	2200      	movs	r2, #0
  4006bc:	4b26      	ldr	r3, [pc, #152]	; (400758 <convertTemp+0xf0>)
  4006be:	47a0      	blx	r4
  4006c0:	a31d      	add	r3, pc, #116	; (adr r3, 400738 <convertTemp+0xd0>)
  4006c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4006c6:	47a8      	blx	r5
  4006c8:	4680      	mov	r8, r0
  4006ca:	4689      	mov	r9, r1
	(((double) adc_T)/131072.0 - ((double) 27504)/8192.0)) * ((double) (-1000));
  4006cc:	4638      	mov	r0, r7
  4006ce:	47b0      	blx	r6
  4006d0:	2200      	movs	r2, #0
  4006d2:	4b21      	ldr	r3, [pc, #132]	; (400758 <convertTemp+0xf0>)
  4006d4:	47a0      	blx	r4
  4006d6:	a318      	add	r3, pc, #96	; (adr r3, 400738 <convertTemp+0xd0>)
  4006d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4006dc:	47a8      	blx	r5
	var2 = ((((double )adc_T)/131072.0 - ((double) 27504)/8192.0) *
  4006de:	4602      	mov	r2, r0
  4006e0:	460b      	mov	r3, r1
  4006e2:	4640      	mov	r0, r8
  4006e4:	4649      	mov	r1, r9
  4006e6:	47a0      	blx	r4
	(((double) adc_T)/131072.0 - ((double) 27504)/8192.0)) * ((double) (-1000));
  4006e8:	a315      	add	r3, pc, #84	; (adr r3, 400740 <convertTemp+0xd8>)
  4006ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4006ee:	47a0      	blx	r4
	var2 = ((((double )adc_T)/131072.0 - ((double) 27504)/8192.0) *
  4006f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
	t_fine = (long signed int) (var1 + var2);
  4006f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4006f8:	4c18      	ldr	r4, [pc, #96]	; (40075c <convertTemp+0xf4>)
  4006fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4006fe:	47a0      	blx	r4
  400700:	4b17      	ldr	r3, [pc, #92]	; (400760 <convertTemp+0xf8>)
  400702:	4798      	blx	r3
  400704:	4b17      	ldr	r3, [pc, #92]	; (400764 <convertTemp+0xfc>)
  400706:	6018      	str	r0, [r3, #0]
	T = (var1 + var2) / 5120.0;
  400708:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40070c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  400710:	47a0      	blx	r4
  400712:	2200      	movs	r2, #0
  400714:	4b14      	ldr	r3, [pc, #80]	; (400768 <convertTemp+0x100>)
  400716:	4c15      	ldr	r4, [pc, #84]	; (40076c <convertTemp+0x104>)
  400718:	47a0      	blx	r4
  40071a:	e9cd 0102 	strd	r0, r1, [sp, #8]
	return T;
}
  40071e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400722:	b00b      	add	sp, #44	; 0x2c
  400724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400728:	00000000 	.word	0x00000000
  40072c:	403adc00 	.word	0x403adc00
  400730:	00000000 	.word	0x00000000
  400734:	40d9d0c0 	.word	0x40d9d0c0
  400738:	00000000 	.word	0x00000000
  40073c:	400adc00 	.word	0x400adc00
  400740:	00000000 	.word	0x00000000
  400744:	c08f4000 	.word	0xc08f4000
  400748:	00400edd 	.word	0x00400edd
  40074c:	00400fa9 	.word	0x00400fa9
  400750:	3f100000 	.word	0x3f100000
  400754:	00400c41 	.word	0x00400c41
  400758:	3ee00000 	.word	0x3ee00000
  40075c:	00400c45 	.word	0x00400c45
  400760:	004014dd 	.word	0x004014dd
  400764:	20000460 	.word	0x20000460
  400768:	40b40000 	.word	0x40b40000
  40076c:	004011fd 	.word	0x004011fd

00400770 <convertPress>:

// Returns pressure in Pa as double. Output value of �96386.2� equals 96386.2 Pa = 963.862 hPa
volatile double convertPress (volatile char msb, volatile char lsb, volatile char xlsb) {
  400770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400774:	b08b      	sub	sp, #44	; 0x2c
  400776:	f88d 0007 	strb.w	r0, [sp, #7]
  40077a:	f88d 1006 	strb.w	r1, [sp, #6]
  40077e:	f88d 2005 	strb.w	r2, [sp, #5]
	volatile signed long adc_P = (msb << 12) | (lsb << 4) | xlsb;
  400782:	f89d 1007 	ldrb.w	r1, [sp, #7]
  400786:	f89d 3006 	ldrb.w	r3, [sp, #6]
  40078a:	f89d 2005 	ldrb.w	r2, [sp, #5]
  40078e:	011b      	lsls	r3, r3, #4
  400790:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  400794:	4313      	orrs	r3, r2
  400796:	9309      	str	r3, [sp, #36]	; 0x24
	volatile double var1, var2, p;
	var1 = ((double) t_fine/2.0) - 64000.0;
  400798:	4b77      	ldr	r3, [pc, #476]	; (400978 <convertPress+0x208>)
  40079a:	6818      	ldr	r0, [r3, #0]
  40079c:	4b77      	ldr	r3, [pc, #476]	; (40097c <convertPress+0x20c>)
  40079e:	4798      	blx	r3
  4007a0:	4c77      	ldr	r4, [pc, #476]	; (400980 <convertPress+0x210>)
  4007a2:	2200      	movs	r2, #0
  4007a4:	4b77      	ldr	r3, [pc, #476]	; (400984 <convertPress+0x214>)
  4007a6:	47a0      	blx	r4
  4007a8:	2200      	movs	r2, #0
  4007aa:	4b77      	ldr	r3, [pc, #476]	; (400988 <convertPress+0x218>)
  4007ac:	4d77      	ldr	r5, [pc, #476]	; (40098c <convertPress+0x21c>)
  4007ae:	47a8      	blx	r5
  4007b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
	var2 = var1 * var1 * ((double) (-7)) / 32768.0;
  4007b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4007b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  4007bc:	47a0      	blx	r4
  4007be:	2200      	movs	r2, #0
  4007c0:	4b73      	ldr	r3, [pc, #460]	; (400990 <convertPress+0x220>)
  4007c2:	47a0      	blx	r4
  4007c4:	2200      	movs	r2, #0
  4007c6:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
  4007ca:	47a0      	blx	r4
  4007cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
	var2 = var2 + var1 * ((double) 140) * 2.0;
  4007d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4007d4:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  4007d8:	2200      	movs	r2, #0
  4007da:	4b6e      	ldr	r3, [pc, #440]	; (400994 <convertPress+0x224>)
  4007dc:	47a0      	blx	r4
  4007de:	4d6e      	ldr	r5, [pc, #440]	; (400998 <convertPress+0x228>)
  4007e0:	4602      	mov	r2, r0
  4007e2:	460b      	mov	r3, r1
  4007e4:	47a8      	blx	r5
  4007e6:	4632      	mov	r2, r6
  4007e8:	463b      	mov	r3, r7
  4007ea:	47a8      	blx	r5
  4007ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
	var2 = (var2/4.0)+(((double) 2855) * 65536.0);
  4007f0:	2200      	movs	r2, #0
  4007f2:	4b6a      	ldr	r3, [pc, #424]	; (40099c <convertPress+0x22c>)
  4007f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4007f8:	47a0      	blx	r4
  4007fa:	a34f      	add	r3, pc, #316	; (adr r3, 400938 <convertPress+0x1c8>)
  4007fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  400800:	47a8      	blx	r5
  400802:	e9cd 0104 	strd	r0, r1, [sp, #16]
	var1 = (((double) 3024) * var1 * var1 / 524288.0 + ((double) (-10685)) * var1) / 524288.0;
  400806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40080a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  40080e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  400812:	a34b      	add	r3, pc, #300	; (adr r3, 400940 <convertPress+0x1d0>)
  400814:	e9d3 2300 	ldrd	r2, r3, [r3]
  400818:	47a0      	blx	r4
  40081a:	4632      	mov	r2, r6
  40081c:	463b      	mov	r3, r7
  40081e:	47a0      	blx	r4
  400820:	2200      	movs	r2, #0
  400822:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
  400826:	47a0      	blx	r4
  400828:	4606      	mov	r6, r0
  40082a:	460f      	mov	r7, r1
  40082c:	a346      	add	r3, pc, #280	; (adr r3, 400948 <convertPress+0x1d8>)
  40082e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400832:	4640      	mov	r0, r8
  400834:	4649      	mov	r1, r9
  400836:	47a0      	blx	r4
  400838:	4602      	mov	r2, r0
  40083a:	460b      	mov	r3, r1
  40083c:	4630      	mov	r0, r6
  40083e:	4639      	mov	r1, r7
  400840:	47a8      	blx	r5
  400842:	2200      	movs	r2, #0
  400844:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
  400848:	47a0      	blx	r4
  40084a:	e9cd 0106 	strd	r0, r1, [sp, #24]
	var1 = (1.0 + var1 / 32768.0)*((double) 36477);
  40084e:	2200      	movs	r2, #0
  400850:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
  400854:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  400858:	47a0      	blx	r4
  40085a:	2200      	movs	r2, #0
  40085c:	4b50      	ldr	r3, [pc, #320]	; (4009a0 <convertPress+0x230>)
  40085e:	47a8      	blx	r5
  400860:	a33b      	add	r3, pc, #236	; (adr r3, 400950 <convertPress+0x1e0>)
  400862:	e9d3 2300 	ldrd	r2, r3, [r3]
  400866:	47a0      	blx	r4
  400868:	e9cd 0106 	strd	r0, r1, [sp, #24]
	if (var1 == 0.0) return 0; // Avoid exception caused by division by zero
  40086c:	2200      	movs	r2, #0
  40086e:	2300      	movs	r3, #0
  400870:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  400874:	4c4b      	ldr	r4, [pc, #300]	; (4009a4 <convertPress+0x234>)
  400876:	47a0      	blx	r4
  400878:	2800      	cmp	r0, #0
  40087a:	d159      	bne.n	400930 <convertPress+0x1c0>
	p = 1048576.0 - (double) adc_P;
  40087c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40087e:	4b3f      	ldr	r3, [pc, #252]	; (40097c <convertPress+0x20c>)
  400880:	4798      	blx	r3
  400882:	4d42      	ldr	r5, [pc, #264]	; (40098c <convertPress+0x21c>)
  400884:	4602      	mov	r2, r0
  400886:	460b      	mov	r3, r1
  400888:	2000      	movs	r0, #0
  40088a:	4947      	ldr	r1, [pc, #284]	; (4009a8 <convertPress+0x238>)
  40088c:	47a8      	blx	r5
  40088e:	e9cd 0102 	strd	r0, r1, [sp, #8]
	p = (p - (var2 / 4096.0)) * 6250.0 / var1;
  400892:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  400896:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40089a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  40089e:	4c38      	ldr	r4, [pc, #224]	; (400980 <convertPress+0x210>)
  4008a0:	2200      	movs	r2, #0
  4008a2:	4b42      	ldr	r3, [pc, #264]	; (4009ac <convertPress+0x23c>)
  4008a4:	47a0      	blx	r4
  4008a6:	4602      	mov	r2, r0
  4008a8:	460b      	mov	r3, r1
  4008aa:	4640      	mov	r0, r8
  4008ac:	4649      	mov	r1, r9
  4008ae:	47a8      	blx	r5
  4008b0:	a329      	add	r3, pc, #164	; (adr r3, 400958 <convertPress+0x1e8>)
  4008b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4008b6:	47a0      	blx	r4
  4008b8:	4632      	mov	r2, r6
  4008ba:	463b      	mov	r3, r7
  4008bc:	4d3c      	ldr	r5, [pc, #240]	; (4009b0 <convertPress+0x240>)
  4008be:	47a8      	blx	r5
  4008c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
	var1 = ((double) 6000) * p * p / 2147483648.0;
  4008c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4008c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4008cc:	a324      	add	r3, pc, #144	; (adr r3, 400960 <convertPress+0x1f0>)
  4008ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4008d2:	47a0      	blx	r4
  4008d4:	4632      	mov	r2, r6
  4008d6:	463b      	mov	r3, r7
  4008d8:	47a0      	blx	r4
  4008da:	2200      	movs	r2, #0
  4008dc:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
  4008e0:	47a0      	blx	r4
  4008e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
	var2 = p * ((double) (-14600)) / 32768.0;
  4008e6:	a320      	add	r3, pc, #128	; (adr r3, 400968 <convertPress+0x1f8>)
  4008e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4008ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4008f0:	47a0      	blx	r4
  4008f2:	2200      	movs	r2, #0
  4008f4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
  4008f8:	47a0      	blx	r4
  4008fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
	p = p + (var1 + var2 + ((double) 15500)) / 16.0;
  4008fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  400902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  400906:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40090a:	4d23      	ldr	r5, [pc, #140]	; (400998 <convertPress+0x228>)
  40090c:	47a8      	blx	r5
  40090e:	a318      	add	r3, pc, #96	; (adr r3, 400970 <convertPress+0x200>)
  400910:	e9d3 2300 	ldrd	r2, r3, [r3]
  400914:	47a8      	blx	r5
  400916:	2200      	movs	r2, #0
  400918:	4b26      	ldr	r3, [pc, #152]	; (4009b4 <convertPress+0x244>)
  40091a:	47a0      	blx	r4
  40091c:	4632      	mov	r2, r6
  40091e:	463b      	mov	r3, r7
  400920:	47a8      	blx	r5
  400922:	e9cd 0102 	strd	r0, r1, [sp, #8]
	return p;
  400926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
}
  40092a:	b00b      	add	sp, #44	; 0x2c
  40092c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (var1 == 0.0) return 0; // Avoid exception caused by division by zero
  400930:	2000      	movs	r0, #0
  400932:	2100      	movs	r1, #0
  400934:	e7f9      	b.n	40092a <convertPress+0x1ba>
  400936:	bf00      	nop
  400938:	00000000 	.word	0x00000000
  40093c:	41a64e00 	.word	0x41a64e00
  400940:	00000000 	.word	0x00000000
  400944:	40a7a000 	.word	0x40a7a000
  400948:	00000000 	.word	0x00000000
  40094c:	c0c4de80 	.word	0xc0c4de80
  400950:	00000000 	.word	0x00000000
  400954:	40e1cfa0 	.word	0x40e1cfa0
  400958:	00000000 	.word	0x00000000
  40095c:	40b86a00 	.word	0x40b86a00
  400960:	00000000 	.word	0x00000000
  400964:	40b77000 	.word	0x40b77000
  400968:	00000000 	.word	0x00000000
  40096c:	c0cc8400 	.word	0xc0cc8400
  400970:	00000000 	.word	0x00000000
  400974:	40ce4600 	.word	0x40ce4600
  400978:	20000460 	.word	0x20000460
  40097c:	00400edd 	.word	0x00400edd
  400980:	00400fa9 	.word	0x00400fa9
  400984:	3fe00000 	.word	0x3fe00000
  400988:	40ef4000 	.word	0x40ef4000
  40098c:	00400c41 	.word	0x00400c41
  400990:	c01c0000 	.word	0xc01c0000
  400994:	40618000 	.word	0x40618000
  400998:	00400c45 	.word	0x00400c45
  40099c:	3fd00000 	.word	0x3fd00000
  4009a0:	3ff00000 	.word	0x3ff00000
  4009a4:	00401479 	.word	0x00401479
  4009a8:	41300000 	.word	0x41300000
  4009ac:	3f300000 	.word	0x3f300000
  4009b0:	004011fd 	.word	0x004011fd
  4009b4:	3fb00000 	.word	0x3fb00000

004009b8 <main>:

int main(void)
{
  4009b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4009bc:	b09c      	sub	sp, #112	; 0x70
////////////////////////////////////////////////////////////////////////////////////////////////////
// WDT User Functions
////////////////////////////////////////////////////////////////////////////////////////////////////

void wdtDisable() {
    WDT->WDT_MR.WDDIS = 1;
  4009be:	4a7b      	ldr	r2, [pc, #492]	; (400bac <main+0x1f4>)
  4009c0:	6853      	ldr	r3, [r2, #4]
  4009c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4009c6:	6053      	str	r3, [r2, #4]
    //Initialize peripheral clocks
	samInit();
	pioInit();
  4009c8:	4b79      	ldr	r3, [pc, #484]	; (400bb0 <main+0x1f8>)
  4009ca:	4798      	blx	r3
	tcInit();
  4009cc:	4b79      	ldr	r3, [pc, #484]	; (400bb4 <main+0x1fc>)
  4009ce:	4798      	blx	r3
	tcDelayInit();
  4009d0:	4b79      	ldr	r3, [pc, #484]	; (400bb8 <main+0x200>)
  4009d2:	4798      	blx	r3
    adcInit(ADC_MR_LOWRES_BITS_10);
  4009d4:	2001      	movs	r0, #1
  4009d6:	4b79      	ldr	r3, [pc, #484]	; (400bbc <main+0x204>)
  4009d8:	4798      	blx	r3
	adcChannelInit(ADC_CH4, ADC_CGR_GAIN_X1, ADC_COR_OFFSET_OFF); // Using ADC channel 4 (on pin PIO_PB0)
  4009da:	2200      	movs	r2, #0
  4009dc:	4611      	mov	r1, r2
  4009de:	2004      	movs	r0, #4
  4009e0:	4b77      	ldr	r3, [pc, #476]	; (400bc0 <main+0x208>)
  4009e2:	4798      	blx	r3

    //Initialize GPIO pin  for LED control
	pioPinMode(LED_PIN, PIO_OUTPUT);
  4009e4:	2101      	movs	r1, #1
  4009e6:	2012      	movs	r0, #18
  4009e8:	4d76      	ldr	r5, [pc, #472]	; (400bc4 <main+0x20c>)
  4009ea:	47a8      	blx	r5
	pioDigitalWrite(LED_PIN, PIO_HIGH);
  4009ec:	2101      	movs	r1, #1
  4009ee:	2012      	movs	r0, #18
  4009f0:	4c75      	ldr	r4, [pc, #468]	; (400bc8 <main+0x210>)
  4009f2:	47a0      	blx	r4

    // Initialize CSB pin for SPI with the BMP280
	pioPinMode(CSB, PIO_OUTPUT);
  4009f4:	2101      	movs	r1, #1
  4009f6:	2008      	movs	r0, #8
  4009f8:	47a8      	blx	r5
	pioDigitalWrite(CSB, PIO_HIGH); // Either force the pin high initially or delay long enough for the pull-up resistor to respond
  4009fa:	2101      	movs	r1, #1
  4009fc:	2008      	movs	r0, #8
  4009fe:	47a0      	blx	r4
	
    //Initialize UART with no parity, 9600 baud
	//The peripheral clock is 4MHz, and we provide a clock divider factor CD such that baud rate = MCK/(16*CD)
	//Therefore we need a clock divide coefficient of 26, which provides a baud rate of 9615 baud. This 0.1% error is accounted for by the receiving UART
	uartInit(4, 13);
  400a00:	210d      	movs	r1, #13
  400a02:	2004      	movs	r0, #4
  400a04:	4b71      	ldr	r3, [pc, #452]	; (400bcc <main+0x214>)
  400a06:	4798      	blx	r3

    // Initialize SPI. Divide the clock by 10 since the maximum frequency which the BMP280 supports
    // is 10 MHz. Use in (1, 1) mode, since this is the only mode the BMP280 supports. (The BMP280
    // should also support (0, 0) mode, but this did not work in testing.)
    spiInit(20, 1, 1);
  400a08:	2201      	movs	r2, #1
  400a0a:	4611      	mov	r1, r2
  400a0c:	2014      	movs	r0, #20
  400a0e:	4b70      	ldr	r3, [pc, #448]	; (400bd0 <main+0x218>)
  400a10:	4798      	blx	r3
	
    // Initialize BMP280
	pioDigitalWrite(CSB, PIO_LOW);
  400a12:	2100      	movs	r1, #0
  400a14:	2008      	movs	r0, #8
  400a16:	47a0      	blx	r4
	spiSendReceive16(0x742F); // osrs_t = 001, osrs_p = 011, mode = 11
  400a18:	f247 402f 	movw	r0, #29743	; 0x742f
  400a1c:	4d6d      	ldr	r5, [pc, #436]	; (400bd4 <main+0x21c>)
  400a1e:	47a8      	blx	r5
	spiSendReceive16(0x7510); // t_sb = 000, filter = 100, [0], spi3w_en = 0
  400a20:	f247 5010 	movw	r0, #29968	; 0x7510
  400a24:	47a8      	blx	r5
	pioDigitalWrite(CSB, PIO_HIGH);
  400a26:	2101      	movs	r1, #1
  400a28:	2008      	movs	r0, #8
  400a2a:	47a0      	blx	r4
	
	// Confirm chip ID
	pioDigitalWrite(CSB, PIO_LOW);
  400a2c:	2100      	movs	r1, #0
  400a2e:	2008      	movs	r0, #8
  400a30:	47a0      	blx	r4
	spiSendReceive(0xD0);
  400a32:	20d0      	movs	r0, #208	; 0xd0
  400a34:	4d68      	ldr	r5, [pc, #416]	; (400bd8 <main+0x220>)
  400a36:	47a8      	blx	r5
	id = spiSendReceive(0);
  400a38:	2000      	movs	r0, #0
  400a3a:	47a8      	blx	r5
  400a3c:	4b67      	ldr	r3, [pc, #412]	; (400bdc <main+0x224>)
  400a3e:	7118      	strb	r0, [r3, #4]
	pioDigitalWrite(CSB, PIO_HIGH);
  400a40:	2101      	movs	r1, #1
  400a42:	2008      	movs	r0, #8
  400a44:	47a0      	blx	r4
    return UART->UART_SR.RXRDY; // Check if data has been received
  400a46:	4c66      	ldr	r4, [pc, #408]	; (400be0 <main+0x228>)
			// Loop if we run out of space
			if (charIndex >= BUFF_LEN) charIndex = 0;
			
			//wait for a complete request to be transmitted before processing
			while (!uartRxReady());
			request[charIndex++] = uartRx();
  400a48:	4d66      	ldr	r5, [pc, #408]	; (400be4 <main+0x22c>)
  400a4a:	e070      	b.n	400b2e <main+0x176>
			if (charIndex >= BUFF_LEN) charIndex = 0;
  400a4c:	2e20      	cmp	r6, #32
  400a4e:	bfa8      	it	ge
  400a50:	2600      	movge	r6, #0
  400a52:	6963      	ldr	r3, [r4, #20]
			while (!uartRxReady());
  400a54:	f013 0f01 	tst.w	r3, #1
  400a58:	d0fb      	beq.n	400a52 <main+0x9a>
			request[charIndex++] = uartRx();
  400a5a:	1c77      	adds	r7, r6, #1
  400a5c:	47a8      	blx	r5
  400a5e:	ab1c      	add	r3, sp, #112	; 0x70
  400a60:	441e      	add	r6, r3
  400a62:	f806 0c20 	strb.w	r0, [r6, #-32]
  400a66:	463e      	mov	r6, r7
		while (requestInString(request) == -1) {
  400a68:	a814      	add	r0, sp, #80	; 0x50
  400a6a:	47c0      	blx	r8
  400a6c:	f1b0 3fff 	cmp.w	r0, #4294967295
  400a70:	d0ec      	beq.n	400a4c <main+0x94>
		}
		
		//the request has been received. now process to determine whether to turn the LED on or off
		if (inString(request, "ledoff")!=-1) {
  400a72:	495d      	ldr	r1, [pc, #372]	; (400be8 <main+0x230>)
  400a74:	a814      	add	r0, sp, #80	; 0x50
  400a76:	4b5d      	ldr	r3, [pc, #372]	; (400bec <main+0x234>)
  400a78:	4798      	blx	r3
  400a7a:	f1b0 3fff 	cmp.w	r0, #4294967295
  400a7e:	d003      	beq.n	400a88 <main+0xd0>
			pioDigitalWrite(LED_PIN, PIO_HIGH);
  400a80:	2101      	movs	r1, #1
  400a82:	2012      	movs	r0, #18
  400a84:	4b50      	ldr	r3, [pc, #320]	; (400bc8 <main+0x210>)
  400a86:	4798      	blx	r3
		}
		if (inString(request, "ledon")!=-1) {
  400a88:	4959      	ldr	r1, [pc, #356]	; (400bf0 <main+0x238>)
  400a8a:	a814      	add	r0, sp, #80	; 0x50
  400a8c:	4b57      	ldr	r3, [pc, #348]	; (400bec <main+0x234>)
  400a8e:	4798      	blx	r3
  400a90:	f1b0 3fff 	cmp.w	r0, #4294967295
  400a94:	d003      	beq.n	400a9e <main+0xe6>
			pioDigitalWrite(LED_PIN, PIO_LOW);
  400a96:	2100      	movs	r1, #0
  400a98:	2012      	movs	r0, #18
  400a9a:	4b4b      	ldr	r3, [pc, #300]	; (400bc8 <main+0x210>)
  400a9c:	4798      	blx	r3
		
		
		char temperature[20];
		char temperaturept2[20];
		char pressure[20];
		itoa(temp, temperature, 10);
  400a9e:	4f4f      	ldr	r7, [pc, #316]	; (400bdc <main+0x224>)
  400aa0:	4e54      	ldr	r6, [pc, #336]	; (400bf4 <main+0x23c>)
  400aa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
  400aa6:	47b0      	blx	r6
  400aa8:	220a      	movs	r2, #10
  400aaa:	a905      	add	r1, sp, #20
  400aac:	f8df a178 	ldr.w	sl, [pc, #376]	; 400c28 <main+0x270>
  400ab0:	47d0      	blx	sl
		itoa((temp*10)-((int)temp)*10, temperaturept2, 10);
  400ab2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
  400ab6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
  400aba:	e9cd 2300 	strd	r2, r3, [sp]
  400abe:	2200      	movs	r2, #0
  400ac0:	4b4d      	ldr	r3, [pc, #308]	; (400bf8 <main+0x240>)
  400ac2:	f8df 8168 	ldr.w	r8, [pc, #360]	; 400c2c <main+0x274>
  400ac6:	47c0      	blx	r8
  400ac8:	4680      	mov	r8, r0
  400aca:	4689      	mov	r9, r1
  400acc:	e9dd 0100 	ldrd	r0, r1, [sp]
  400ad0:	47b0      	blx	r6
  400ad2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400ad6:	0040      	lsls	r0, r0, #1
  400ad8:	4b48      	ldr	r3, [pc, #288]	; (400bfc <main+0x244>)
  400ada:	4798      	blx	r3
  400adc:	4602      	mov	r2, r0
  400ade:	460b      	mov	r3, r1
  400ae0:	4640      	mov	r0, r8
  400ae2:	4649      	mov	r1, r9
  400ae4:	f8df 8148 	ldr.w	r8, [pc, #328]	; 400c30 <main+0x278>
  400ae8:	47c0      	blx	r8
  400aea:	47b0      	blx	r6
  400aec:	220a      	movs	r2, #10
  400aee:	a90a      	add	r1, sp, #40	; 0x28
  400af0:	47d0      	blx	sl
		itoa(press, pressure, 10);
  400af2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
  400af6:	47b0      	blx	r6
  400af8:	220a      	movs	r2, #10
  400afa:	a90f      	add	r1, sp, #60	; 0x3c
  400afc:	47d0      	blx	sl
		
		//finally, transmit the webpage over UART
		//transmitting the first section of the webpage
		sendString(webpageStart);
  400afe:	4f40      	ldr	r7, [pc, #256]	; (400c00 <main+0x248>)
  400b00:	6838      	ldr	r0, [r7, #0]
  400b02:	4e40      	ldr	r6, [pc, #256]	; (400c04 <main+0x24c>)
  400b04:	47b0      	blx	r6
		
		sendString(ledStr);
  400b06:	6878      	ldr	r0, [r7, #4]
  400b08:	47b0      	blx	r6
		
		sendString("<p>Current Temperature:</p>");
  400b0a:	483f      	ldr	r0, [pc, #252]	; (400c08 <main+0x250>)
  400b0c:	47b0      	blx	r6
		sendString(temperature);
  400b0e:	a805      	add	r0, sp, #20
  400b10:	47b0      	blx	r6
		sendString(".");
  400b12:	483e      	ldr	r0, [pc, #248]	; (400c0c <main+0x254>)
  400b14:	47b0      	blx	r6
		sendString(temperaturept2);
  400b16:	a80a      	add	r0, sp, #40	; 0x28
  400b18:	47b0      	blx	r6
		sendString(" C");
  400b1a:	483d      	ldr	r0, [pc, #244]	; (400c10 <main+0x258>)
  400b1c:	47b0      	blx	r6
		
		sendString("<p>Current pressure:</p>");
  400b1e:	483d      	ldr	r0, [pc, #244]	; (400c14 <main+0x25c>)
  400b20:	47b0      	blx	r6
		sendString(pressure);
  400b22:	a80f      	add	r0, sp, #60	; 0x3c
  400b24:	47b0      	blx	r6
		sendString(" Pa");
  400b26:	483c      	ldr	r0, [pc, #240]	; (400c18 <main+0x260>)
  400b28:	47b0      	blx	r6
		
		sendString(webpageEnd);		
  400b2a:	68b8      	ldr	r0, [r7, #8]
  400b2c:	47b0      	blx	r6
		pioDigitalWrite(CSB, PIO_LOW);
  400b2e:	2100      	movs	r1, #0
  400b30:	2008      	movs	r0, #8
  400b32:	4f25      	ldr	r7, [pc, #148]	; (400bc8 <main+0x210>)
  400b34:	47b8      	blx	r7
		spiSendReceive(0xF7);
  400b36:	20f7      	movs	r0, #247	; 0xf7
  400b38:	4e27      	ldr	r6, [pc, #156]	; (400bd8 <main+0x220>)
  400b3a:	47b0      	blx	r6
		volatile char press_msb = spiSendReceive(0);
  400b3c:	2000      	movs	r0, #0
  400b3e:	47b0      	blx	r6
  400b40:	f88d 000e 	strb.w	r0, [sp, #14]
		volatile char press_lsb = spiSendReceive(0);
  400b44:	2000      	movs	r0, #0
  400b46:	47b0      	blx	r6
  400b48:	f88d 000f 	strb.w	r0, [sp, #15]
		volatile char press_xlsb = spiSendReceive(0);
  400b4c:	2000      	movs	r0, #0
  400b4e:	47b0      	blx	r6
  400b50:	f88d 0010 	strb.w	r0, [sp, #16]
		volatile char temp_msb = spiSendReceive(0);
  400b54:	2000      	movs	r0, #0
  400b56:	47b0      	blx	r6
  400b58:	f88d 0011 	strb.w	r0, [sp, #17]
		volatile char temp_lsb = spiSendReceive(0);
  400b5c:	2000      	movs	r0, #0
  400b5e:	47b0      	blx	r6
  400b60:	f88d 0012 	strb.w	r0, [sp, #18]
		volatile char temp_xlsb = spiSendReceive(0);
  400b64:	2000      	movs	r0, #0
  400b66:	47b0      	blx	r6
  400b68:	f88d 0013 	strb.w	r0, [sp, #19]
		pioDigitalWrite(CSB, PIO_HIGH);
  400b6c:	2101      	movs	r1, #1
  400b6e:	2008      	movs	r0, #8
  400b70:	47b8      	blx	r7
		temp = convertTemp(temp_msb, temp_lsb, temp_xlsb);
  400b72:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400b76:	f89d 1012 	ldrb.w	r1, [sp, #18]
  400b7a:	f89d 2013 	ldrb.w	r2, [sp, #19]
  400b7e:	4b27      	ldr	r3, [pc, #156]	; (400c1c <main+0x264>)
  400b80:	4798      	blx	r3
  400b82:	4e16      	ldr	r6, [pc, #88]	; (400bdc <main+0x224>)
  400b84:	e9c6 0102 	strd	r0, r1, [r6, #8]
		press = convertPress(press_msb, press_lsb, press_xlsb);
  400b88:	f89d 000e 	ldrb.w	r0, [sp, #14]
  400b8c:	f89d 100f 	ldrb.w	r1, [sp, #15]
  400b90:	f89d 2010 	ldrb.w	r2, [sp, #16]
  400b94:	4b22      	ldr	r3, [pc, #136]	; (400c20 <main+0x268>)
  400b96:	4798      	blx	r3
  400b98:	e9c6 0104 	strd	r0, r1, [r6, #16]
        light = adcRead(ADC_CH4);
  400b9c:	2004      	movs	r0, #4
  400b9e:	4b21      	ldr	r3, [pc, #132]	; (400c24 <main+0x26c>)
  400ba0:	4798      	blx	r3
  400ba2:	61b0      	str	r0, [r6, #24]
		int  charIndex = 0;
  400ba4:	2600      	movs	r6, #0
		while (requestInString(request) == -1) {
  400ba6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400c34 <main+0x27c>
  400baa:	e75d      	b.n	400a68 <main+0xb0>
  400bac:	400e1450 	.word	0x400e1450
  400bb0:	004001c5 	.word	0x004001c5
  400bb4:	004002e5 	.word	0x004002e5
  400bb8:	00400355 	.word	0x00400355
  400bbc:	00400495 	.word	0x00400495
  400bc0:	004004c5 	.word	0x004004c5
  400bc4:	004001d9 	.word	0x004001d9
  400bc8:	004002a1 	.word	0x004002a1
  400bcc:	00400419 	.word	0x00400419
  400bd0:	00400371 	.word	0x00400371
  400bd4:	004003fd 	.word	0x004003fd
  400bd8:	004003dd 	.word	0x004003dd
  400bdc:	20000460 	.word	0x20000460
  400be0:	400e0600 	.word	0x400e0600
  400be4:	0040047d 	.word	0x0040047d
  400be8:	0040234c 	.word	0x0040234c
  400bec:	00400635 	.word	0x00400635
  400bf0:	00402354 	.word	0x00402354
  400bf4:	004014dd 	.word	0x004014dd
  400bf8:	40240000 	.word	0x40240000
  400bfc:	00400edd 	.word	0x00400edd
  400c00:	20000000 	.word	0x20000000
  400c04:	00400619 	.word	0x00400619
  400c08:	0040235c 	.word	0x0040235c
  400c0c:	00402378 	.word	0x00402378
  400c10:	0040237c 	.word	0x0040237c
  400c14:	00402380 	.word	0x00402380
  400c18:	0040239c 	.word	0x0040239c
  400c1c:	00400669 	.word	0x00400669
  400c20:	00400771 	.word	0x00400771
  400c24:	00400599 	.word	0x00400599
  400c28:	00401b09 	.word	0x00401b09
  400c2c:	00400fa9 	.word	0x00400fa9
  400c30:	00400c41 	.word	0x00400c41
  400c34:	0040064d 	.word	0x0040064d

00400c38 <__aeabi_drsub>:
  400c38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  400c3c:	e002      	b.n	400c44 <__adddf3>
  400c3e:	bf00      	nop

00400c40 <__aeabi_dsub>:
  400c40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00400c44 <__adddf3>:
  400c44:	b530      	push	{r4, r5, lr}
  400c46:	ea4f 0441 	mov.w	r4, r1, lsl #1
  400c4a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  400c4e:	ea94 0f05 	teq	r4, r5
  400c52:	bf08      	it	eq
  400c54:	ea90 0f02 	teqeq	r0, r2
  400c58:	bf1f      	itttt	ne
  400c5a:	ea54 0c00 	orrsne.w	ip, r4, r0
  400c5e:	ea55 0c02 	orrsne.w	ip, r5, r2
  400c62:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  400c66:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  400c6a:	f000 80e2 	beq.w	400e32 <__adddf3+0x1ee>
  400c6e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  400c72:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  400c76:	bfb8      	it	lt
  400c78:	426d      	neglt	r5, r5
  400c7a:	dd0c      	ble.n	400c96 <__adddf3+0x52>
  400c7c:	442c      	add	r4, r5
  400c7e:	ea80 0202 	eor.w	r2, r0, r2
  400c82:	ea81 0303 	eor.w	r3, r1, r3
  400c86:	ea82 0000 	eor.w	r0, r2, r0
  400c8a:	ea83 0101 	eor.w	r1, r3, r1
  400c8e:	ea80 0202 	eor.w	r2, r0, r2
  400c92:	ea81 0303 	eor.w	r3, r1, r3
  400c96:	2d36      	cmp	r5, #54	; 0x36
  400c98:	bf88      	it	hi
  400c9a:	bd30      	pophi	{r4, r5, pc}
  400c9c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  400ca0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  400ca4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  400ca8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  400cac:	d002      	beq.n	400cb4 <__adddf3+0x70>
  400cae:	4240      	negs	r0, r0
  400cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  400cb4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  400cb8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  400cbc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  400cc0:	d002      	beq.n	400cc8 <__adddf3+0x84>
  400cc2:	4252      	negs	r2, r2
  400cc4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  400cc8:	ea94 0f05 	teq	r4, r5
  400ccc:	f000 80a7 	beq.w	400e1e <__adddf3+0x1da>
  400cd0:	f1a4 0401 	sub.w	r4, r4, #1
  400cd4:	f1d5 0e20 	rsbs	lr, r5, #32
  400cd8:	db0d      	blt.n	400cf6 <__adddf3+0xb2>
  400cda:	fa02 fc0e 	lsl.w	ip, r2, lr
  400cde:	fa22 f205 	lsr.w	r2, r2, r5
  400ce2:	1880      	adds	r0, r0, r2
  400ce4:	f141 0100 	adc.w	r1, r1, #0
  400ce8:	fa03 f20e 	lsl.w	r2, r3, lr
  400cec:	1880      	adds	r0, r0, r2
  400cee:	fa43 f305 	asr.w	r3, r3, r5
  400cf2:	4159      	adcs	r1, r3
  400cf4:	e00e      	b.n	400d14 <__adddf3+0xd0>
  400cf6:	f1a5 0520 	sub.w	r5, r5, #32
  400cfa:	f10e 0e20 	add.w	lr, lr, #32
  400cfe:	2a01      	cmp	r2, #1
  400d00:	fa03 fc0e 	lsl.w	ip, r3, lr
  400d04:	bf28      	it	cs
  400d06:	f04c 0c02 	orrcs.w	ip, ip, #2
  400d0a:	fa43 f305 	asr.w	r3, r3, r5
  400d0e:	18c0      	adds	r0, r0, r3
  400d10:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  400d14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  400d18:	d507      	bpl.n	400d2a <__adddf3+0xe6>
  400d1a:	f04f 0e00 	mov.w	lr, #0
  400d1e:	f1dc 0c00 	rsbs	ip, ip, #0
  400d22:	eb7e 0000 	sbcs.w	r0, lr, r0
  400d26:	eb6e 0101 	sbc.w	r1, lr, r1
  400d2a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  400d2e:	d31b      	bcc.n	400d68 <__adddf3+0x124>
  400d30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  400d34:	d30c      	bcc.n	400d50 <__adddf3+0x10c>
  400d36:	0849      	lsrs	r1, r1, #1
  400d38:	ea5f 0030 	movs.w	r0, r0, rrx
  400d3c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  400d40:	f104 0401 	add.w	r4, r4, #1
  400d44:	ea4f 5244 	mov.w	r2, r4, lsl #21
  400d48:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  400d4c:	f080 809a 	bcs.w	400e84 <__adddf3+0x240>
  400d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  400d54:	bf08      	it	eq
  400d56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  400d5a:	f150 0000 	adcs.w	r0, r0, #0
  400d5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  400d62:	ea41 0105 	orr.w	r1, r1, r5
  400d66:	bd30      	pop	{r4, r5, pc}
  400d68:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  400d6c:	4140      	adcs	r0, r0
  400d6e:	eb41 0101 	adc.w	r1, r1, r1
  400d72:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  400d76:	f1a4 0401 	sub.w	r4, r4, #1
  400d7a:	d1e9      	bne.n	400d50 <__adddf3+0x10c>
  400d7c:	f091 0f00 	teq	r1, #0
  400d80:	bf04      	itt	eq
  400d82:	4601      	moveq	r1, r0
  400d84:	2000      	moveq	r0, #0
  400d86:	fab1 f381 	clz	r3, r1
  400d8a:	bf08      	it	eq
  400d8c:	3320      	addeq	r3, #32
  400d8e:	f1a3 030b 	sub.w	r3, r3, #11
  400d92:	f1b3 0220 	subs.w	r2, r3, #32
  400d96:	da0c      	bge.n	400db2 <__adddf3+0x16e>
  400d98:	320c      	adds	r2, #12
  400d9a:	dd08      	ble.n	400dae <__adddf3+0x16a>
  400d9c:	f102 0c14 	add.w	ip, r2, #20
  400da0:	f1c2 020c 	rsb	r2, r2, #12
  400da4:	fa01 f00c 	lsl.w	r0, r1, ip
  400da8:	fa21 f102 	lsr.w	r1, r1, r2
  400dac:	e00c      	b.n	400dc8 <__adddf3+0x184>
  400dae:	f102 0214 	add.w	r2, r2, #20
  400db2:	bfd8      	it	le
  400db4:	f1c2 0c20 	rsble	ip, r2, #32
  400db8:	fa01 f102 	lsl.w	r1, r1, r2
  400dbc:	fa20 fc0c 	lsr.w	ip, r0, ip
  400dc0:	bfdc      	itt	le
  400dc2:	ea41 010c 	orrle.w	r1, r1, ip
  400dc6:	4090      	lslle	r0, r2
  400dc8:	1ae4      	subs	r4, r4, r3
  400dca:	bfa2      	ittt	ge
  400dcc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  400dd0:	4329      	orrge	r1, r5
  400dd2:	bd30      	popge	{r4, r5, pc}
  400dd4:	ea6f 0404 	mvn.w	r4, r4
  400dd8:	3c1f      	subs	r4, #31
  400dda:	da1c      	bge.n	400e16 <__adddf3+0x1d2>
  400ddc:	340c      	adds	r4, #12
  400dde:	dc0e      	bgt.n	400dfe <__adddf3+0x1ba>
  400de0:	f104 0414 	add.w	r4, r4, #20
  400de4:	f1c4 0220 	rsb	r2, r4, #32
  400de8:	fa20 f004 	lsr.w	r0, r0, r4
  400dec:	fa01 f302 	lsl.w	r3, r1, r2
  400df0:	ea40 0003 	orr.w	r0, r0, r3
  400df4:	fa21 f304 	lsr.w	r3, r1, r4
  400df8:	ea45 0103 	orr.w	r1, r5, r3
  400dfc:	bd30      	pop	{r4, r5, pc}
  400dfe:	f1c4 040c 	rsb	r4, r4, #12
  400e02:	f1c4 0220 	rsb	r2, r4, #32
  400e06:	fa20 f002 	lsr.w	r0, r0, r2
  400e0a:	fa01 f304 	lsl.w	r3, r1, r4
  400e0e:	ea40 0003 	orr.w	r0, r0, r3
  400e12:	4629      	mov	r1, r5
  400e14:	bd30      	pop	{r4, r5, pc}
  400e16:	fa21 f004 	lsr.w	r0, r1, r4
  400e1a:	4629      	mov	r1, r5
  400e1c:	bd30      	pop	{r4, r5, pc}
  400e1e:	f094 0f00 	teq	r4, #0
  400e22:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  400e26:	bf06      	itte	eq
  400e28:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  400e2c:	3401      	addeq	r4, #1
  400e2e:	3d01      	subne	r5, #1
  400e30:	e74e      	b.n	400cd0 <__adddf3+0x8c>
  400e32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  400e36:	bf18      	it	ne
  400e38:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  400e3c:	d029      	beq.n	400e92 <__adddf3+0x24e>
  400e3e:	ea94 0f05 	teq	r4, r5
  400e42:	bf08      	it	eq
  400e44:	ea90 0f02 	teqeq	r0, r2
  400e48:	d005      	beq.n	400e56 <__adddf3+0x212>
  400e4a:	ea54 0c00 	orrs.w	ip, r4, r0
  400e4e:	bf04      	itt	eq
  400e50:	4619      	moveq	r1, r3
  400e52:	4610      	moveq	r0, r2
  400e54:	bd30      	pop	{r4, r5, pc}
  400e56:	ea91 0f03 	teq	r1, r3
  400e5a:	bf1e      	ittt	ne
  400e5c:	2100      	movne	r1, #0
  400e5e:	2000      	movne	r0, #0
  400e60:	bd30      	popne	{r4, r5, pc}
  400e62:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  400e66:	d105      	bne.n	400e74 <__adddf3+0x230>
  400e68:	0040      	lsls	r0, r0, #1
  400e6a:	4149      	adcs	r1, r1
  400e6c:	bf28      	it	cs
  400e6e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  400e72:	bd30      	pop	{r4, r5, pc}
  400e74:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  400e78:	bf3c      	itt	cc
  400e7a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  400e7e:	bd30      	popcc	{r4, r5, pc}
  400e80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  400e84:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  400e88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400e8c:	f04f 0000 	mov.w	r0, #0
  400e90:	bd30      	pop	{r4, r5, pc}
  400e92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  400e96:	bf1a      	itte	ne
  400e98:	4619      	movne	r1, r3
  400e9a:	4610      	movne	r0, r2
  400e9c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  400ea0:	bf1c      	itt	ne
  400ea2:	460b      	movne	r3, r1
  400ea4:	4602      	movne	r2, r0
  400ea6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  400eaa:	bf06      	itte	eq
  400eac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  400eb0:	ea91 0f03 	teqeq	r1, r3
  400eb4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  400eb8:	bd30      	pop	{r4, r5, pc}
  400eba:	bf00      	nop

00400ebc <__aeabi_ui2d>:
  400ebc:	f090 0f00 	teq	r0, #0
  400ec0:	bf04      	itt	eq
  400ec2:	2100      	moveq	r1, #0
  400ec4:	4770      	bxeq	lr
  400ec6:	b530      	push	{r4, r5, lr}
  400ec8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  400ecc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  400ed0:	f04f 0500 	mov.w	r5, #0
  400ed4:	f04f 0100 	mov.w	r1, #0
  400ed8:	e750      	b.n	400d7c <__adddf3+0x138>
  400eda:	bf00      	nop

00400edc <__aeabi_i2d>:
  400edc:	f090 0f00 	teq	r0, #0
  400ee0:	bf04      	itt	eq
  400ee2:	2100      	moveq	r1, #0
  400ee4:	4770      	bxeq	lr
  400ee6:	b530      	push	{r4, r5, lr}
  400ee8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  400eec:	f104 0432 	add.w	r4, r4, #50	; 0x32
  400ef0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  400ef4:	bf48      	it	mi
  400ef6:	4240      	negmi	r0, r0
  400ef8:	f04f 0100 	mov.w	r1, #0
  400efc:	e73e      	b.n	400d7c <__adddf3+0x138>
  400efe:	bf00      	nop

00400f00 <__aeabi_f2d>:
  400f00:	0042      	lsls	r2, r0, #1
  400f02:	ea4f 01e2 	mov.w	r1, r2, asr #3
  400f06:	ea4f 0131 	mov.w	r1, r1, rrx
  400f0a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  400f0e:	bf1f      	itttt	ne
  400f10:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  400f14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  400f18:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  400f1c:	4770      	bxne	lr
  400f1e:	f092 0f00 	teq	r2, #0
  400f22:	bf14      	ite	ne
  400f24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  400f28:	4770      	bxeq	lr
  400f2a:	b530      	push	{r4, r5, lr}
  400f2c:	f44f 7460 	mov.w	r4, #896	; 0x380
  400f30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  400f34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  400f38:	e720      	b.n	400d7c <__adddf3+0x138>
  400f3a:	bf00      	nop

00400f3c <__aeabi_ul2d>:
  400f3c:	ea50 0201 	orrs.w	r2, r0, r1
  400f40:	bf08      	it	eq
  400f42:	4770      	bxeq	lr
  400f44:	b530      	push	{r4, r5, lr}
  400f46:	f04f 0500 	mov.w	r5, #0
  400f4a:	e00a      	b.n	400f62 <__aeabi_l2d+0x16>

00400f4c <__aeabi_l2d>:
  400f4c:	ea50 0201 	orrs.w	r2, r0, r1
  400f50:	bf08      	it	eq
  400f52:	4770      	bxeq	lr
  400f54:	b530      	push	{r4, r5, lr}
  400f56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  400f5a:	d502      	bpl.n	400f62 <__aeabi_l2d+0x16>
  400f5c:	4240      	negs	r0, r0
  400f5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  400f62:	f44f 6480 	mov.w	r4, #1024	; 0x400
  400f66:	f104 0432 	add.w	r4, r4, #50	; 0x32
  400f6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  400f6e:	f43f aedc 	beq.w	400d2a <__adddf3+0xe6>
  400f72:	f04f 0203 	mov.w	r2, #3
  400f76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  400f7a:	bf18      	it	ne
  400f7c:	3203      	addne	r2, #3
  400f7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  400f82:	bf18      	it	ne
  400f84:	3203      	addne	r2, #3
  400f86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  400f8a:	f1c2 0320 	rsb	r3, r2, #32
  400f8e:	fa00 fc03 	lsl.w	ip, r0, r3
  400f92:	fa20 f002 	lsr.w	r0, r0, r2
  400f96:	fa01 fe03 	lsl.w	lr, r1, r3
  400f9a:	ea40 000e 	orr.w	r0, r0, lr
  400f9e:	fa21 f102 	lsr.w	r1, r1, r2
  400fa2:	4414      	add	r4, r2
  400fa4:	e6c1      	b.n	400d2a <__adddf3+0xe6>
  400fa6:	bf00      	nop

00400fa8 <__aeabi_dmul>:
  400fa8:	b570      	push	{r4, r5, r6, lr}
  400faa:	f04f 0cff 	mov.w	ip, #255	; 0xff
  400fae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  400fb2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  400fb6:	bf1d      	ittte	ne
  400fb8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  400fbc:	ea94 0f0c 	teqne	r4, ip
  400fc0:	ea95 0f0c 	teqne	r5, ip
  400fc4:	f000 f8de 	bleq	401184 <__aeabi_dmul+0x1dc>
  400fc8:	442c      	add	r4, r5
  400fca:	ea81 0603 	eor.w	r6, r1, r3
  400fce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  400fd2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  400fd6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  400fda:	bf18      	it	ne
  400fdc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  400fe0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  400fe8:	d038      	beq.n	40105c <__aeabi_dmul+0xb4>
  400fea:	fba0 ce02 	umull	ip, lr, r0, r2
  400fee:	f04f 0500 	mov.w	r5, #0
  400ff2:	fbe1 e502 	umlal	lr, r5, r1, r2
  400ff6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  400ffa:	fbe0 e503 	umlal	lr, r5, r0, r3
  400ffe:	f04f 0600 	mov.w	r6, #0
  401002:	fbe1 5603 	umlal	r5, r6, r1, r3
  401006:	f09c 0f00 	teq	ip, #0
  40100a:	bf18      	it	ne
  40100c:	f04e 0e01 	orrne.w	lr, lr, #1
  401010:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  401014:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  401018:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40101c:	d204      	bcs.n	401028 <__aeabi_dmul+0x80>
  40101e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  401022:	416d      	adcs	r5, r5
  401024:	eb46 0606 	adc.w	r6, r6, r6
  401028:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40102c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  401030:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  401034:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  401038:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40103c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401040:	bf88      	it	hi
  401042:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401046:	d81e      	bhi.n	401086 <__aeabi_dmul+0xde>
  401048:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40104c:	bf08      	it	eq
  40104e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  401052:	f150 0000 	adcs.w	r0, r0, #0
  401056:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40105a:	bd70      	pop	{r4, r5, r6, pc}
  40105c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  401060:	ea46 0101 	orr.w	r1, r6, r1
  401064:	ea40 0002 	orr.w	r0, r0, r2
  401068:	ea81 0103 	eor.w	r1, r1, r3
  40106c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  401070:	bfc2      	ittt	gt
  401072:	ebd4 050c 	rsbsgt	r5, r4, ip
  401076:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40107a:	bd70      	popgt	{r4, r5, r6, pc}
  40107c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401080:	f04f 0e00 	mov.w	lr, #0
  401084:	3c01      	subs	r4, #1
  401086:	f300 80ab 	bgt.w	4011e0 <__aeabi_dmul+0x238>
  40108a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40108e:	bfde      	ittt	le
  401090:	2000      	movle	r0, #0
  401092:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  401096:	bd70      	pople	{r4, r5, r6, pc}
  401098:	f1c4 0400 	rsb	r4, r4, #0
  40109c:	3c20      	subs	r4, #32
  40109e:	da35      	bge.n	40110c <__aeabi_dmul+0x164>
  4010a0:	340c      	adds	r4, #12
  4010a2:	dc1b      	bgt.n	4010dc <__aeabi_dmul+0x134>
  4010a4:	f104 0414 	add.w	r4, r4, #20
  4010a8:	f1c4 0520 	rsb	r5, r4, #32
  4010ac:	fa00 f305 	lsl.w	r3, r0, r5
  4010b0:	fa20 f004 	lsr.w	r0, r0, r4
  4010b4:	fa01 f205 	lsl.w	r2, r1, r5
  4010b8:	ea40 0002 	orr.w	r0, r0, r2
  4010bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4010c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4010c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4010c8:	fa21 f604 	lsr.w	r6, r1, r4
  4010cc:	eb42 0106 	adc.w	r1, r2, r6
  4010d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4010d4:	bf08      	it	eq
  4010d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4010da:	bd70      	pop	{r4, r5, r6, pc}
  4010dc:	f1c4 040c 	rsb	r4, r4, #12
  4010e0:	f1c4 0520 	rsb	r5, r4, #32
  4010e4:	fa00 f304 	lsl.w	r3, r0, r4
  4010e8:	fa20 f005 	lsr.w	r0, r0, r5
  4010ec:	fa01 f204 	lsl.w	r2, r1, r4
  4010f0:	ea40 0002 	orr.w	r0, r0, r2
  4010f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4010f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4010fc:	f141 0100 	adc.w	r1, r1, #0
  401100:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401104:	bf08      	it	eq
  401106:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40110a:	bd70      	pop	{r4, r5, r6, pc}
  40110c:	f1c4 0520 	rsb	r5, r4, #32
  401110:	fa00 f205 	lsl.w	r2, r0, r5
  401114:	ea4e 0e02 	orr.w	lr, lr, r2
  401118:	fa20 f304 	lsr.w	r3, r0, r4
  40111c:	fa01 f205 	lsl.w	r2, r1, r5
  401120:	ea43 0302 	orr.w	r3, r3, r2
  401124:	fa21 f004 	lsr.w	r0, r1, r4
  401128:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40112c:	fa21 f204 	lsr.w	r2, r1, r4
  401130:	ea20 0002 	bic.w	r0, r0, r2
  401134:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  401138:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40113c:	bf08      	it	eq
  40113e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401142:	bd70      	pop	{r4, r5, r6, pc}
  401144:	f094 0f00 	teq	r4, #0
  401148:	d10f      	bne.n	40116a <__aeabi_dmul+0x1c2>
  40114a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40114e:	0040      	lsls	r0, r0, #1
  401150:	eb41 0101 	adc.w	r1, r1, r1
  401154:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401158:	bf08      	it	eq
  40115a:	3c01      	subeq	r4, #1
  40115c:	d0f7      	beq.n	40114e <__aeabi_dmul+0x1a6>
  40115e:	ea41 0106 	orr.w	r1, r1, r6
  401162:	f095 0f00 	teq	r5, #0
  401166:	bf18      	it	ne
  401168:	4770      	bxne	lr
  40116a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40116e:	0052      	lsls	r2, r2, #1
  401170:	eb43 0303 	adc.w	r3, r3, r3
  401174:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  401178:	bf08      	it	eq
  40117a:	3d01      	subeq	r5, #1
  40117c:	d0f7      	beq.n	40116e <__aeabi_dmul+0x1c6>
  40117e:	ea43 0306 	orr.w	r3, r3, r6
  401182:	4770      	bx	lr
  401184:	ea94 0f0c 	teq	r4, ip
  401188:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40118c:	bf18      	it	ne
  40118e:	ea95 0f0c 	teqne	r5, ip
  401192:	d00c      	beq.n	4011ae <__aeabi_dmul+0x206>
  401194:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401198:	bf18      	it	ne
  40119a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40119e:	d1d1      	bne.n	401144 <__aeabi_dmul+0x19c>
  4011a0:	ea81 0103 	eor.w	r1, r1, r3
  4011a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4011a8:	f04f 0000 	mov.w	r0, #0
  4011ac:	bd70      	pop	{r4, r5, r6, pc}
  4011ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4011b2:	bf06      	itte	eq
  4011b4:	4610      	moveq	r0, r2
  4011b6:	4619      	moveq	r1, r3
  4011b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4011bc:	d019      	beq.n	4011f2 <__aeabi_dmul+0x24a>
  4011be:	ea94 0f0c 	teq	r4, ip
  4011c2:	d102      	bne.n	4011ca <__aeabi_dmul+0x222>
  4011c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4011c8:	d113      	bne.n	4011f2 <__aeabi_dmul+0x24a>
  4011ca:	ea95 0f0c 	teq	r5, ip
  4011ce:	d105      	bne.n	4011dc <__aeabi_dmul+0x234>
  4011d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4011d4:	bf1c      	itt	ne
  4011d6:	4610      	movne	r0, r2
  4011d8:	4619      	movne	r1, r3
  4011da:	d10a      	bne.n	4011f2 <__aeabi_dmul+0x24a>
  4011dc:	ea81 0103 	eor.w	r1, r1, r3
  4011e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4011e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4011e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4011ec:	f04f 0000 	mov.w	r0, #0
  4011f0:	bd70      	pop	{r4, r5, r6, pc}
  4011f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4011f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4011fa:	bd70      	pop	{r4, r5, r6, pc}

004011fc <__aeabi_ddiv>:
  4011fc:	b570      	push	{r4, r5, r6, lr}
  4011fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401202:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401206:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40120a:	bf1d      	ittte	ne
  40120c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401210:	ea94 0f0c 	teqne	r4, ip
  401214:	ea95 0f0c 	teqne	r5, ip
  401218:	f000 f8a7 	bleq	40136a <__aeabi_ddiv+0x16e>
  40121c:	eba4 0405 	sub.w	r4, r4, r5
  401220:	ea81 0e03 	eor.w	lr, r1, r3
  401224:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401228:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40122c:	f000 8088 	beq.w	401340 <__aeabi_ddiv+0x144>
  401230:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401234:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  401238:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40123c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  401240:	ea4f 2202 	mov.w	r2, r2, lsl #8
  401244:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  401248:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40124c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  401250:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  401254:	429d      	cmp	r5, r3
  401256:	bf08      	it	eq
  401258:	4296      	cmpeq	r6, r2
  40125a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40125e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  401262:	d202      	bcs.n	40126a <__aeabi_ddiv+0x6e>
  401264:	085b      	lsrs	r3, r3, #1
  401266:	ea4f 0232 	mov.w	r2, r2, rrx
  40126a:	1ab6      	subs	r6, r6, r2
  40126c:	eb65 0503 	sbc.w	r5, r5, r3
  401270:	085b      	lsrs	r3, r3, #1
  401272:	ea4f 0232 	mov.w	r2, r2, rrx
  401276:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40127a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40127e:	ebb6 0e02 	subs.w	lr, r6, r2
  401282:	eb75 0e03 	sbcs.w	lr, r5, r3
  401286:	bf22      	ittt	cs
  401288:	1ab6      	subcs	r6, r6, r2
  40128a:	4675      	movcs	r5, lr
  40128c:	ea40 000c 	orrcs.w	r0, r0, ip
  401290:	085b      	lsrs	r3, r3, #1
  401292:	ea4f 0232 	mov.w	r2, r2, rrx
  401296:	ebb6 0e02 	subs.w	lr, r6, r2
  40129a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40129e:	bf22      	ittt	cs
  4012a0:	1ab6      	subcs	r6, r6, r2
  4012a2:	4675      	movcs	r5, lr
  4012a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4012a8:	085b      	lsrs	r3, r3, #1
  4012aa:	ea4f 0232 	mov.w	r2, r2, rrx
  4012ae:	ebb6 0e02 	subs.w	lr, r6, r2
  4012b2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4012b6:	bf22      	ittt	cs
  4012b8:	1ab6      	subcs	r6, r6, r2
  4012ba:	4675      	movcs	r5, lr
  4012bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4012c0:	085b      	lsrs	r3, r3, #1
  4012c2:	ea4f 0232 	mov.w	r2, r2, rrx
  4012c6:	ebb6 0e02 	subs.w	lr, r6, r2
  4012ca:	eb75 0e03 	sbcs.w	lr, r5, r3
  4012ce:	bf22      	ittt	cs
  4012d0:	1ab6      	subcs	r6, r6, r2
  4012d2:	4675      	movcs	r5, lr
  4012d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4012d8:	ea55 0e06 	orrs.w	lr, r5, r6
  4012dc:	d018      	beq.n	401310 <__aeabi_ddiv+0x114>
  4012de:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4012e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4012e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4012ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4012ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4012f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4012f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4012fa:	d1c0      	bne.n	40127e <__aeabi_ddiv+0x82>
  4012fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401300:	d10b      	bne.n	40131a <__aeabi_ddiv+0x11e>
  401302:	ea41 0100 	orr.w	r1, r1, r0
  401306:	f04f 0000 	mov.w	r0, #0
  40130a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40130e:	e7b6      	b.n	40127e <__aeabi_ddiv+0x82>
  401310:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401314:	bf04      	itt	eq
  401316:	4301      	orreq	r1, r0
  401318:	2000      	moveq	r0, #0
  40131a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40131e:	bf88      	it	hi
  401320:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401324:	f63f aeaf 	bhi.w	401086 <__aeabi_dmul+0xde>
  401328:	ebb5 0c03 	subs.w	ip, r5, r3
  40132c:	bf04      	itt	eq
  40132e:	ebb6 0c02 	subseq.w	ip, r6, r2
  401332:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401336:	f150 0000 	adcs.w	r0, r0, #0
  40133a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40133e:	bd70      	pop	{r4, r5, r6, pc}
  401340:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  401344:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  401348:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40134c:	bfc2      	ittt	gt
  40134e:	ebd4 050c 	rsbsgt	r5, r4, ip
  401352:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401356:	bd70      	popgt	{r4, r5, r6, pc}
  401358:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40135c:	f04f 0e00 	mov.w	lr, #0
  401360:	3c01      	subs	r4, #1
  401362:	e690      	b.n	401086 <__aeabi_dmul+0xde>
  401364:	ea45 0e06 	orr.w	lr, r5, r6
  401368:	e68d      	b.n	401086 <__aeabi_dmul+0xde>
  40136a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40136e:	ea94 0f0c 	teq	r4, ip
  401372:	bf08      	it	eq
  401374:	ea95 0f0c 	teqeq	r5, ip
  401378:	f43f af3b 	beq.w	4011f2 <__aeabi_dmul+0x24a>
  40137c:	ea94 0f0c 	teq	r4, ip
  401380:	d10a      	bne.n	401398 <__aeabi_ddiv+0x19c>
  401382:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401386:	f47f af34 	bne.w	4011f2 <__aeabi_dmul+0x24a>
  40138a:	ea95 0f0c 	teq	r5, ip
  40138e:	f47f af25 	bne.w	4011dc <__aeabi_dmul+0x234>
  401392:	4610      	mov	r0, r2
  401394:	4619      	mov	r1, r3
  401396:	e72c      	b.n	4011f2 <__aeabi_dmul+0x24a>
  401398:	ea95 0f0c 	teq	r5, ip
  40139c:	d106      	bne.n	4013ac <__aeabi_ddiv+0x1b0>
  40139e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4013a2:	f43f aefd 	beq.w	4011a0 <__aeabi_dmul+0x1f8>
  4013a6:	4610      	mov	r0, r2
  4013a8:	4619      	mov	r1, r3
  4013aa:	e722      	b.n	4011f2 <__aeabi_dmul+0x24a>
  4013ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4013b0:	bf18      	it	ne
  4013b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4013b6:	f47f aec5 	bne.w	401144 <__aeabi_dmul+0x19c>
  4013ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4013be:	f47f af0d 	bne.w	4011dc <__aeabi_dmul+0x234>
  4013c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4013c6:	f47f aeeb 	bne.w	4011a0 <__aeabi_dmul+0x1f8>
  4013ca:	e712      	b.n	4011f2 <__aeabi_dmul+0x24a>

004013cc <__gedf2>:
  4013cc:	f04f 3cff 	mov.w	ip, #4294967295
  4013d0:	e006      	b.n	4013e0 <__cmpdf2+0x4>
  4013d2:	bf00      	nop

004013d4 <__ledf2>:
  4013d4:	f04f 0c01 	mov.w	ip, #1
  4013d8:	e002      	b.n	4013e0 <__cmpdf2+0x4>
  4013da:	bf00      	nop

004013dc <__cmpdf2>:
  4013dc:	f04f 0c01 	mov.w	ip, #1
  4013e0:	f84d cd04 	str.w	ip, [sp, #-4]!
  4013e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4013e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4013ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4013f0:	bf18      	it	ne
  4013f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4013f6:	d01b      	beq.n	401430 <__cmpdf2+0x54>
  4013f8:	b001      	add	sp, #4
  4013fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4013fe:	bf0c      	ite	eq
  401400:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  401404:	ea91 0f03 	teqne	r1, r3
  401408:	bf02      	ittt	eq
  40140a:	ea90 0f02 	teqeq	r0, r2
  40140e:	2000      	moveq	r0, #0
  401410:	4770      	bxeq	lr
  401412:	f110 0f00 	cmn.w	r0, #0
  401416:	ea91 0f03 	teq	r1, r3
  40141a:	bf58      	it	pl
  40141c:	4299      	cmppl	r1, r3
  40141e:	bf08      	it	eq
  401420:	4290      	cmpeq	r0, r2
  401422:	bf2c      	ite	cs
  401424:	17d8      	asrcs	r0, r3, #31
  401426:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40142a:	f040 0001 	orr.w	r0, r0, #1
  40142e:	4770      	bx	lr
  401430:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  401434:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  401438:	d102      	bne.n	401440 <__cmpdf2+0x64>
  40143a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40143e:	d107      	bne.n	401450 <__cmpdf2+0x74>
  401440:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  401444:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  401448:	d1d6      	bne.n	4013f8 <__cmpdf2+0x1c>
  40144a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40144e:	d0d3      	beq.n	4013f8 <__cmpdf2+0x1c>
  401450:	f85d 0b04 	ldr.w	r0, [sp], #4
  401454:	4770      	bx	lr
  401456:	bf00      	nop

00401458 <__aeabi_cdrcmple>:
  401458:	4684      	mov	ip, r0
  40145a:	4610      	mov	r0, r2
  40145c:	4662      	mov	r2, ip
  40145e:	468c      	mov	ip, r1
  401460:	4619      	mov	r1, r3
  401462:	4663      	mov	r3, ip
  401464:	e000      	b.n	401468 <__aeabi_cdcmpeq>
  401466:	bf00      	nop

00401468 <__aeabi_cdcmpeq>:
  401468:	b501      	push	{r0, lr}
  40146a:	f7ff ffb7 	bl	4013dc <__cmpdf2>
  40146e:	2800      	cmp	r0, #0
  401470:	bf48      	it	mi
  401472:	f110 0f00 	cmnmi.w	r0, #0
  401476:	bd01      	pop	{r0, pc}

00401478 <__aeabi_dcmpeq>:
  401478:	f84d ed08 	str.w	lr, [sp, #-8]!
  40147c:	f7ff fff4 	bl	401468 <__aeabi_cdcmpeq>
  401480:	bf0c      	ite	eq
  401482:	2001      	moveq	r0, #1
  401484:	2000      	movne	r0, #0
  401486:	f85d fb08 	ldr.w	pc, [sp], #8
  40148a:	bf00      	nop

0040148c <__aeabi_dcmplt>:
  40148c:	f84d ed08 	str.w	lr, [sp, #-8]!
  401490:	f7ff ffea 	bl	401468 <__aeabi_cdcmpeq>
  401494:	bf34      	ite	cc
  401496:	2001      	movcc	r0, #1
  401498:	2000      	movcs	r0, #0
  40149a:	f85d fb08 	ldr.w	pc, [sp], #8
  40149e:	bf00      	nop

004014a0 <__aeabi_dcmple>:
  4014a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4014a4:	f7ff ffe0 	bl	401468 <__aeabi_cdcmpeq>
  4014a8:	bf94      	ite	ls
  4014aa:	2001      	movls	r0, #1
  4014ac:	2000      	movhi	r0, #0
  4014ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4014b2:	bf00      	nop

004014b4 <__aeabi_dcmpge>:
  4014b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4014b8:	f7ff ffce 	bl	401458 <__aeabi_cdrcmple>
  4014bc:	bf94      	ite	ls
  4014be:	2001      	movls	r0, #1
  4014c0:	2000      	movhi	r0, #0
  4014c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4014c6:	bf00      	nop

004014c8 <__aeabi_dcmpgt>:
  4014c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4014cc:	f7ff ffc4 	bl	401458 <__aeabi_cdrcmple>
  4014d0:	bf34      	ite	cc
  4014d2:	2001      	movcc	r0, #1
  4014d4:	2000      	movcs	r0, #0
  4014d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4014da:	bf00      	nop

004014dc <__aeabi_d2iz>:
  4014dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4014e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4014e4:	d215      	bcs.n	401512 <__aeabi_d2iz+0x36>
  4014e6:	d511      	bpl.n	40150c <__aeabi_d2iz+0x30>
  4014e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4014ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4014f0:	d912      	bls.n	401518 <__aeabi_d2iz+0x3c>
  4014f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4014f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4014fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4014fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401502:	fa23 f002 	lsr.w	r0, r3, r2
  401506:	bf18      	it	ne
  401508:	4240      	negne	r0, r0
  40150a:	4770      	bx	lr
  40150c:	f04f 0000 	mov.w	r0, #0
  401510:	4770      	bx	lr
  401512:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  401516:	d105      	bne.n	401524 <__aeabi_d2iz+0x48>
  401518:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40151c:	bf08      	it	eq
  40151e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  401522:	4770      	bx	lr
  401524:	f04f 0000 	mov.w	r0, #0
  401528:	4770      	bx	lr
  40152a:	bf00      	nop

0040152c <__aeabi_d2f>:
  40152c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  401530:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  401534:	bf24      	itt	cs
  401536:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40153a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40153e:	d90d      	bls.n	40155c <__aeabi_d2f+0x30>
  401540:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  401544:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  401548:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40154c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  401550:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  401554:	bf08      	it	eq
  401556:	f020 0001 	biceq.w	r0, r0, #1
  40155a:	4770      	bx	lr
  40155c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  401560:	d121      	bne.n	4015a6 <__aeabi_d2f+0x7a>
  401562:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  401566:	bfbc      	itt	lt
  401568:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40156c:	4770      	bxlt	lr
  40156e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401572:	ea4f 5252 	mov.w	r2, r2, lsr #21
  401576:	f1c2 0218 	rsb	r2, r2, #24
  40157a:	f1c2 0c20 	rsb	ip, r2, #32
  40157e:	fa10 f30c 	lsls.w	r3, r0, ip
  401582:	fa20 f002 	lsr.w	r0, r0, r2
  401586:	bf18      	it	ne
  401588:	f040 0001 	orrne.w	r0, r0, #1
  40158c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  401590:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  401594:	fa03 fc0c 	lsl.w	ip, r3, ip
  401598:	ea40 000c 	orr.w	r0, r0, ip
  40159c:	fa23 f302 	lsr.w	r3, r3, r2
  4015a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4015a4:	e7cc      	b.n	401540 <__aeabi_d2f+0x14>
  4015a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4015aa:	d107      	bne.n	4015bc <__aeabi_d2f+0x90>
  4015ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4015b0:	bf1e      	ittt	ne
  4015b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4015b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4015ba:	4770      	bxne	lr
  4015bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4015c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4015c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4015c8:	4770      	bx	lr
  4015ca:	bf00      	nop

004015cc <__aeabi_frsub>:
  4015cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  4015d0:	e002      	b.n	4015d8 <__addsf3>
  4015d2:	bf00      	nop

004015d4 <__aeabi_fsub>:
  4015d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

004015d8 <__addsf3>:
  4015d8:	0042      	lsls	r2, r0, #1
  4015da:	bf1f      	itttt	ne
  4015dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  4015e0:	ea92 0f03 	teqne	r2, r3
  4015e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  4015e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4015ec:	d06a      	beq.n	4016c4 <__addsf3+0xec>
  4015ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4015f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  4015f6:	bfc1      	itttt	gt
  4015f8:	18d2      	addgt	r2, r2, r3
  4015fa:	4041      	eorgt	r1, r0
  4015fc:	4048      	eorgt	r0, r1
  4015fe:	4041      	eorgt	r1, r0
  401600:	bfb8      	it	lt
  401602:	425b      	neglt	r3, r3
  401604:	2b19      	cmp	r3, #25
  401606:	bf88      	it	hi
  401608:	4770      	bxhi	lr
  40160a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40160e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  401612:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  401616:	bf18      	it	ne
  401618:	4240      	negne	r0, r0
  40161a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40161e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  401622:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  401626:	bf18      	it	ne
  401628:	4249      	negne	r1, r1
  40162a:	ea92 0f03 	teq	r2, r3
  40162e:	d03f      	beq.n	4016b0 <__addsf3+0xd8>
  401630:	f1a2 0201 	sub.w	r2, r2, #1
  401634:	fa41 fc03 	asr.w	ip, r1, r3
  401638:	eb10 000c 	adds.w	r0, r0, ip
  40163c:	f1c3 0320 	rsb	r3, r3, #32
  401640:	fa01 f103 	lsl.w	r1, r1, r3
  401644:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  401648:	d502      	bpl.n	401650 <__addsf3+0x78>
  40164a:	4249      	negs	r1, r1
  40164c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  401650:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  401654:	d313      	bcc.n	40167e <__addsf3+0xa6>
  401656:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40165a:	d306      	bcc.n	40166a <__addsf3+0x92>
  40165c:	0840      	lsrs	r0, r0, #1
  40165e:	ea4f 0131 	mov.w	r1, r1, rrx
  401662:	f102 0201 	add.w	r2, r2, #1
  401666:	2afe      	cmp	r2, #254	; 0xfe
  401668:	d251      	bcs.n	40170e <__addsf3+0x136>
  40166a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40166e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  401672:	bf08      	it	eq
  401674:	f020 0001 	biceq.w	r0, r0, #1
  401678:	ea40 0003 	orr.w	r0, r0, r3
  40167c:	4770      	bx	lr
  40167e:	0049      	lsls	r1, r1, #1
  401680:	eb40 0000 	adc.w	r0, r0, r0
  401684:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  401688:	f1a2 0201 	sub.w	r2, r2, #1
  40168c:	d1ed      	bne.n	40166a <__addsf3+0x92>
  40168e:	fab0 fc80 	clz	ip, r0
  401692:	f1ac 0c08 	sub.w	ip, ip, #8
  401696:	ebb2 020c 	subs.w	r2, r2, ip
  40169a:	fa00 f00c 	lsl.w	r0, r0, ip
  40169e:	bfaa      	itet	ge
  4016a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  4016a4:	4252      	neglt	r2, r2
  4016a6:	4318      	orrge	r0, r3
  4016a8:	bfbc      	itt	lt
  4016aa:	40d0      	lsrlt	r0, r2
  4016ac:	4318      	orrlt	r0, r3
  4016ae:	4770      	bx	lr
  4016b0:	f092 0f00 	teq	r2, #0
  4016b4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  4016b8:	bf06      	itte	eq
  4016ba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  4016be:	3201      	addeq	r2, #1
  4016c0:	3b01      	subne	r3, #1
  4016c2:	e7b5      	b.n	401630 <__addsf3+0x58>
  4016c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4016c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4016cc:	bf18      	it	ne
  4016ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4016d2:	d021      	beq.n	401718 <__addsf3+0x140>
  4016d4:	ea92 0f03 	teq	r2, r3
  4016d8:	d004      	beq.n	4016e4 <__addsf3+0x10c>
  4016da:	f092 0f00 	teq	r2, #0
  4016de:	bf08      	it	eq
  4016e0:	4608      	moveq	r0, r1
  4016e2:	4770      	bx	lr
  4016e4:	ea90 0f01 	teq	r0, r1
  4016e8:	bf1c      	itt	ne
  4016ea:	2000      	movne	r0, #0
  4016ec:	4770      	bxne	lr
  4016ee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  4016f2:	d104      	bne.n	4016fe <__addsf3+0x126>
  4016f4:	0040      	lsls	r0, r0, #1
  4016f6:	bf28      	it	cs
  4016f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  4016fc:	4770      	bx	lr
  4016fe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  401702:	bf3c      	itt	cc
  401704:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  401708:	4770      	bxcc	lr
  40170a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40170e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  401712:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  401716:	4770      	bx	lr
  401718:	ea7f 6222 	mvns.w	r2, r2, asr #24
  40171c:	bf16      	itet	ne
  40171e:	4608      	movne	r0, r1
  401720:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  401724:	4601      	movne	r1, r0
  401726:	0242      	lsls	r2, r0, #9
  401728:	bf06      	itte	eq
  40172a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40172e:	ea90 0f01 	teqeq	r0, r1
  401732:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  401736:	4770      	bx	lr

00401738 <__aeabi_ui2f>:
  401738:	f04f 0300 	mov.w	r3, #0
  40173c:	e004      	b.n	401748 <__aeabi_i2f+0x8>
  40173e:	bf00      	nop

00401740 <__aeabi_i2f>:
  401740:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  401744:	bf48      	it	mi
  401746:	4240      	negmi	r0, r0
  401748:	ea5f 0c00 	movs.w	ip, r0
  40174c:	bf08      	it	eq
  40174e:	4770      	bxeq	lr
  401750:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  401754:	4601      	mov	r1, r0
  401756:	f04f 0000 	mov.w	r0, #0
  40175a:	e01c      	b.n	401796 <__aeabi_l2f+0x2a>

0040175c <__aeabi_ul2f>:
  40175c:	ea50 0201 	orrs.w	r2, r0, r1
  401760:	bf08      	it	eq
  401762:	4770      	bxeq	lr
  401764:	f04f 0300 	mov.w	r3, #0
  401768:	e00a      	b.n	401780 <__aeabi_l2f+0x14>
  40176a:	bf00      	nop

0040176c <__aeabi_l2f>:
  40176c:	ea50 0201 	orrs.w	r2, r0, r1
  401770:	bf08      	it	eq
  401772:	4770      	bxeq	lr
  401774:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  401778:	d502      	bpl.n	401780 <__aeabi_l2f+0x14>
  40177a:	4240      	negs	r0, r0
  40177c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401780:	ea5f 0c01 	movs.w	ip, r1
  401784:	bf02      	ittt	eq
  401786:	4684      	moveq	ip, r0
  401788:	4601      	moveq	r1, r0
  40178a:	2000      	moveq	r0, #0
  40178c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  401790:	bf08      	it	eq
  401792:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  401796:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40179a:	fabc f28c 	clz	r2, ip
  40179e:	3a08      	subs	r2, #8
  4017a0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  4017a4:	db10      	blt.n	4017c8 <__aeabi_l2f+0x5c>
  4017a6:	fa01 fc02 	lsl.w	ip, r1, r2
  4017aa:	4463      	add	r3, ip
  4017ac:	fa00 fc02 	lsl.w	ip, r0, r2
  4017b0:	f1c2 0220 	rsb	r2, r2, #32
  4017b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4017b8:	fa20 f202 	lsr.w	r2, r0, r2
  4017bc:	eb43 0002 	adc.w	r0, r3, r2
  4017c0:	bf08      	it	eq
  4017c2:	f020 0001 	biceq.w	r0, r0, #1
  4017c6:	4770      	bx	lr
  4017c8:	f102 0220 	add.w	r2, r2, #32
  4017cc:	fa01 fc02 	lsl.w	ip, r1, r2
  4017d0:	f1c2 0220 	rsb	r2, r2, #32
  4017d4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  4017d8:	fa21 f202 	lsr.w	r2, r1, r2
  4017dc:	eb43 0002 	adc.w	r0, r3, r2
  4017e0:	bf08      	it	eq
  4017e2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4017e6:	4770      	bx	lr

004017e8 <__aeabi_fmul>:
  4017e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4017ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4017f0:	bf1e      	ittt	ne
  4017f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4017f6:	ea92 0f0c 	teqne	r2, ip
  4017fa:	ea93 0f0c 	teqne	r3, ip
  4017fe:	d06f      	beq.n	4018e0 <__aeabi_fmul+0xf8>
  401800:	441a      	add	r2, r3
  401802:	ea80 0c01 	eor.w	ip, r0, r1
  401806:	0240      	lsls	r0, r0, #9
  401808:	bf18      	it	ne
  40180a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  40180e:	d01e      	beq.n	40184e <__aeabi_fmul+0x66>
  401810:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  401814:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  401818:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  40181c:	fba0 3101 	umull	r3, r1, r0, r1
  401820:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  401824:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  401828:	bf3e      	ittt	cc
  40182a:	0049      	lslcc	r1, r1, #1
  40182c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  401830:	005b      	lslcc	r3, r3, #1
  401832:	ea40 0001 	orr.w	r0, r0, r1
  401836:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40183a:	2afd      	cmp	r2, #253	; 0xfd
  40183c:	d81d      	bhi.n	40187a <__aeabi_fmul+0x92>
  40183e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  401842:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  401846:	bf08      	it	eq
  401848:	f020 0001 	biceq.w	r0, r0, #1
  40184c:	4770      	bx	lr
  40184e:	f090 0f00 	teq	r0, #0
  401852:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  401856:	bf08      	it	eq
  401858:	0249      	lsleq	r1, r1, #9
  40185a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40185e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  401862:	3a7f      	subs	r2, #127	; 0x7f
  401864:	bfc2      	ittt	gt
  401866:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40186a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40186e:	4770      	bxgt	lr
  401870:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  401874:	f04f 0300 	mov.w	r3, #0
  401878:	3a01      	subs	r2, #1
  40187a:	dc5d      	bgt.n	401938 <__aeabi_fmul+0x150>
  40187c:	f112 0f19 	cmn.w	r2, #25
  401880:	bfdc      	itt	le
  401882:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  401886:	4770      	bxle	lr
  401888:	f1c2 0200 	rsb	r2, r2, #0
  40188c:	0041      	lsls	r1, r0, #1
  40188e:	fa21 f102 	lsr.w	r1, r1, r2
  401892:	f1c2 0220 	rsb	r2, r2, #32
  401896:	fa00 fc02 	lsl.w	ip, r0, r2
  40189a:	ea5f 0031 	movs.w	r0, r1, rrx
  40189e:	f140 0000 	adc.w	r0, r0, #0
  4018a2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  4018a6:	bf08      	it	eq
  4018a8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4018ac:	4770      	bx	lr
  4018ae:	f092 0f00 	teq	r2, #0
  4018b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4018b6:	bf02      	ittt	eq
  4018b8:	0040      	lsleq	r0, r0, #1
  4018ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4018be:	3a01      	subeq	r2, #1
  4018c0:	d0f9      	beq.n	4018b6 <__aeabi_fmul+0xce>
  4018c2:	ea40 000c 	orr.w	r0, r0, ip
  4018c6:	f093 0f00 	teq	r3, #0
  4018ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4018ce:	bf02      	ittt	eq
  4018d0:	0049      	lsleq	r1, r1, #1
  4018d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4018d6:	3b01      	subeq	r3, #1
  4018d8:	d0f9      	beq.n	4018ce <__aeabi_fmul+0xe6>
  4018da:	ea41 010c 	orr.w	r1, r1, ip
  4018de:	e78f      	b.n	401800 <__aeabi_fmul+0x18>
  4018e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4018e4:	ea92 0f0c 	teq	r2, ip
  4018e8:	bf18      	it	ne
  4018ea:	ea93 0f0c 	teqne	r3, ip
  4018ee:	d00a      	beq.n	401906 <__aeabi_fmul+0x11e>
  4018f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4018f4:	bf18      	it	ne
  4018f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4018fa:	d1d8      	bne.n	4018ae <__aeabi_fmul+0xc6>
  4018fc:	ea80 0001 	eor.w	r0, r0, r1
  401900:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  401904:	4770      	bx	lr
  401906:	f090 0f00 	teq	r0, #0
  40190a:	bf17      	itett	ne
  40190c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  401910:	4608      	moveq	r0, r1
  401912:	f091 0f00 	teqne	r1, #0
  401916:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  40191a:	d014      	beq.n	401946 <__aeabi_fmul+0x15e>
  40191c:	ea92 0f0c 	teq	r2, ip
  401920:	d101      	bne.n	401926 <__aeabi_fmul+0x13e>
  401922:	0242      	lsls	r2, r0, #9
  401924:	d10f      	bne.n	401946 <__aeabi_fmul+0x15e>
  401926:	ea93 0f0c 	teq	r3, ip
  40192a:	d103      	bne.n	401934 <__aeabi_fmul+0x14c>
  40192c:	024b      	lsls	r3, r1, #9
  40192e:	bf18      	it	ne
  401930:	4608      	movne	r0, r1
  401932:	d108      	bne.n	401946 <__aeabi_fmul+0x15e>
  401934:	ea80 0001 	eor.w	r0, r0, r1
  401938:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40193c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  401940:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  401944:	4770      	bx	lr
  401946:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40194a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  40194e:	4770      	bx	lr

00401950 <__aeabi_fdiv>:
  401950:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401954:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  401958:	bf1e      	ittt	ne
  40195a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40195e:	ea92 0f0c 	teqne	r2, ip
  401962:	ea93 0f0c 	teqne	r3, ip
  401966:	d069      	beq.n	401a3c <__aeabi_fdiv+0xec>
  401968:	eba2 0203 	sub.w	r2, r2, r3
  40196c:	ea80 0c01 	eor.w	ip, r0, r1
  401970:	0249      	lsls	r1, r1, #9
  401972:	ea4f 2040 	mov.w	r0, r0, lsl #9
  401976:	d037      	beq.n	4019e8 <__aeabi_fdiv+0x98>
  401978:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40197c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  401980:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  401984:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  401988:	428b      	cmp	r3, r1
  40198a:	bf38      	it	cc
  40198c:	005b      	lslcc	r3, r3, #1
  40198e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  401992:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  401996:	428b      	cmp	r3, r1
  401998:	bf24      	itt	cs
  40199a:	1a5b      	subcs	r3, r3, r1
  40199c:	ea40 000c 	orrcs.w	r0, r0, ip
  4019a0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  4019a4:	bf24      	itt	cs
  4019a6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  4019aa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4019ae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  4019b2:	bf24      	itt	cs
  4019b4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  4019b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4019bc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  4019c0:	bf24      	itt	cs
  4019c2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  4019c6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4019ca:	011b      	lsls	r3, r3, #4
  4019cc:	bf18      	it	ne
  4019ce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  4019d2:	d1e0      	bne.n	401996 <__aeabi_fdiv+0x46>
  4019d4:	2afd      	cmp	r2, #253	; 0xfd
  4019d6:	f63f af50 	bhi.w	40187a <__aeabi_fmul+0x92>
  4019da:	428b      	cmp	r3, r1
  4019dc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4019e0:	bf08      	it	eq
  4019e2:	f020 0001 	biceq.w	r0, r0, #1
  4019e6:	4770      	bx	lr
  4019e8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4019ec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4019f0:	327f      	adds	r2, #127	; 0x7f
  4019f2:	bfc2      	ittt	gt
  4019f4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4019f8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4019fc:	4770      	bxgt	lr
  4019fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  401a02:	f04f 0300 	mov.w	r3, #0
  401a06:	3a01      	subs	r2, #1
  401a08:	e737      	b.n	40187a <__aeabi_fmul+0x92>
  401a0a:	f092 0f00 	teq	r2, #0
  401a0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  401a12:	bf02      	ittt	eq
  401a14:	0040      	lsleq	r0, r0, #1
  401a16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  401a1a:	3a01      	subeq	r2, #1
  401a1c:	d0f9      	beq.n	401a12 <__aeabi_fdiv+0xc2>
  401a1e:	ea40 000c 	orr.w	r0, r0, ip
  401a22:	f093 0f00 	teq	r3, #0
  401a26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  401a2a:	bf02      	ittt	eq
  401a2c:	0049      	lsleq	r1, r1, #1
  401a2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  401a32:	3b01      	subeq	r3, #1
  401a34:	d0f9      	beq.n	401a2a <__aeabi_fdiv+0xda>
  401a36:	ea41 010c 	orr.w	r1, r1, ip
  401a3a:	e795      	b.n	401968 <__aeabi_fdiv+0x18>
  401a3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  401a40:	ea92 0f0c 	teq	r2, ip
  401a44:	d108      	bne.n	401a58 <__aeabi_fdiv+0x108>
  401a46:	0242      	lsls	r2, r0, #9
  401a48:	f47f af7d 	bne.w	401946 <__aeabi_fmul+0x15e>
  401a4c:	ea93 0f0c 	teq	r3, ip
  401a50:	f47f af70 	bne.w	401934 <__aeabi_fmul+0x14c>
  401a54:	4608      	mov	r0, r1
  401a56:	e776      	b.n	401946 <__aeabi_fmul+0x15e>
  401a58:	ea93 0f0c 	teq	r3, ip
  401a5c:	d104      	bne.n	401a68 <__aeabi_fdiv+0x118>
  401a5e:	024b      	lsls	r3, r1, #9
  401a60:	f43f af4c 	beq.w	4018fc <__aeabi_fmul+0x114>
  401a64:	4608      	mov	r0, r1
  401a66:	e76e      	b.n	401946 <__aeabi_fmul+0x15e>
  401a68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  401a6c:	bf18      	it	ne
  401a6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  401a72:	d1ca      	bne.n	401a0a <__aeabi_fdiv+0xba>
  401a74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  401a78:	f47f af5c 	bne.w	401934 <__aeabi_fmul+0x14c>
  401a7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  401a80:	f47f af3c 	bne.w	4018fc <__aeabi_fmul+0x114>
  401a84:	e75f      	b.n	401946 <__aeabi_fmul+0x15e>
  401a86:	bf00      	nop

00401a88 <__libc_init_array>:
  401a88:	b570      	push	{r4, r5, r6, lr}
  401a8a:	4e0f      	ldr	r6, [pc, #60]	; (401ac8 <__libc_init_array+0x40>)
  401a8c:	4d0f      	ldr	r5, [pc, #60]	; (401acc <__libc_init_array+0x44>)
  401a8e:	1b76      	subs	r6, r6, r5
  401a90:	10b6      	asrs	r6, r6, #2
  401a92:	bf18      	it	ne
  401a94:	2400      	movne	r4, #0
  401a96:	d005      	beq.n	401aa4 <__libc_init_array+0x1c>
  401a98:	3401      	adds	r4, #1
  401a9a:	f855 3b04 	ldr.w	r3, [r5], #4
  401a9e:	4798      	blx	r3
  401aa0:	42a6      	cmp	r6, r4
  401aa2:	d1f9      	bne.n	401a98 <__libc_init_array+0x10>
  401aa4:	4e0a      	ldr	r6, [pc, #40]	; (401ad0 <__libc_init_array+0x48>)
  401aa6:	4d0b      	ldr	r5, [pc, #44]	; (401ad4 <__libc_init_array+0x4c>)
  401aa8:	f000 fd40 	bl	40252c <_init>
  401aac:	1b76      	subs	r6, r6, r5
  401aae:	10b6      	asrs	r6, r6, #2
  401ab0:	bf18      	it	ne
  401ab2:	2400      	movne	r4, #0
  401ab4:	d006      	beq.n	401ac4 <__libc_init_array+0x3c>
  401ab6:	3401      	adds	r4, #1
  401ab8:	f855 3b04 	ldr.w	r3, [r5], #4
  401abc:	4798      	blx	r3
  401abe:	42a6      	cmp	r6, r4
  401ac0:	d1f9      	bne.n	401ab6 <__libc_init_array+0x2e>
  401ac2:	bd70      	pop	{r4, r5, r6, pc}
  401ac4:	bd70      	pop	{r4, r5, r6, pc}
  401ac6:	bf00      	nop
  401ac8:	00402538 	.word	0x00402538
  401acc:	00402538 	.word	0x00402538
  401ad0:	00402540 	.word	0x00402540
  401ad4:	00402538 	.word	0x00402538

00401ad8 <__itoa>:
  401ad8:	1e93      	subs	r3, r2, #2
  401ada:	2b22      	cmp	r3, #34	; 0x22
  401adc:	d810      	bhi.n	401b00 <__itoa+0x28>
  401ade:	2a0a      	cmp	r2, #10
  401ae0:	b510      	push	{r4, lr}
  401ae2:	d006      	beq.n	401af2 <__itoa+0x1a>
  401ae4:	2300      	movs	r3, #0
  401ae6:	460c      	mov	r4, r1
  401ae8:	4419      	add	r1, r3
  401aea:	f000 fa73 	bl	401fd4 <__utoa>
  401aee:	4620      	mov	r0, r4
  401af0:	bd10      	pop	{r4, pc}
  401af2:	2800      	cmp	r0, #0
  401af4:	daf6      	bge.n	401ae4 <__itoa+0xc>
  401af6:	232d      	movs	r3, #45	; 0x2d
  401af8:	4240      	negs	r0, r0
  401afa:	700b      	strb	r3, [r1, #0]
  401afc:	2301      	movs	r3, #1
  401afe:	e7f2      	b.n	401ae6 <__itoa+0xe>
  401b00:	2000      	movs	r0, #0
  401b02:	7008      	strb	r0, [r1, #0]
  401b04:	4770      	bx	lr
  401b06:	bf00      	nop

00401b08 <itoa>:
  401b08:	f7ff bfe6 	b.w	401ad8 <__itoa>

00401b0c <critical_factorization>:
  401b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401b10:	f04f 0e01 	mov.w	lr, #1
  401b14:	2500      	movs	r5, #0
  401b16:	4674      	mov	r4, lr
  401b18:	f04f 36ff 	mov.w	r6, #4294967295
  401b1c:	192b      	adds	r3, r5, r4
  401b1e:	428b      	cmp	r3, r1
  401b20:	eb00 0706 	add.w	r7, r0, r6
  401b24:	d20d      	bcs.n	401b42 <critical_factorization+0x36>
  401b26:	5d3f      	ldrb	r7, [r7, r4]
  401b28:	f810 c003 	ldrb.w	ip, [r0, r3]
  401b2c:	45bc      	cmp	ip, r7
  401b2e:	d22d      	bcs.n	401b8c <critical_factorization+0x80>
  401b30:	461d      	mov	r5, r3
  401b32:	2401      	movs	r4, #1
  401b34:	eba3 0e06 	sub.w	lr, r3, r6
  401b38:	192b      	adds	r3, r5, r4
  401b3a:	428b      	cmp	r3, r1
  401b3c:	eb00 0706 	add.w	r7, r0, r6
  401b40:	d3f1      	bcc.n	401b26 <critical_factorization+0x1a>
  401b42:	f04f 0801 	mov.w	r8, #1
  401b46:	2500      	movs	r5, #0
  401b48:	4644      	mov	r4, r8
  401b4a:	f04f 37ff 	mov.w	r7, #4294967295
  401b4e:	f8c2 e000 	str.w	lr, [r2]
  401b52:	192b      	adds	r3, r5, r4
  401b54:	4299      	cmp	r1, r3
  401b56:	eb00 0e07 	add.w	lr, r0, r7
  401b5a:	d90e      	bls.n	401b7a <critical_factorization+0x6e>
  401b5c:	f81e e004 	ldrb.w	lr, [lr, r4]
  401b60:	f810 c003 	ldrb.w	ip, [r0, r3]
  401b64:	45f4      	cmp	ip, lr
  401b66:	d918      	bls.n	401b9a <critical_factorization+0x8e>
  401b68:	461d      	mov	r5, r3
  401b6a:	2401      	movs	r4, #1
  401b6c:	eba3 0807 	sub.w	r8, r3, r7
  401b70:	192b      	adds	r3, r5, r4
  401b72:	4299      	cmp	r1, r3
  401b74:	eb00 0e07 	add.w	lr, r0, r7
  401b78:	d8f0      	bhi.n	401b5c <critical_factorization+0x50>
  401b7a:	3701      	adds	r7, #1
  401b7c:	1c70      	adds	r0, r6, #1
  401b7e:	4287      	cmp	r7, r0
  401b80:	bf24      	itt	cs
  401b82:	4638      	movcs	r0, r7
  401b84:	f8c2 8000 	strcs.w	r8, [r2]
  401b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401b8c:	d00c      	beq.n	401ba8 <critical_factorization+0x9c>
  401b8e:	f04f 0e01 	mov.w	lr, #1
  401b92:	462e      	mov	r6, r5
  401b94:	4674      	mov	r4, lr
  401b96:	4475      	add	r5, lr
  401b98:	e7c0      	b.n	401b1c <critical_factorization+0x10>
  401b9a:	d00b      	beq.n	401bb4 <critical_factorization+0xa8>
  401b9c:	f04f 0801 	mov.w	r8, #1
  401ba0:	462f      	mov	r7, r5
  401ba2:	4644      	mov	r4, r8
  401ba4:	4445      	add	r5, r8
  401ba6:	e7d4      	b.n	401b52 <critical_factorization+0x46>
  401ba8:	4574      	cmp	r4, lr
  401baa:	bf12      	itee	ne
  401bac:	3401      	addne	r4, #1
  401bae:	461d      	moveq	r5, r3
  401bb0:	2401      	moveq	r4, #1
  401bb2:	e7b3      	b.n	401b1c <critical_factorization+0x10>
  401bb4:	4544      	cmp	r4, r8
  401bb6:	bf12      	itee	ne
  401bb8:	3401      	addne	r4, #1
  401bba:	461d      	moveq	r5, r3
  401bbc:	2401      	moveq	r4, #1
  401bbe:	e7c8      	b.n	401b52 <critical_factorization+0x46>

00401bc0 <two_way_long_needle>:
  401bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401bc4:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  401bc8:	4616      	mov	r6, r2
  401bca:	4605      	mov	r5, r0
  401bcc:	468b      	mov	fp, r1
  401bce:	4610      	mov	r0, r2
  401bd0:	4619      	mov	r1, r3
  401bd2:	aa03      	add	r2, sp, #12
  401bd4:	461c      	mov	r4, r3
  401bd6:	f7ff ff99 	bl	401b0c <critical_factorization>
  401bda:	4681      	mov	r9, r0
  401bdc:	ab03      	add	r3, sp, #12
  401bde:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  401be2:	f843 4f04 	str.w	r4, [r3, #4]!
  401be6:	4293      	cmp	r3, r2
  401be8:	d1fb      	bne.n	401be2 <two_way_long_needle+0x22>
  401bea:	b14c      	cbz	r4, 401c00 <two_way_long_needle+0x40>
  401bec:	1e63      	subs	r3, r4, #1
  401bee:	1e72      	subs	r2, r6, #1
  401bf0:	a804      	add	r0, sp, #16
  401bf2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  401bf6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  401bfa:	f113 33ff 	adds.w	r3, r3, #4294967295
  401bfe:	d2f8      	bcs.n	401bf2 <two_way_long_needle+0x32>
  401c00:	9903      	ldr	r1, [sp, #12]
  401c02:	464a      	mov	r2, r9
  401c04:	4431      	add	r1, r6
  401c06:	4630      	mov	r0, r6
  401c08:	f000 fa98 	bl	40213c <memcmp>
  401c0c:	2800      	cmp	r0, #0
  401c0e:	d16f      	bne.n	401cf0 <two_way_long_needle+0x130>
  401c10:	f109 33ff 	add.w	r3, r9, #4294967295
  401c14:	9300      	str	r3, [sp, #0]
  401c16:	18f3      	adds	r3, r6, r3
  401c18:	4682      	mov	sl, r0
  401c1a:	9301      	str	r3, [sp, #4]
  401c1c:	4623      	mov	r3, r4
  401c1e:	4680      	mov	r8, r0
  401c20:	4654      	mov	r4, sl
  401c22:	4658      	mov	r0, fp
  401c24:	469a      	mov	sl, r3
  401c26:	eb08 070a 	add.w	r7, r8, sl
  401c2a:	1a3a      	subs	r2, r7, r0
  401c2c:	2100      	movs	r1, #0
  401c2e:	4428      	add	r0, r5
  401c30:	f000 fa3e 	bl	4020b0 <memchr>
  401c34:	2800      	cmp	r0, #0
  401c36:	d156      	bne.n	401ce6 <two_way_long_needle+0x126>
  401c38:	2f00      	cmp	r7, #0
  401c3a:	d054      	beq.n	401ce6 <two_way_long_needle+0x126>
  401c3c:	19eb      	adds	r3, r5, r7
  401c3e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  401c42:	ab04      	add	r3, sp, #16
  401c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401c48:	b14b      	cbz	r3, 401c5e <two_way_long_needle+0x9e>
  401c4a:	b124      	cbz	r4, 401c56 <two_way_long_needle+0x96>
  401c4c:	9a03      	ldr	r2, [sp, #12]
  401c4e:	4293      	cmp	r3, r2
  401c50:	d201      	bcs.n	401c56 <two_way_long_needle+0x96>
  401c52:	ebaa 0302 	sub.w	r3, sl, r2
  401c56:	4498      	add	r8, r3
  401c58:	2400      	movs	r4, #0
  401c5a:	4638      	mov	r0, r7
  401c5c:	e7e3      	b.n	401c26 <two_way_long_needle+0x66>
  401c5e:	454c      	cmp	r4, r9
  401c60:	4623      	mov	r3, r4
  401c62:	bf38      	it	cc
  401c64:	464b      	movcc	r3, r9
  401c66:	f10a 3eff 	add.w	lr, sl, #4294967295
  401c6a:	4573      	cmp	r3, lr
  401c6c:	d213      	bcs.n	401c96 <two_way_long_needle+0xd6>
  401c6e:	eb08 0203 	add.w	r2, r8, r3
  401c72:	5ca8      	ldrb	r0, [r5, r2]
  401c74:	f816 c003 	ldrb.w	ip, [r6, r3]
  401c78:	442a      	add	r2, r5
  401c7a:	4584      	cmp	ip, r0
  401c7c:	eb06 0103 	add.w	r1, r6, r3
  401c80:	d006      	beq.n	401c90 <two_way_long_needle+0xd0>
  401c82:	e02c      	b.n	401cde <two_way_long_needle+0x11e>
  401c84:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  401c88:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  401c8c:	4584      	cmp	ip, r0
  401c8e:	d126      	bne.n	401cde <two_way_long_needle+0x11e>
  401c90:	3301      	adds	r3, #1
  401c92:	4573      	cmp	r3, lr
  401c94:	d3f6      	bcc.n	401c84 <two_way_long_needle+0xc4>
  401c96:	454c      	cmp	r4, r9
  401c98:	9900      	ldr	r1, [sp, #0]
  401c9a:	f080 8089 	bcs.w	401db0 <two_way_long_needle+0x1f0>
  401c9e:	9b00      	ldr	r3, [sp, #0]
  401ca0:	eb08 0203 	add.w	r2, r8, r3
  401ca4:	9b01      	ldr	r3, [sp, #4]
  401ca6:	5ca8      	ldrb	r0, [r5, r2]
  401ca8:	781b      	ldrb	r3, [r3, #0]
  401caa:	442a      	add	r2, r5
  401cac:	4298      	cmp	r0, r3
  401cae:	d17f      	bne.n	401db0 <two_way_long_needle+0x1f0>
  401cb0:	9801      	ldr	r0, [sp, #4]
  401cb2:	f104 3bff 	add.w	fp, r4, #4294967295
  401cb6:	e006      	b.n	401cc6 <two_way_long_needle+0x106>
  401cb8:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  401cbc:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  401cc0:	45f4      	cmp	ip, lr
  401cc2:	d103      	bne.n	401ccc <two_way_long_needle+0x10c>
  401cc4:	4619      	mov	r1, r3
  401cc6:	1e4b      	subs	r3, r1, #1
  401cc8:	459b      	cmp	fp, r3
  401cca:	d1f5      	bne.n	401cb8 <two_way_long_needle+0xf8>
  401ccc:	3401      	adds	r4, #1
  401cce:	428c      	cmp	r4, r1
  401cd0:	d870      	bhi.n	401db4 <two_way_long_needle+0x1f4>
  401cd2:	9c03      	ldr	r4, [sp, #12]
  401cd4:	4638      	mov	r0, r7
  401cd6:	44a0      	add	r8, r4
  401cd8:	ebaa 0404 	sub.w	r4, sl, r4
  401cdc:	e7a3      	b.n	401c26 <two_way_long_needle+0x66>
  401cde:	f1c9 0201 	rsb	r2, r9, #1
  401ce2:	4490      	add	r8, r2
  401ce4:	e7b7      	b.n	401c56 <two_way_long_needle+0x96>
  401ce6:	2000      	movs	r0, #0
  401ce8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  401cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cf0:	eba4 0309 	sub.w	r3, r4, r9
  401cf4:	454b      	cmp	r3, r9
  401cf6:	bf38      	it	cc
  401cf8:	464b      	movcc	r3, r9
  401cfa:	f109 38ff 	add.w	r8, r9, #4294967295
  401cfe:	3301      	adds	r3, #1
  401d00:	9303      	str	r3, [sp, #12]
  401d02:	eb06 0308 	add.w	r3, r6, r8
  401d06:	4658      	mov	r0, fp
  401d08:	f04f 0a00 	mov.w	sl, #0
  401d0c:	46cb      	mov	fp, r9
  401d0e:	4699      	mov	r9, r3
  401d10:	eb0a 0704 	add.w	r7, sl, r4
  401d14:	1a3a      	subs	r2, r7, r0
  401d16:	2100      	movs	r1, #0
  401d18:	4428      	add	r0, r5
  401d1a:	f000 f9c9 	bl	4020b0 <memchr>
  401d1e:	2800      	cmp	r0, #0
  401d20:	d1e1      	bne.n	401ce6 <two_way_long_needle+0x126>
  401d22:	2f00      	cmp	r7, #0
  401d24:	d0df      	beq.n	401ce6 <two_way_long_needle+0x126>
  401d26:	19eb      	adds	r3, r5, r7
  401d28:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  401d2c:	ab04      	add	r3, sp, #16
  401d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401d32:	bba3      	cbnz	r3, 401d9e <two_way_long_needle+0x1de>
  401d34:	1e60      	subs	r0, r4, #1
  401d36:	4583      	cmp	fp, r0
  401d38:	d215      	bcs.n	401d66 <two_way_long_needle+0x1a6>
  401d3a:	eb0a 020b 	add.w	r2, sl, fp
  401d3e:	f815 e002 	ldrb.w	lr, [r5, r2]
  401d42:	f816 300b 	ldrb.w	r3, [r6, fp]
  401d46:	442a      	add	r2, r5
  401d48:	459e      	cmp	lr, r3
  401d4a:	eb06 010b 	add.w	r1, r6, fp
  401d4e:	465b      	mov	r3, fp
  401d50:	d006      	beq.n	401d60 <two_way_long_needle+0x1a0>
  401d52:	e027      	b.n	401da4 <two_way_long_needle+0x1e4>
  401d54:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  401d58:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  401d5c:	45f4      	cmp	ip, lr
  401d5e:	d121      	bne.n	401da4 <two_way_long_needle+0x1e4>
  401d60:	3301      	adds	r3, #1
  401d62:	4283      	cmp	r3, r0
  401d64:	d3f6      	bcc.n	401d54 <two_way_long_needle+0x194>
  401d66:	f1b8 3fff 	cmp.w	r8, #4294967295
  401d6a:	d011      	beq.n	401d90 <two_way_long_needle+0x1d0>
  401d6c:	eb0a 0208 	add.w	r2, sl, r8
  401d70:	5cab      	ldrb	r3, [r5, r2]
  401d72:	f899 1000 	ldrb.w	r1, [r9]
  401d76:	442a      	add	r2, r5
  401d78:	4299      	cmp	r1, r3
  401d7a:	d10f      	bne.n	401d9c <two_way_long_needle+0x1dc>
  401d7c:	464b      	mov	r3, r9
  401d7e:	e005      	b.n	401d8c <two_way_long_needle+0x1cc>
  401d80:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  401d84:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  401d88:	4288      	cmp	r0, r1
  401d8a:	d107      	bne.n	401d9c <two_way_long_needle+0x1dc>
  401d8c:	42b3      	cmp	r3, r6
  401d8e:	d1f7      	bne.n	401d80 <two_way_long_needle+0x1c0>
  401d90:	eb05 000a 	add.w	r0, r5, sl
  401d94:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  401d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d9c:	9b03      	ldr	r3, [sp, #12]
  401d9e:	449a      	add	sl, r3
  401da0:	4638      	mov	r0, r7
  401da2:	e7b5      	b.n	401d10 <two_way_long_needle+0x150>
  401da4:	f1cb 0201 	rsb	r2, fp, #1
  401da8:	4492      	add	sl, r2
  401daa:	449a      	add	sl, r3
  401dac:	4638      	mov	r0, r7
  401dae:	e7af      	b.n	401d10 <two_way_long_needle+0x150>
  401db0:	4649      	mov	r1, r9
  401db2:	e78b      	b.n	401ccc <two_way_long_needle+0x10c>
  401db4:	eb05 0008 	add.w	r0, r5, r8
  401db8:	e796      	b.n	401ce8 <two_way_long_needle+0x128>
  401dba:	bf00      	nop

00401dbc <strstr>:
  401dbc:	7802      	ldrb	r2, [r0, #0]
  401dbe:	2a00      	cmp	r2, #0
  401dc0:	f000 8101 	beq.w	401fc6 <strstr+0x20a>
  401dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401dc8:	f891 8000 	ldrb.w	r8, [r1]
  401dcc:	b085      	sub	sp, #20
  401dce:	4644      	mov	r4, r8
  401dd0:	f1b8 0f00 	cmp.w	r8, #0
  401dd4:	d016      	beq.n	401e04 <strstr+0x48>
  401dd6:	4686      	mov	lr, r0
  401dd8:	f101 0c01 	add.w	ip, r1, #1
  401ddc:	2701      	movs	r7, #1
  401dde:	e004      	b.n	401dea <strstr+0x2e>
  401de0:	4663      	mov	r3, ip
  401de2:	f813 4b01 	ldrb.w	r4, [r3], #1
  401de6:	b164      	cbz	r4, 401e02 <strstr+0x46>
  401de8:	469c      	mov	ip, r3
  401dea:	42a2      	cmp	r2, r4
  401dec:	bf14      	ite	ne
  401dee:	2700      	movne	r7, #0
  401df0:	f007 0701 	andeq.w	r7, r7, #1
  401df4:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  401df8:	2a00      	cmp	r2, #0
  401dfa:	d1f1      	bne.n	401de0 <strstr+0x24>
  401dfc:	f89c 3000 	ldrb.w	r3, [ip]
  401e00:	b9fb      	cbnz	r3, 401e42 <strstr+0x86>
  401e02:	b117      	cbz	r7, 401e0a <strstr+0x4e>
  401e04:	b005      	add	sp, #20
  401e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e0a:	460e      	mov	r6, r1
  401e0c:	4605      	mov	r5, r0
  401e0e:	4641      	mov	r1, r8
  401e10:	3001      	adds	r0, #1
  401e12:	ebac 0406 	sub.w	r4, ip, r6
  401e16:	f000 f9c1 	bl	40219c <strchr>
  401e1a:	4607      	mov	r7, r0
  401e1c:	b188      	cbz	r0, 401e42 <strstr+0x86>
  401e1e:	2c01      	cmp	r4, #1
  401e20:	d0f0      	beq.n	401e04 <strstr+0x48>
  401e22:	1928      	adds	r0, r5, r4
  401e24:	4287      	cmp	r7, r0
  401e26:	bf8c      	ite	hi
  401e28:	2101      	movhi	r1, #1
  401e2a:	1bc1      	subls	r1, r0, r7
  401e2c:	2c1f      	cmp	r4, #31
  401e2e:	468b      	mov	fp, r1
  401e30:	d90b      	bls.n	401e4a <strstr+0x8e>
  401e32:	4623      	mov	r3, r4
  401e34:	4632      	mov	r2, r6
  401e36:	4638      	mov	r0, r7
  401e38:	f7ff fec2 	bl	401bc0 <two_way_long_needle>
  401e3c:	b005      	add	sp, #20
  401e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e42:	2000      	movs	r0, #0
  401e44:	b005      	add	sp, #20
  401e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e4a:	aa03      	add	r2, sp, #12
  401e4c:	4621      	mov	r1, r4
  401e4e:	4630      	mov	r0, r6
  401e50:	f7ff fe5c 	bl	401b0c <critical_factorization>
  401e54:	9903      	ldr	r1, [sp, #12]
  401e56:	4680      	mov	r8, r0
  401e58:	4602      	mov	r2, r0
  401e5a:	4431      	add	r1, r6
  401e5c:	4630      	mov	r0, r6
  401e5e:	f000 f96d 	bl	40213c <memcmp>
  401e62:	2800      	cmp	r0, #0
  401e64:	d157      	bne.n	401f16 <strstr+0x15a>
  401e66:	4681      	mov	r9, r0
  401e68:	4605      	mov	r5, r0
  401e6a:	46b2      	mov	sl, r6
  401e6c:	4658      	mov	r0, fp
  401e6e:	f108 33ff 	add.w	r3, r8, #4294967295
  401e72:	9300      	str	r3, [sp, #0]
  401e74:	18f3      	adds	r3, r6, r3
  401e76:	9301      	str	r3, [sp, #4]
  401e78:	1966      	adds	r6, r4, r5
  401e7a:	1a32      	subs	r2, r6, r0
  401e7c:	2100      	movs	r1, #0
  401e7e:	4438      	add	r0, r7
  401e80:	f000 f916 	bl	4020b0 <memchr>
  401e84:	2800      	cmp	r0, #0
  401e86:	d1dc      	bne.n	401e42 <strstr+0x86>
  401e88:	2e00      	cmp	r6, #0
  401e8a:	d0da      	beq.n	401e42 <strstr+0x86>
  401e8c:	45c8      	cmp	r8, r9
  401e8e:	4643      	mov	r3, r8
  401e90:	bf38      	it	cc
  401e92:	464b      	movcc	r3, r9
  401e94:	429c      	cmp	r4, r3
  401e96:	d912      	bls.n	401ebe <strstr+0x102>
  401e98:	195a      	adds	r2, r3, r5
  401e9a:	5cb9      	ldrb	r1, [r7, r2]
  401e9c:	f81a 0003 	ldrb.w	r0, [sl, r3]
  401ea0:	443a      	add	r2, r7
  401ea2:	4288      	cmp	r0, r1
  401ea4:	eb0a 0e03 	add.w	lr, sl, r3
  401ea8:	d006      	beq.n	401eb8 <strstr+0xfc>
  401eaa:	e02c      	b.n	401f06 <strstr+0x14a>
  401eac:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  401eb0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  401eb4:	4288      	cmp	r0, r1
  401eb6:	d126      	bne.n	401f06 <strstr+0x14a>
  401eb8:	3301      	adds	r3, #1
  401eba:	429c      	cmp	r4, r3
  401ebc:	d1f6      	bne.n	401eac <strstr+0xf0>
  401ebe:	45c8      	cmp	r8, r9
  401ec0:	9900      	ldr	r1, [sp, #0]
  401ec2:	f240 8083 	bls.w	401fcc <strstr+0x210>
  401ec6:	9b00      	ldr	r3, [sp, #0]
  401ec8:	18ea      	adds	r2, r5, r3
  401eca:	9b01      	ldr	r3, [sp, #4]
  401ecc:	5cb8      	ldrb	r0, [r7, r2]
  401ece:	781b      	ldrb	r3, [r3, #0]
  401ed0:	443a      	add	r2, r7
  401ed2:	4298      	cmp	r0, r3
  401ed4:	d17a      	bne.n	401fcc <strstr+0x210>
  401ed6:	9801      	ldr	r0, [sp, #4]
  401ed8:	f109 3bff 	add.w	fp, r9, #4294967295
  401edc:	e006      	b.n	401eec <strstr+0x130>
  401ede:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  401ee2:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  401ee6:	45f4      	cmp	ip, lr
  401ee8:	d103      	bne.n	401ef2 <strstr+0x136>
  401eea:	4619      	mov	r1, r3
  401eec:	1e4b      	subs	r3, r1, #1
  401eee:	455b      	cmp	r3, fp
  401ef0:	d1f5      	bne.n	401ede <strstr+0x122>
  401ef2:	f109 0901 	add.w	r9, r9, #1
  401ef6:	4589      	cmp	r9, r1
  401ef8:	d857      	bhi.n	401faa <strstr+0x1ee>
  401efa:	9b03      	ldr	r3, [sp, #12]
  401efc:	4630      	mov	r0, r6
  401efe:	441d      	add	r5, r3
  401f00:	eba4 0903 	sub.w	r9, r4, r3
  401f04:	e7b8      	b.n	401e78 <strstr+0xbc>
  401f06:	f1c8 0201 	rsb	r2, r8, #1
  401f0a:	4415      	add	r5, r2
  401f0c:	441d      	add	r5, r3
  401f0e:	f04f 0900 	mov.w	r9, #0
  401f12:	4630      	mov	r0, r6
  401f14:	e7b0      	b.n	401e78 <strstr+0xbc>
  401f16:	eba4 0308 	sub.w	r3, r4, r8
  401f1a:	4543      	cmp	r3, r8
  401f1c:	bf38      	it	cc
  401f1e:	4643      	movcc	r3, r8
  401f20:	f108 39ff 	add.w	r9, r8, #4294967295
  401f24:	3301      	adds	r3, #1
  401f26:	9303      	str	r3, [sp, #12]
  401f28:	eb06 0309 	add.w	r3, r6, r9
  401f2c:	4658      	mov	r0, fp
  401f2e:	2500      	movs	r5, #0
  401f30:	46bb      	mov	fp, r7
  401f32:	469a      	mov	sl, r3
  401f34:	1967      	adds	r7, r4, r5
  401f36:	1a3a      	subs	r2, r7, r0
  401f38:	2100      	movs	r1, #0
  401f3a:	4458      	add	r0, fp
  401f3c:	f000 f8b8 	bl	4020b0 <memchr>
  401f40:	2800      	cmp	r0, #0
  401f42:	f47f af7e 	bne.w	401e42 <strstr+0x86>
  401f46:	2f00      	cmp	r7, #0
  401f48:	f43f af7b 	beq.w	401e42 <strstr+0x86>
  401f4c:	4544      	cmp	r4, r8
  401f4e:	d915      	bls.n	401f7c <strstr+0x1c0>
  401f50:	eb08 0205 	add.w	r2, r8, r5
  401f54:	f81b 0002 	ldrb.w	r0, [fp, r2]
  401f58:	f816 3008 	ldrb.w	r3, [r6, r8]
  401f5c:	445a      	add	r2, fp
  401f5e:	4298      	cmp	r0, r3
  401f60:	eb06 0108 	add.w	r1, r6, r8
  401f64:	4643      	mov	r3, r8
  401f66:	d006      	beq.n	401f76 <strstr+0x1ba>
  401f68:	e023      	b.n	401fb2 <strstr+0x1f6>
  401f6a:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  401f6e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  401f72:	4586      	cmp	lr, r0
  401f74:	d11d      	bne.n	401fb2 <strstr+0x1f6>
  401f76:	3301      	adds	r3, #1
  401f78:	429c      	cmp	r4, r3
  401f7a:	d1f6      	bne.n	401f6a <strstr+0x1ae>
  401f7c:	f1b9 3fff 	cmp.w	r9, #4294967295
  401f80:	d012      	beq.n	401fa8 <strstr+0x1ec>
  401f82:	eb05 0209 	add.w	r2, r5, r9
  401f86:	f81b 1002 	ldrb.w	r1, [fp, r2]
  401f8a:	f89a 3000 	ldrb.w	r3, [sl]
  401f8e:	445a      	add	r2, fp
  401f90:	4299      	cmp	r1, r3
  401f92:	d114      	bne.n	401fbe <strstr+0x202>
  401f94:	4653      	mov	r3, sl
  401f96:	e005      	b.n	401fa4 <strstr+0x1e8>
  401f98:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  401f9c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  401fa0:	4288      	cmp	r0, r1
  401fa2:	d10c      	bne.n	401fbe <strstr+0x202>
  401fa4:	42b3      	cmp	r3, r6
  401fa6:	d1f7      	bne.n	401f98 <strstr+0x1dc>
  401fa8:	465f      	mov	r7, fp
  401faa:	1978      	adds	r0, r7, r5
  401fac:	b005      	add	sp, #20
  401fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fb2:	f1c8 0201 	rsb	r2, r8, #1
  401fb6:	4415      	add	r5, r2
  401fb8:	441d      	add	r5, r3
  401fba:	4638      	mov	r0, r7
  401fbc:	e7ba      	b.n	401f34 <strstr+0x178>
  401fbe:	9b03      	ldr	r3, [sp, #12]
  401fc0:	4638      	mov	r0, r7
  401fc2:	441d      	add	r5, r3
  401fc4:	e7b6      	b.n	401f34 <strstr+0x178>
  401fc6:	780b      	ldrb	r3, [r1, #0]
  401fc8:	b913      	cbnz	r3, 401fd0 <strstr+0x214>
  401fca:	4770      	bx	lr
  401fcc:	4641      	mov	r1, r8
  401fce:	e790      	b.n	401ef2 <strstr+0x136>
  401fd0:	2000      	movs	r0, #0
  401fd2:	4770      	bx	lr

00401fd4 <__utoa>:
  401fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  401fd6:	b08b      	sub	sp, #44	; 0x2c
  401fd8:	466f      	mov	r7, sp
  401fda:	4615      	mov	r5, r2
  401fdc:	f8df e070 	ldr.w	lr, [pc, #112]	; 402050 <__utoa+0x7c>
  401fe0:	4604      	mov	r4, r0
  401fe2:	460e      	mov	r6, r1
  401fe4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  401fe8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  401fea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  401fee:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  401ff0:	e89e 0003 	ldmia.w	lr, {r0, r1}
  401ff4:	1eab      	subs	r3, r5, #2
  401ff6:	f847 0b04 	str.w	r0, [r7], #4
  401ffa:	2b22      	cmp	r3, #34	; 0x22
  401ffc:	7039      	strb	r1, [r7, #0]
  401ffe:	d822      	bhi.n	402046 <__utoa+0x72>
  402000:	1e71      	subs	r1, r6, #1
  402002:	4608      	mov	r0, r1
  402004:	2300      	movs	r3, #0
  402006:	e000      	b.n	40200a <__utoa+0x36>
  402008:	4613      	mov	r3, r2
  40200a:	fbb4 f2f5 	udiv	r2, r4, r5
  40200e:	fb05 4412 	mls	r4, r5, r2, r4
  402012:	af0a      	add	r7, sp, #40	; 0x28
  402014:	443c      	add	r4, r7
  402016:	f814 7c28 	ldrb.w	r7, [r4, #-40]
  40201a:	4614      	mov	r4, r2
  40201c:	f800 7f01 	strb.w	r7, [r0, #1]!
  402020:	1c5a      	adds	r2, r3, #1
  402022:	2c00      	cmp	r4, #0
  402024:	d1f0      	bne.n	402008 <__utoa+0x34>
  402026:	54b4      	strb	r4, [r6, r2]
  402028:	18f2      	adds	r2, r6, r3
  40202a:	b14b      	cbz	r3, 402040 <__utoa+0x6c>
  40202c:	3401      	adds	r4, #1
  40202e:	784d      	ldrb	r5, [r1, #1]
  402030:	7817      	ldrb	r7, [r2, #0]
  402032:	1b18      	subs	r0, r3, r4
  402034:	4284      	cmp	r4, r0
  402036:	f801 7f01 	strb.w	r7, [r1, #1]!
  40203a:	f802 5901 	strb.w	r5, [r2], #-1
  40203e:	dbf5      	blt.n	40202c <__utoa+0x58>
  402040:	4630      	mov	r0, r6
  402042:	b00b      	add	sp, #44	; 0x2c
  402044:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402046:	2000      	movs	r0, #0
  402048:	7030      	strb	r0, [r6, #0]
  40204a:	b00b      	add	sp, #44	; 0x2c
  40204c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40204e:	bf00      	nop
  402050:	00402504 	.word	0x00402504

00402054 <register_fini>:
  402054:	4b02      	ldr	r3, [pc, #8]	; (402060 <register_fini+0xc>)
  402056:	b113      	cbz	r3, 40205e <register_fini+0xa>
  402058:	4802      	ldr	r0, [pc, #8]	; (402064 <register_fini+0x10>)
  40205a:	f000 b805 	b.w	402068 <atexit>
  40205e:	4770      	bx	lr
  402060:	00000000 	.word	0x00000000
  402064:	00402075 	.word	0x00402075

00402068 <atexit>:
  402068:	2300      	movs	r3, #0
  40206a:	4601      	mov	r1, r0
  40206c:	461a      	mov	r2, r3
  40206e:	4618      	mov	r0, r3
  402070:	f000 b908 	b.w	402284 <__register_exitproc>

00402074 <__libc_fini_array>:
  402074:	b538      	push	{r3, r4, r5, lr}
  402076:	4c0a      	ldr	r4, [pc, #40]	; (4020a0 <__libc_fini_array+0x2c>)
  402078:	4d0a      	ldr	r5, [pc, #40]	; (4020a4 <__libc_fini_array+0x30>)
  40207a:	1b64      	subs	r4, r4, r5
  40207c:	10a4      	asrs	r4, r4, #2
  40207e:	d00a      	beq.n	402096 <__libc_fini_array+0x22>
  402080:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402084:	3b01      	subs	r3, #1
  402086:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40208a:	3c01      	subs	r4, #1
  40208c:	f855 3904 	ldr.w	r3, [r5], #-4
  402090:	4798      	blx	r3
  402092:	2c00      	cmp	r4, #0
  402094:	d1f9      	bne.n	40208a <__libc_fini_array+0x16>
  402096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40209a:	f000 ba51 	b.w	402540 <_fini>
  40209e:	bf00      	nop
  4020a0:	00402550 	.word	0x00402550
  4020a4:	0040254c 	.word	0x0040254c

004020a8 <__retarget_lock_acquire_recursive>:
  4020a8:	4770      	bx	lr
  4020aa:	bf00      	nop

004020ac <__retarget_lock_release_recursive>:
  4020ac:	4770      	bx	lr
  4020ae:	bf00      	nop

004020b0 <memchr>:
  4020b0:	0783      	lsls	r3, r0, #30
  4020b2:	b470      	push	{r4, r5, r6}
  4020b4:	b2cd      	uxtb	r5, r1
  4020b6:	d03d      	beq.n	402134 <memchr+0x84>
  4020b8:	1e54      	subs	r4, r2, #1
  4020ba:	b30a      	cbz	r2, 402100 <memchr+0x50>
  4020bc:	7803      	ldrb	r3, [r0, #0]
  4020be:	42ab      	cmp	r3, r5
  4020c0:	d01f      	beq.n	402102 <memchr+0x52>
  4020c2:	1c43      	adds	r3, r0, #1
  4020c4:	e005      	b.n	4020d2 <memchr+0x22>
  4020c6:	f114 34ff 	adds.w	r4, r4, #4294967295
  4020ca:	d319      	bcc.n	402100 <memchr+0x50>
  4020cc:	7802      	ldrb	r2, [r0, #0]
  4020ce:	42aa      	cmp	r2, r5
  4020d0:	d017      	beq.n	402102 <memchr+0x52>
  4020d2:	f013 0f03 	tst.w	r3, #3
  4020d6:	4618      	mov	r0, r3
  4020d8:	f103 0301 	add.w	r3, r3, #1
  4020dc:	d1f3      	bne.n	4020c6 <memchr+0x16>
  4020de:	2c03      	cmp	r4, #3
  4020e0:	d811      	bhi.n	402106 <memchr+0x56>
  4020e2:	b34c      	cbz	r4, 402138 <memchr+0x88>
  4020e4:	7803      	ldrb	r3, [r0, #0]
  4020e6:	42ab      	cmp	r3, r5
  4020e8:	d00b      	beq.n	402102 <memchr+0x52>
  4020ea:	4404      	add	r4, r0
  4020ec:	1c43      	adds	r3, r0, #1
  4020ee:	e002      	b.n	4020f6 <memchr+0x46>
  4020f0:	7802      	ldrb	r2, [r0, #0]
  4020f2:	42aa      	cmp	r2, r5
  4020f4:	d005      	beq.n	402102 <memchr+0x52>
  4020f6:	429c      	cmp	r4, r3
  4020f8:	4618      	mov	r0, r3
  4020fa:	f103 0301 	add.w	r3, r3, #1
  4020fe:	d1f7      	bne.n	4020f0 <memchr+0x40>
  402100:	2000      	movs	r0, #0
  402102:	bc70      	pop	{r4, r5, r6}
  402104:	4770      	bx	lr
  402106:	0209      	lsls	r1, r1, #8
  402108:	b289      	uxth	r1, r1
  40210a:	4329      	orrs	r1, r5
  40210c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  402110:	6803      	ldr	r3, [r0, #0]
  402112:	4606      	mov	r6, r0
  402114:	404b      	eors	r3, r1
  402116:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40211a:	ea22 0303 	bic.w	r3, r2, r3
  40211e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  402122:	f100 0004 	add.w	r0, r0, #4
  402126:	d103      	bne.n	402130 <memchr+0x80>
  402128:	3c04      	subs	r4, #4
  40212a:	2c03      	cmp	r4, #3
  40212c:	d8f0      	bhi.n	402110 <memchr+0x60>
  40212e:	e7d8      	b.n	4020e2 <memchr+0x32>
  402130:	4630      	mov	r0, r6
  402132:	e7d7      	b.n	4020e4 <memchr+0x34>
  402134:	4614      	mov	r4, r2
  402136:	e7d2      	b.n	4020de <memchr+0x2e>
  402138:	4620      	mov	r0, r4
  40213a:	e7e2      	b.n	402102 <memchr+0x52>

0040213c <memcmp>:
  40213c:	2a03      	cmp	r2, #3
  40213e:	b470      	push	{r4, r5, r6}
  402140:	d922      	bls.n	402188 <memcmp+0x4c>
  402142:	ea40 0301 	orr.w	r3, r0, r1
  402146:	079b      	lsls	r3, r3, #30
  402148:	d011      	beq.n	40216e <memcmp+0x32>
  40214a:	7803      	ldrb	r3, [r0, #0]
  40214c:	780c      	ldrb	r4, [r1, #0]
  40214e:	42a3      	cmp	r3, r4
  402150:	d11d      	bne.n	40218e <memcmp+0x52>
  402152:	440a      	add	r2, r1
  402154:	3101      	adds	r1, #1
  402156:	e005      	b.n	402164 <memcmp+0x28>
  402158:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40215c:	f811 4b01 	ldrb.w	r4, [r1], #1
  402160:	42a3      	cmp	r3, r4
  402162:	d114      	bne.n	40218e <memcmp+0x52>
  402164:	4291      	cmp	r1, r2
  402166:	d1f7      	bne.n	402158 <memcmp+0x1c>
  402168:	2000      	movs	r0, #0
  40216a:	bc70      	pop	{r4, r5, r6}
  40216c:	4770      	bx	lr
  40216e:	680d      	ldr	r5, [r1, #0]
  402170:	6806      	ldr	r6, [r0, #0]
  402172:	460c      	mov	r4, r1
  402174:	42ae      	cmp	r6, r5
  402176:	4603      	mov	r3, r0
  402178:	f101 0104 	add.w	r1, r1, #4
  40217c:	f100 0004 	add.w	r0, r0, #4
  402180:	d108      	bne.n	402194 <memcmp+0x58>
  402182:	3a04      	subs	r2, #4
  402184:	2a03      	cmp	r2, #3
  402186:	d8f2      	bhi.n	40216e <memcmp+0x32>
  402188:	2a00      	cmp	r2, #0
  40218a:	d1de      	bne.n	40214a <memcmp+0xe>
  40218c:	e7ec      	b.n	402168 <memcmp+0x2c>
  40218e:	1b18      	subs	r0, r3, r4
  402190:	bc70      	pop	{r4, r5, r6}
  402192:	4770      	bx	lr
  402194:	4621      	mov	r1, r4
  402196:	4618      	mov	r0, r3
  402198:	e7d7      	b.n	40214a <memcmp+0xe>
  40219a:	bf00      	nop

0040219c <strchr>:
  40219c:	b2c9      	uxtb	r1, r1
  40219e:	2900      	cmp	r1, #0
  4021a0:	d041      	beq.n	402226 <strchr+0x8a>
  4021a2:	0782      	lsls	r2, r0, #30
  4021a4:	b4f0      	push	{r4, r5, r6, r7}
  4021a6:	d067      	beq.n	402278 <strchr+0xdc>
  4021a8:	7803      	ldrb	r3, [r0, #0]
  4021aa:	2b00      	cmp	r3, #0
  4021ac:	d068      	beq.n	402280 <strchr+0xe4>
  4021ae:	4299      	cmp	r1, r3
  4021b0:	d037      	beq.n	402222 <strchr+0x86>
  4021b2:	1c43      	adds	r3, r0, #1
  4021b4:	e004      	b.n	4021c0 <strchr+0x24>
  4021b6:	f813 0b01 	ldrb.w	r0, [r3], #1
  4021ba:	b390      	cbz	r0, 402222 <strchr+0x86>
  4021bc:	4281      	cmp	r1, r0
  4021be:	d02f      	beq.n	402220 <strchr+0x84>
  4021c0:	079a      	lsls	r2, r3, #30
  4021c2:	461c      	mov	r4, r3
  4021c4:	d1f7      	bne.n	4021b6 <strchr+0x1a>
  4021c6:	6825      	ldr	r5, [r4, #0]
  4021c8:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  4021cc:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  4021d0:	ea83 0605 	eor.w	r6, r3, r5
  4021d4:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  4021d8:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  4021dc:	ea20 0006 	bic.w	r0, r0, r6
  4021e0:	ea22 0205 	bic.w	r2, r2, r5
  4021e4:	4302      	orrs	r2, r0
  4021e6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4021ea:	d111      	bne.n	402210 <strchr+0x74>
  4021ec:	4620      	mov	r0, r4
  4021ee:	f850 6f04 	ldr.w	r6, [r0, #4]!
  4021f2:	ea83 0706 	eor.w	r7, r3, r6
  4021f6:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  4021fa:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  4021fe:	ea25 0507 	bic.w	r5, r5, r7
  402202:	ea22 0206 	bic.w	r2, r2, r6
  402206:	432a      	orrs	r2, r5
  402208:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40220c:	d0ef      	beq.n	4021ee <strchr+0x52>
  40220e:	4604      	mov	r4, r0
  402210:	7820      	ldrb	r0, [r4, #0]
  402212:	b918      	cbnz	r0, 40221c <strchr+0x80>
  402214:	e005      	b.n	402222 <strchr+0x86>
  402216:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  40221a:	b110      	cbz	r0, 402222 <strchr+0x86>
  40221c:	4281      	cmp	r1, r0
  40221e:	d1fa      	bne.n	402216 <strchr+0x7a>
  402220:	4620      	mov	r0, r4
  402222:	bcf0      	pop	{r4, r5, r6, r7}
  402224:	4770      	bx	lr
  402226:	0783      	lsls	r3, r0, #30
  402228:	d024      	beq.n	402274 <strchr+0xd8>
  40222a:	7803      	ldrb	r3, [r0, #0]
  40222c:	2b00      	cmp	r3, #0
  40222e:	d0f9      	beq.n	402224 <strchr+0x88>
  402230:	1c43      	adds	r3, r0, #1
  402232:	e003      	b.n	40223c <strchr+0xa0>
  402234:	7802      	ldrb	r2, [r0, #0]
  402236:	3301      	adds	r3, #1
  402238:	2a00      	cmp	r2, #0
  40223a:	d0f3      	beq.n	402224 <strchr+0x88>
  40223c:	0799      	lsls	r1, r3, #30
  40223e:	4618      	mov	r0, r3
  402240:	d1f8      	bne.n	402234 <strchr+0x98>
  402242:	6819      	ldr	r1, [r3, #0]
  402244:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  402248:	ea22 0201 	bic.w	r2, r2, r1
  40224c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402250:	d108      	bne.n	402264 <strchr+0xc8>
  402252:	f853 1f04 	ldr.w	r1, [r3, #4]!
  402256:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40225a:	ea22 0201 	bic.w	r2, r2, r1
  40225e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402262:	d0f6      	beq.n	402252 <strchr+0xb6>
  402264:	781a      	ldrb	r2, [r3, #0]
  402266:	4618      	mov	r0, r3
  402268:	b142      	cbz	r2, 40227c <strchr+0xe0>
  40226a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40226e:	2b00      	cmp	r3, #0
  402270:	d1fb      	bne.n	40226a <strchr+0xce>
  402272:	4770      	bx	lr
  402274:	4603      	mov	r3, r0
  402276:	e7e4      	b.n	402242 <strchr+0xa6>
  402278:	4604      	mov	r4, r0
  40227a:	e7a4      	b.n	4021c6 <strchr+0x2a>
  40227c:	4618      	mov	r0, r3
  40227e:	4770      	bx	lr
  402280:	4618      	mov	r0, r3
  402282:	e7ce      	b.n	402222 <strchr+0x86>

00402284 <__register_exitproc>:
  402284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402288:	4d2c      	ldr	r5, [pc, #176]	; (40233c <__register_exitproc+0xb8>)
  40228a:	4606      	mov	r6, r0
  40228c:	6828      	ldr	r0, [r5, #0]
  40228e:	4698      	mov	r8, r3
  402290:	460f      	mov	r7, r1
  402292:	4691      	mov	r9, r2
  402294:	f7ff ff08 	bl	4020a8 <__retarget_lock_acquire_recursive>
  402298:	4b29      	ldr	r3, [pc, #164]	; (402340 <__register_exitproc+0xbc>)
  40229a:	681c      	ldr	r4, [r3, #0]
  40229c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4022a0:	2b00      	cmp	r3, #0
  4022a2:	d03e      	beq.n	402322 <__register_exitproc+0x9e>
  4022a4:	685a      	ldr	r2, [r3, #4]
  4022a6:	2a1f      	cmp	r2, #31
  4022a8:	dc1c      	bgt.n	4022e4 <__register_exitproc+0x60>
  4022aa:	f102 0e01 	add.w	lr, r2, #1
  4022ae:	b176      	cbz	r6, 4022ce <__register_exitproc+0x4a>
  4022b0:	2101      	movs	r1, #1
  4022b2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
  4022b6:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
  4022ba:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4022be:	4091      	lsls	r1, r2
  4022c0:	4308      	orrs	r0, r1
  4022c2:	2e02      	cmp	r6, #2
  4022c4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4022c8:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
  4022cc:	d023      	beq.n	402316 <__register_exitproc+0x92>
  4022ce:	3202      	adds	r2, #2
  4022d0:	f8c3 e004 	str.w	lr, [r3, #4]
  4022d4:	6828      	ldr	r0, [r5, #0]
  4022d6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4022da:	f7ff fee7 	bl	4020ac <__retarget_lock_release_recursive>
  4022de:	2000      	movs	r0, #0
  4022e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4022e4:	4b17      	ldr	r3, [pc, #92]	; (402344 <__register_exitproc+0xc0>)
  4022e6:	b30b      	cbz	r3, 40232c <__register_exitproc+0xa8>
  4022e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4022ec:	f3af 8000 	nop.w
  4022f0:	4603      	mov	r3, r0
  4022f2:	b1d8      	cbz	r0, 40232c <__register_exitproc+0xa8>
  4022f4:	2000      	movs	r0, #0
  4022f6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  4022fa:	f04f 0e01 	mov.w	lr, #1
  4022fe:	6058      	str	r0, [r3, #4]
  402300:	6019      	str	r1, [r3, #0]
  402302:	4602      	mov	r2, r0
  402304:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402308:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40230c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
  402310:	2e00      	cmp	r6, #0
  402312:	d0dc      	beq.n	4022ce <__register_exitproc+0x4a>
  402314:	e7cc      	b.n	4022b0 <__register_exitproc+0x2c>
  402316:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
  40231a:	4301      	orrs	r1, r0
  40231c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
  402320:	e7d5      	b.n	4022ce <__register_exitproc+0x4a>
  402322:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402326:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40232a:	e7bb      	b.n	4022a4 <__register_exitproc+0x20>
  40232c:	6828      	ldr	r0, [r5, #0]
  40232e:	f7ff febd 	bl	4020ac <__retarget_lock_release_recursive>
  402332:	f04f 30ff 	mov.w	r0, #4294967295
  402336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40233a:	bf00      	nop
  40233c:	20000438 	.word	0x20000438
  402340:	00402500 	.word	0x00402500
  402344:	00000000 	.word	0x00000000
  402348:	0000000a 	.word	0x0000000a
  40234c:	6f64656c 	.word	0x6f64656c
  402350:	00006666 	.word	0x00006666
  402354:	6f64656c 	.word	0x6f64656c
  402358:	0000006e 	.word	0x0000006e
  40235c:	433e703c 	.word	0x433e703c
  402360:	65727275 	.word	0x65727275
  402364:	5420746e 	.word	0x5420746e
  402368:	65706d65 	.word	0x65706d65
  40236c:	75746172 	.word	0x75746172
  402370:	3c3a6572 	.word	0x3c3a6572
  402374:	003e702f 	.word	0x003e702f
  402378:	0000002e 	.word	0x0000002e
  40237c:	00004320 	.word	0x00004320
  402380:	433e703c 	.word	0x433e703c
  402384:	65727275 	.word	0x65727275
  402388:	7020746e 	.word	0x7020746e
  40238c:	73736572 	.word	0x73736572
  402390:	3a657275 	.word	0x3a657275
  402394:	3e702f3c 	.word	0x3e702f3c
  402398:	00000000 	.word	0x00000000
  40239c:	00615020 	.word	0x00615020
  4023a0:	6f622f3c 	.word	0x6f622f3c
  4023a4:	3c3e7964 	.word	0x3c3e7964
  4023a8:	6d74682f 	.word	0x6d74682f
  4023ac:	00003e6c 	.word	0x00003e6c
  4023b0:	4c3e703c 	.word	0x4c3e703c
  4023b4:	43204445 	.word	0x43204445
  4023b8:	72746e6f 	.word	0x72746e6f
  4023bc:	3c3a6c6f 	.word	0x3c3a6c6f
  4023c0:	3c3e702f 	.word	0x3c3e702f
  4023c4:	6d726f66 	.word	0x6d726f66
  4023c8:	74636120 	.word	0x74636120
  4023cc:	3d6e6f69 	.word	0x3d6e6f69
  4023d0:	64656c22 	.word	0x64656c22
  4023d4:	3e226e6f 	.word	0x3e226e6f
  4023d8:	706e693c 	.word	0x706e693c
  4023dc:	74207475 	.word	0x74207475
  4023e0:	3d657079 	.word	0x3d657079
  4023e4:	62757322 	.word	0x62757322
  4023e8:	2274696d 	.word	0x2274696d
  4023ec:	6c617620 	.word	0x6c617620
  4023f0:	223d6575 	.word	0x223d6575
  4023f4:	6e727554 	.word	0x6e727554
  4023f8:	65687420 	.word	0x65687420
  4023fc:	44454c20 	.word	0x44454c20
  402400:	216e6f20 	.word	0x216e6f20
  402404:	3e2f2022 	.word	0x3e2f2022
  402408:	6f662f3c 	.word	0x6f662f3c
  40240c:	203e6d72 	.word	0x203e6d72
  402410:	726f663c 	.word	0x726f663c
  402414:	6361206d 	.word	0x6361206d
  402418:	6e6f6974 	.word	0x6e6f6974
  40241c:	656c223d 	.word	0x656c223d
  402420:	66666f64 	.word	0x66666f64
  402424:	693c3e22 	.word	0x693c3e22
  402428:	7475706e 	.word	0x7475706e
  40242c:	70797420 	.word	0x70797420
  402430:	73223d65 	.word	0x73223d65
  402434:	696d6275 	.word	0x696d6275
  402438:	76202274 	.word	0x76202274
  40243c:	65756c61 	.word	0x65756c61
  402440:	7554223d 	.word	0x7554223d
  402444:	74206e72 	.word	0x74206e72
  402448:	4c206568 	.word	0x4c206568
  40244c:	6f204445 	.word	0x6f204445
  402450:	22216666 	.word	0x22216666
  402454:	3c3e2f20 	.word	0x3c3e2f20
  402458:	726f662f 	.word	0x726f662f
  40245c:	00003e6d 	.word	0x00003e6d
  402460:	4f44213c 	.word	0x4f44213c
  402464:	50595443 	.word	0x50595443
  402468:	74682045 	.word	0x74682045
  40246c:	3c3e6c6d 	.word	0x3c3e6c6d
  402470:	6c6d7468 	.word	0x6c6d7468
  402474:	65683c3e 	.word	0x65683c3e
  402478:	3c3e6461 	.word	0x3c3e6461
  40247c:	6c746974 	.word	0x6c746974
  402480:	31453e65 	.word	0x31453e65
  402484:	57203535 	.word	0x57203535
  402488:	53206265 	.word	0x53206265
  40248c:	65767265 	.word	0x65767265
  402490:	65442072 	.word	0x65442072
  402494:	57206f6d 	.word	0x57206f6d
  402498:	61706265 	.word	0x61706265
  40249c:	2f3c6567 	.word	0x2f3c6567
  4024a0:	6c746974 	.word	0x6c746974
  4024a4:	6d3c3e65 	.word	0x6d3c3e65
  4024a8:	20617465 	.word	0x20617465
  4024ac:	70747468 	.word	0x70747468
  4024b0:	7571652d 	.word	0x7571652d
  4024b4:	223d7669 	.word	0x223d7669
  4024b8:	72666572 	.word	0x72666572
  4024bc:	22687365 	.word	0x22687365
  4024c0:	6e6f6320 	.word	0x6e6f6320
  4024c4:	746e6574 	.word	0x746e6574
  4024c8:	2235223d 	.word	0x2235223d
  4024cc:	682f3c3e 	.word	0x682f3c3e
  4024d0:	3e646165 	.word	0x3e646165
  4024d4:	646f623c 	.word	0x646f623c
  4024d8:	683c3e79 	.word	0x683c3e79
  4024dc:	31453e31 	.word	0x31453e31
  4024e0:	57203535 	.word	0x57203535
  4024e4:	53206265 	.word	0x53206265
  4024e8:	65767265 	.word	0x65767265
  4024ec:	65442072 	.word	0x65442072
  4024f0:	57206f6d 	.word	0x57206f6d
  4024f4:	61706265 	.word	0x61706265
  4024f8:	2f3c6567 	.word	0x2f3c6567
  4024fc:	003e3168 	.word	0x003e3168

00402500 <_global_impure_ptr>:
  402500:	20000010 33323130 37363534 62613938     ... 0123456789ab
  402510:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
  402520:	76757473 7a797877 00000000              stuvwxyz....

0040252c <_init>:
  40252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40252e:	bf00      	nop
  402530:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402532:	bc08      	pop	{r3}
  402534:	469e      	mov	lr, r3
  402536:	4770      	bx	lr

00402538 <__init_array_start>:
  402538:	00402055 	.word	0x00402055

0040253c <__frame_dummy_init_array_entry>:
  40253c:	004000f1                                ..@.

00402540 <_fini>:
  402540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402542:	bf00      	nop
  402544:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402546:	bc08      	pop	{r3}
  402548:	469e      	mov	lr, r3
  40254a:	4770      	bx	lr

0040254c <__fini_array_start>:
  40254c:	004000cd 	.word	0x004000cd
