
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000684  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000524  20000000  00400684  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000040  20000524  00400ba8  00020524  2**2
                  ALLOC
  3 .stack        00002004  20000564  00400be8  00020524  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020524  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002054d  2**0
                  CONTENTS, READONLY
  6 .debug_info   00007ad2  00000000  00000000  000205a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001239  00000000  00000000  00028078  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000310  00000000  00000000  000292b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000002a8  00000000  00000000  000295c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000100bb  00000000  00000000  00029869  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005dcd  00000000  00000000  00039924  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0004863e  00000000  00000000  0003f6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000730  00000000  00000000  00087d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e42  00000000  00000000  00088460  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	68 25 00 20 e1 02 40 00 df 02 40 00 df 02 40 00     h%. ..@...@...@.
  400010:	df 02 40 00 df 02 40 00 df 02 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	df 02 40 00 df 02 40 00 00 00 00 00 df 02 40 00     ..@...@.......@.
  40003c:	df 02 40 00 df 02 40 00 df 02 40 00 df 02 40 00     ..@...@...@...@.
  40004c:	df 02 40 00 df 02 40 00 df 02 40 00 df 02 40 00     ..@...@...@...@.
  40005c:	df 02 40 00 df 02 40 00 df 02 40 00 df 02 40 00     ..@...@...@...@.
  40006c:	df 02 40 00 df 02 40 00 df 02 40 00 df 02 40 00     ..@...@...@...@.
  40007c:	df 02 40 00 df 02 40 00 df 02 40 00 df 02 40 00     ..@...@...@...@.
  40008c:	df 02 40 00 df 02 40 00 df 02 40 00 df 02 40 00     ..@...@...@...@.
  40009c:	df 02 40 00 df 02 40 00 df 02 40 00 df 02 40 00     ..@...@...@...@.
  4000ac:	df 02 40 00 df 02 40 00 df 02 40 00 df 02 40 00     ..@...@...@...@.
  4000bc:	df 02 40 00 df 02 40 00 df 02 40 00 df 02 40 00     ..@...@...@...@.
  4000cc:	df 02 40 00                                         ..@.

004000d0 <__do_global_dtors_aux>:
  4000d0:	b510      	push	{r4, lr}
  4000d2:	4c05      	ldr	r4, [pc, #20]	; (4000e8 <__do_global_dtors_aux+0x18>)
  4000d4:	7823      	ldrb	r3, [r4, #0]
  4000d6:	b933      	cbnz	r3, 4000e6 <__do_global_dtors_aux+0x16>
  4000d8:	4b04      	ldr	r3, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x1c>)
  4000da:	b113      	cbz	r3, 4000e2 <__do_global_dtors_aux+0x12>
  4000dc:	4804      	ldr	r0, [pc, #16]	; (4000f0 <__do_global_dtors_aux+0x20>)
  4000de:	f3af 8000 	nop.w
  4000e2:	2301      	movs	r3, #1
  4000e4:	7023      	strb	r3, [r4, #0]
  4000e6:	bd10      	pop	{r4, pc}
  4000e8:	20000524 	.word	0x20000524
  4000ec:	00000000 	.word	0x00000000
  4000f0:	00400684 	.word	0x00400684

004000f4 <frame_dummy>:
  4000f4:	4b0c      	ldr	r3, [pc, #48]	; (400128 <frame_dummy+0x34>)
  4000f6:	b143      	cbz	r3, 40010a <frame_dummy+0x16>
  4000f8:	480c      	ldr	r0, [pc, #48]	; (40012c <frame_dummy+0x38>)
  4000fa:	b510      	push	{r4, lr}
  4000fc:	490c      	ldr	r1, [pc, #48]	; (400130 <frame_dummy+0x3c>)
  4000fe:	f3af 8000 	nop.w
  400102:	480c      	ldr	r0, [pc, #48]	; (400134 <frame_dummy+0x40>)
  400104:	6803      	ldr	r3, [r0, #0]
  400106:	b923      	cbnz	r3, 400112 <frame_dummy+0x1e>
  400108:	bd10      	pop	{r4, pc}
  40010a:	480a      	ldr	r0, [pc, #40]	; (400134 <frame_dummy+0x40>)
  40010c:	6803      	ldr	r3, [r0, #0]
  40010e:	b933      	cbnz	r3, 40011e <frame_dummy+0x2a>
  400110:	4770      	bx	lr
  400112:	4b09      	ldr	r3, [pc, #36]	; (400138 <frame_dummy+0x44>)
  400114:	2b00      	cmp	r3, #0
  400116:	d0f7      	beq.n	400108 <frame_dummy+0x14>
  400118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40011c:	4718      	bx	r3
  40011e:	4b06      	ldr	r3, [pc, #24]	; (400138 <frame_dummy+0x44>)
  400120:	2b00      	cmp	r3, #0
  400122:	d0f5      	beq.n	400110 <frame_dummy+0x1c>
  400124:	4718      	bx	r3
  400126:	bf00      	nop
  400128:	00000000 	.word	0x00000000
  40012c:	00400684 	.word	0x00400684
  400130:	20000528 	.word	0x20000528
  400134:	00400684 	.word	0x00400684
  400138:	00000000 	.word	0x00000000

0040013c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40013c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40013e:	480e      	ldr	r0, [pc, #56]	; (400178 <sysclk_init+0x3c>)
  400140:	4b0e      	ldr	r3, [pc, #56]	; (40017c <sysclk_init+0x40>)
  400142:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400144:	213e      	movs	r1, #62	; 0x3e
  400146:	2000      	movs	r0, #0
  400148:	4b0d      	ldr	r3, [pc, #52]	; (400180 <sysclk_init+0x44>)
  40014a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40014c:	4c0d      	ldr	r4, [pc, #52]	; (400184 <sysclk_init+0x48>)
  40014e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400150:	2800      	cmp	r0, #0
  400152:	d0fc      	beq.n	40014e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400154:	4b0c      	ldr	r3, [pc, #48]	; (400188 <sysclk_init+0x4c>)
  400156:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400158:	4a0c      	ldr	r2, [pc, #48]	; (40018c <sysclk_init+0x50>)
  40015a:	4b0d      	ldr	r3, [pc, #52]	; (400190 <sysclk_init+0x54>)
  40015c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40015e:	4c0d      	ldr	r4, [pc, #52]	; (400194 <sysclk_init+0x58>)
  400160:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400162:	2800      	cmp	r0, #0
  400164:	d0fc      	beq.n	400160 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400166:	2010      	movs	r0, #16
  400168:	4b0b      	ldr	r3, [pc, #44]	; (400198 <sysclk_init+0x5c>)
  40016a:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40016c:	4b0b      	ldr	r3, [pc, #44]	; (40019c <sysclk_init+0x60>)
  40016e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400170:	4801      	ldr	r0, [pc, #4]	; (400178 <sysclk_init+0x3c>)
  400172:	4b02      	ldr	r3, [pc, #8]	; (40017c <sysclk_init+0x40>)
  400174:	4798      	blx	r3
  400176:	bd10      	pop	{r4, pc}
  400178:	03d09000 	.word	0x03d09000
  40017c:	200000ad 	.word	0x200000ad
  400180:	00400205 	.word	0x00400205
  400184:	00400259 	.word	0x00400259
  400188:	00400269 	.word	0x00400269
  40018c:	201f3f03 	.word	0x201f3f03
  400190:	400e0400 	.word	0x400e0400
  400194:	00400279 	.word	0x00400279
  400198:	004001a1 	.word	0x004001a1
  40019c:	00400379 	.word	0x00400379

004001a0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4001a0:	4a17      	ldr	r2, [pc, #92]	; (400200 <pmc_switch_mck_to_pllack+0x60>)
  4001a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4001a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4001a8:	4318      	orrs	r0, r3
  4001aa:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4001ac:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4001ae:	f013 0f08 	tst.w	r3, #8
  4001b2:	d10a      	bne.n	4001ca <pmc_switch_mck_to_pllack+0x2a>
  4001b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4001b8:	4911      	ldr	r1, [pc, #68]	; (400200 <pmc_switch_mck_to_pllack+0x60>)
  4001ba:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4001bc:	f012 0f08 	tst.w	r2, #8
  4001c0:	d103      	bne.n	4001ca <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4001c2:	3b01      	subs	r3, #1
  4001c4:	d1f9      	bne.n	4001ba <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4001c6:	2001      	movs	r0, #1
  4001c8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4001ca:	4a0d      	ldr	r2, [pc, #52]	; (400200 <pmc_switch_mck_to_pllack+0x60>)
  4001cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4001ce:	f023 0303 	bic.w	r3, r3, #3
  4001d2:	f043 0302 	orr.w	r3, r3, #2
  4001d6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4001d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4001da:	f013 0f08 	tst.w	r3, #8
  4001de:	d10a      	bne.n	4001f6 <pmc_switch_mck_to_pllack+0x56>
  4001e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4001e4:	4906      	ldr	r1, [pc, #24]	; (400200 <pmc_switch_mck_to_pllack+0x60>)
  4001e6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4001e8:	f012 0f08 	tst.w	r2, #8
  4001ec:	d105      	bne.n	4001fa <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4001ee:	3b01      	subs	r3, #1
  4001f0:	d1f9      	bne.n	4001e6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4001f2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4001f4:	4770      	bx	lr
	return 0;
  4001f6:	2000      	movs	r0, #0
  4001f8:	4770      	bx	lr
  4001fa:	2000      	movs	r0, #0
  4001fc:	4770      	bx	lr
  4001fe:	bf00      	nop
  400200:	400e0400 	.word	0x400e0400

00400204 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400204:	b9c8      	cbnz	r0, 40023a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400206:	4a11      	ldr	r2, [pc, #68]	; (40024c <pmc_switch_mainck_to_xtal+0x48>)
  400208:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40020a:	0209      	lsls	r1, r1, #8
  40020c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40020e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400212:	f023 0303 	bic.w	r3, r3, #3
  400216:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40021a:	f043 0301 	orr.w	r3, r3, #1
  40021e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400220:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400222:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400224:	f013 0f01 	tst.w	r3, #1
  400228:	d0fb      	beq.n	400222 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40022a:	4a08      	ldr	r2, [pc, #32]	; (40024c <pmc_switch_mainck_to_xtal+0x48>)
  40022c:	6a13      	ldr	r3, [r2, #32]
  40022e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400236:	6213      	str	r3, [r2, #32]
  400238:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40023a:	4904      	ldr	r1, [pc, #16]	; (40024c <pmc_switch_mainck_to_xtal+0x48>)
  40023c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40023e:	4a04      	ldr	r2, [pc, #16]	; (400250 <pmc_switch_mainck_to_xtal+0x4c>)
  400240:	401a      	ands	r2, r3
  400242:	4b04      	ldr	r3, [pc, #16]	; (400254 <pmc_switch_mainck_to_xtal+0x50>)
  400244:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400246:	620b      	str	r3, [r1, #32]
  400248:	4770      	bx	lr
  40024a:	bf00      	nop
  40024c:	400e0400 	.word	0x400e0400
  400250:	fec8fffc 	.word	0xfec8fffc
  400254:	01370002 	.word	0x01370002

00400258 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400258:	4b02      	ldr	r3, [pc, #8]	; (400264 <pmc_osc_is_ready_mainck+0xc>)
  40025a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40025c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400260:	4770      	bx	lr
  400262:	bf00      	nop
  400264:	400e0400 	.word	0x400e0400

00400268 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400268:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40026c:	4b01      	ldr	r3, [pc, #4]	; (400274 <pmc_disable_pllack+0xc>)
  40026e:	629a      	str	r2, [r3, #40]	; 0x28
  400270:	4770      	bx	lr
  400272:	bf00      	nop
  400274:	400e0400 	.word	0x400e0400

00400278 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400278:	4b02      	ldr	r3, [pc, #8]	; (400284 <pmc_is_locked_pllack+0xc>)
  40027a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40027c:	f000 0002 	and.w	r0, r0, #2
  400280:	4770      	bx	lr
  400282:	bf00      	nop
  400284:	400e0400 	.word	0x400e0400

00400288 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400288:	2822      	cmp	r0, #34	; 0x22
  40028a:	d81e      	bhi.n	4002ca <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40028c:	281f      	cmp	r0, #31
  40028e:	d80c      	bhi.n	4002aa <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400290:	4b11      	ldr	r3, [pc, #68]	; (4002d8 <pmc_enable_periph_clk+0x50>)
  400292:	699a      	ldr	r2, [r3, #24]
  400294:	2301      	movs	r3, #1
  400296:	4083      	lsls	r3, r0
  400298:	4393      	bics	r3, r2
  40029a:	d018      	beq.n	4002ce <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40029c:	2301      	movs	r3, #1
  40029e:	fa03 f000 	lsl.w	r0, r3, r0
  4002a2:	4b0d      	ldr	r3, [pc, #52]	; (4002d8 <pmc_enable_periph_clk+0x50>)
  4002a4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4002a6:	2000      	movs	r0, #0
  4002a8:	4770      	bx	lr
		ul_id -= 32;
  4002aa:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4002ac:	4b0a      	ldr	r3, [pc, #40]	; (4002d8 <pmc_enable_periph_clk+0x50>)
  4002ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4002b2:	2301      	movs	r3, #1
  4002b4:	4083      	lsls	r3, r0
  4002b6:	4393      	bics	r3, r2
  4002b8:	d00b      	beq.n	4002d2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4002ba:	2301      	movs	r3, #1
  4002bc:	fa03 f000 	lsl.w	r0, r3, r0
  4002c0:	4b05      	ldr	r3, [pc, #20]	; (4002d8 <pmc_enable_periph_clk+0x50>)
  4002c2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4002c6:	2000      	movs	r0, #0
  4002c8:	4770      	bx	lr
		return 1;
  4002ca:	2001      	movs	r0, #1
  4002cc:	4770      	bx	lr
	return 0;
  4002ce:	2000      	movs	r0, #0
  4002d0:	4770      	bx	lr
  4002d2:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4002d4:	4770      	bx	lr
  4002d6:	bf00      	nop
  4002d8:	400e0400 	.word	0x400e0400

004002dc <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  4002dc:	4770      	bx	lr

004002de <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4002de:	e7fe      	b.n	4002de <Dummy_Handler>

004002e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4002e0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4002e2:	4b1c      	ldr	r3, [pc, #112]	; (400354 <Reset_Handler+0x74>)
  4002e4:	4a1c      	ldr	r2, [pc, #112]	; (400358 <Reset_Handler+0x78>)
  4002e6:	429a      	cmp	r2, r3
  4002e8:	d010      	beq.n	40030c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
  4002ea:	4b1c      	ldr	r3, [pc, #112]	; (40035c <Reset_Handler+0x7c>)
  4002ec:	4a19      	ldr	r2, [pc, #100]	; (400354 <Reset_Handler+0x74>)
  4002ee:	429a      	cmp	r2, r3
  4002f0:	d20c      	bcs.n	40030c <Reset_Handler+0x2c>
  4002f2:	3b01      	subs	r3, #1
  4002f4:	1a9b      	subs	r3, r3, r2
  4002f6:	f023 0303 	bic.w	r3, r3, #3
  4002fa:	3304      	adds	r3, #4
  4002fc:	4413      	add	r3, r2
  4002fe:	4916      	ldr	r1, [pc, #88]	; (400358 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
  400300:	f851 0b04 	ldr.w	r0, [r1], #4
  400304:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400308:	429a      	cmp	r2, r3
  40030a:	d1f9      	bne.n	400300 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40030c:	4b14      	ldr	r3, [pc, #80]	; (400360 <Reset_Handler+0x80>)
  40030e:	4a15      	ldr	r2, [pc, #84]	; (400364 <Reset_Handler+0x84>)
  400310:	429a      	cmp	r2, r3
  400312:	d20a      	bcs.n	40032a <Reset_Handler+0x4a>
  400314:	3b01      	subs	r3, #1
  400316:	1a9b      	subs	r3, r3, r2
  400318:	f023 0303 	bic.w	r3, r3, #3
  40031c:	3304      	adds	r3, #4
  40031e:	4413      	add	r3, r2
		*pDest++ = 0;
  400320:	2100      	movs	r1, #0
  400322:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400326:	4293      	cmp	r3, r2
  400328:	d1fb      	bne.n	400322 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40032a:	4b0f      	ldr	r3, [pc, #60]	; (400368 <Reset_Handler+0x88>)
  40032c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
  400330:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  400334:	490d      	ldr	r1, [pc, #52]	; (40036c <Reset_Handler+0x8c>)
  400336:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  400338:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  40033c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
  400340:	d203      	bcs.n	40034a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  400342:	688b      	ldr	r3, [r1, #8]
  400344:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400348:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  40034a:	4b09      	ldr	r3, [pc, #36]	; (400370 <Reset_Handler+0x90>)
  40034c:	4798      	blx	r3

	/* Branch to main function */
	main();
  40034e:	4b09      	ldr	r3, [pc, #36]	; (400374 <Reset_Handler+0x94>)
  400350:	4798      	blx	r3
  400352:	e7fe      	b.n	400352 <Reset_Handler+0x72>
  400354:	20000000 	.word	0x20000000
  400358:	00400684 	.word	0x00400684
  40035c:	20000524 	.word	0x20000524
  400360:	20000564 	.word	0x20000564
  400364:	20000524 	.word	0x20000524
  400368:	00400000 	.word	0x00400000
  40036c:	e000ed00 	.word	0xe000ed00
  400370:	004004ed 	.word	0x004004ed
  400374:	00400489 	.word	0x00400489

00400378 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400378:	4b3c      	ldr	r3, [pc, #240]	; (40046c <SystemCoreClockUpdate+0xf4>)
  40037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40037c:	f003 0303 	and.w	r3, r3, #3
  400380:	2b03      	cmp	r3, #3
  400382:	d80e      	bhi.n	4003a2 <SystemCoreClockUpdate+0x2a>
  400384:	e8df f003 	tbb	[pc, r3]
  400388:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  40038c:	4b38      	ldr	r3, [pc, #224]	; (400470 <SystemCoreClockUpdate+0xf8>)
  40038e:	695b      	ldr	r3, [r3, #20]
  400390:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400394:	bf14      	ite	ne
  400396:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40039a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40039e:	4b35      	ldr	r3, [pc, #212]	; (400474 <SystemCoreClockUpdate+0xfc>)
  4003a0:	601a      	str	r2, [r3, #0]
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4003a2:	4b32      	ldr	r3, [pc, #200]	; (40046c <SystemCoreClockUpdate+0xf4>)
  4003a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4003a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4003aa:	2b70      	cmp	r3, #112	; 0x70
  4003ac:	d055      	beq.n	40045a <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4003ae:	4b2f      	ldr	r3, [pc, #188]	; (40046c <SystemCoreClockUpdate+0xf4>)
  4003b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4003b2:	4930      	ldr	r1, [pc, #192]	; (400474 <SystemCoreClockUpdate+0xfc>)
  4003b4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4003b8:	680b      	ldr	r3, [r1, #0]
  4003ba:	40d3      	lsrs	r3, r2
  4003bc:	600b      	str	r3, [r1, #0]
  4003be:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4003c0:	4b2a      	ldr	r3, [pc, #168]	; (40046c <SystemCoreClockUpdate+0xf4>)
  4003c2:	6a1b      	ldr	r3, [r3, #32]
  4003c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4003c8:	d003      	beq.n	4003d2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4003ca:	4a2b      	ldr	r2, [pc, #172]	; (400478 <SystemCoreClockUpdate+0x100>)
  4003cc:	4b29      	ldr	r3, [pc, #164]	; (400474 <SystemCoreClockUpdate+0xfc>)
  4003ce:	601a      	str	r2, [r3, #0]
  4003d0:	e7e7      	b.n	4003a2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4003d2:	4a2a      	ldr	r2, [pc, #168]	; (40047c <SystemCoreClockUpdate+0x104>)
  4003d4:	4b27      	ldr	r3, [pc, #156]	; (400474 <SystemCoreClockUpdate+0xfc>)
  4003d6:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4003d8:	4b24      	ldr	r3, [pc, #144]	; (40046c <SystemCoreClockUpdate+0xf4>)
  4003da:	6a1b      	ldr	r3, [r3, #32]
  4003dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4003e0:	2b10      	cmp	r3, #16
  4003e2:	d005      	beq.n	4003f0 <SystemCoreClockUpdate+0x78>
  4003e4:	2b20      	cmp	r3, #32
  4003e6:	d1dc      	bne.n	4003a2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
  4003e8:	4a23      	ldr	r2, [pc, #140]	; (400478 <SystemCoreClockUpdate+0x100>)
  4003ea:	4b22      	ldr	r3, [pc, #136]	; (400474 <SystemCoreClockUpdate+0xfc>)
  4003ec:	601a      	str	r2, [r3, #0]
				break;
  4003ee:	e7d8      	b.n	4003a2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
  4003f0:	4a23      	ldr	r2, [pc, #140]	; (400480 <SystemCoreClockUpdate+0x108>)
  4003f2:	4b20      	ldr	r3, [pc, #128]	; (400474 <SystemCoreClockUpdate+0xfc>)
  4003f4:	601a      	str	r2, [r3, #0]
				break;
  4003f6:	e7d4      	b.n	4003a2 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4003f8:	4b1c      	ldr	r3, [pc, #112]	; (40046c <SystemCoreClockUpdate+0xf4>)
  4003fa:	6a1b      	ldr	r3, [r3, #32]
  4003fc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400400:	d018      	beq.n	400434 <SystemCoreClockUpdate+0xbc>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400402:	4a1d      	ldr	r2, [pc, #116]	; (400478 <SystemCoreClockUpdate+0x100>)
  400404:	4b1b      	ldr	r3, [pc, #108]	; (400474 <SystemCoreClockUpdate+0xfc>)
  400406:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  400408:	4b18      	ldr	r3, [pc, #96]	; (40046c <SystemCoreClockUpdate+0xf4>)
  40040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40040c:	f003 0303 	and.w	r3, r3, #3
  400410:	2b02      	cmp	r3, #2
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  400412:	4a16      	ldr	r2, [pc, #88]	; (40046c <SystemCoreClockUpdate+0xf4>)
  400414:	bf07      	ittee	eq
  400416:	6a91      	ldreq	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  400418:	6a92      	ldreq	r2, [r2, #40]	; 0x28
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  40041a:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  40041c:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  40041e:	4815      	ldr	r0, [pc, #84]	; (400474 <SystemCoreClockUpdate+0xfc>)
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  400420:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400424:	6803      	ldr	r3, [r0, #0]
  400426:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  40042a:	b2d2      	uxtb	r2, r2
  40042c:	fbb3 f3f2 	udiv	r3, r3, r2
  400430:	6003      	str	r3, [r0, #0]
  400432:	e7b6      	b.n	4003a2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400434:	4a11      	ldr	r2, [pc, #68]	; (40047c <SystemCoreClockUpdate+0x104>)
  400436:	4b0f      	ldr	r3, [pc, #60]	; (400474 <SystemCoreClockUpdate+0xfc>)
  400438:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  40043a:	4b0c      	ldr	r3, [pc, #48]	; (40046c <SystemCoreClockUpdate+0xf4>)
  40043c:	6a1b      	ldr	r3, [r3, #32]
  40043e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400442:	2b10      	cmp	r3, #16
  400444:	d005      	beq.n	400452 <SystemCoreClockUpdate+0xda>
  400446:	2b20      	cmp	r3, #32
  400448:	d1de      	bne.n	400408 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  40044a:	4a0b      	ldr	r2, [pc, #44]	; (400478 <SystemCoreClockUpdate+0x100>)
  40044c:	4b09      	ldr	r3, [pc, #36]	; (400474 <SystemCoreClockUpdate+0xfc>)
  40044e:	601a      	str	r2, [r3, #0]
				break;
  400450:	e7da      	b.n	400408 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  400452:	4a0b      	ldr	r2, [pc, #44]	; (400480 <SystemCoreClockUpdate+0x108>)
  400454:	4b07      	ldr	r3, [pc, #28]	; (400474 <SystemCoreClockUpdate+0xfc>)
  400456:	601a      	str	r2, [r3, #0]
				break;
  400458:	e7d6      	b.n	400408 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  40045a:	4a06      	ldr	r2, [pc, #24]	; (400474 <SystemCoreClockUpdate+0xfc>)
  40045c:	6813      	ldr	r3, [r2, #0]
  40045e:	4909      	ldr	r1, [pc, #36]	; (400484 <SystemCoreClockUpdate+0x10c>)
  400460:	fba1 1303 	umull	r1, r3, r1, r3
  400464:	085b      	lsrs	r3, r3, #1
  400466:	6013      	str	r3, [r2, #0]
  400468:	4770      	bx	lr
  40046a:	bf00      	nop
  40046c:	400e0400 	.word	0x400e0400
  400470:	400e1410 	.word	0x400e1410
  400474:	200000f0 	.word	0x200000f0
  400478:	00b71b00 	.word	0x00b71b00
  40047c:	003d0900 	.word	0x003d0900
  400480:	007a1200 	.word	0x007a1200
  400484:	aaaaaaab 	.word	0xaaaaaaab

00400488 <main>:
 * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
 */
#include <asf.h>

int main (void)
{
  400488:	b508      	push	{r3, lr}
	/* Insert system clock initialization code here (sysclk_init()). */

	sysclk_init();
  40048a:	4b11      	ldr	r3, [pc, #68]	; (4004d0 <main+0x48>)
  40048c:	4798      	blx	r3
	board_init();
  40048e:	4b11      	ldr	r3, [pc, #68]	; (4004d4 <main+0x4c>)
  400490:	4798      	blx	r3
	
	WDT->WDT_MR = WDT_MR_WDDIS;                         // disable watchdog
  400492:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400496:	4b10      	ldr	r3, [pc, #64]	; (4004d8 <main+0x50>)
  400498:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40049a:	200b      	movs	r0, #11
  40049c:	4c0f      	ldr	r4, [pc, #60]	; (4004dc <main+0x54>)
  40049e:	47a0      	blx	r4
  4004a0:	200c      	movs	r0, #12
  4004a2:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004a4:	4b0e      	ldr	r3, [pc, #56]	; (4004e0 <main+0x58>)
  4004a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4004aa:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004b0:	631a      	str	r2, [r3, #48]	; 0x30
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4004b2:	461c      	mov	r4, r3
	ioport_set_pin_level(26, IOPORT_PIN_LEVEL_HIGH);  // switch LED off

	/* Insert application code here, after the board has been initialized. */
	while (1) {
		ioport_toggle_pin_level(26);
		delay_ms(1000);
  4004b4:	4e0b      	ldr	r6, [pc, #44]	; (4004e4 <main+0x5c>)
  4004b6:	4d0c      	ldr	r5, [pc, #48]	; (4004e8 <main+0x60>)
  4004b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4004ba:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
		port->PIO_CODR = mask;
  4004be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  4004c2:	bf14      	ite	ne
  4004c4:	6363      	strne	r3, [r4, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  4004c6:	6323      	streq	r3, [r4, #48]	; 0x30
  4004c8:	4630      	mov	r0, r6
  4004ca:	47a8      	blx	r5
		ioport_toggle_pin_level(26);
  4004cc:	e7f4      	b.n	4004b8 <main+0x30>
  4004ce:	bf00      	nop
  4004d0:	0040013d 	.word	0x0040013d
  4004d4:	004002dd 	.word	0x004002dd
  4004d8:	400e1450 	.word	0x400e1450
  4004dc:	00400289 	.word	0x00400289
  4004e0:	400e0e00 	.word	0x400e0e00
  4004e4:	0045c125 	.word	0x0045c125
  4004e8:	20000001 	.word	0x20000001

004004ec <__libc_init_array>:
  4004ec:	b570      	push	{r4, r5, r6, lr}
  4004ee:	4e0f      	ldr	r6, [pc, #60]	; (40052c <__libc_init_array+0x40>)
  4004f0:	4d0f      	ldr	r5, [pc, #60]	; (400530 <__libc_init_array+0x44>)
  4004f2:	1b76      	subs	r6, r6, r5
  4004f4:	10b6      	asrs	r6, r6, #2
  4004f6:	bf18      	it	ne
  4004f8:	2400      	movne	r4, #0
  4004fa:	d005      	beq.n	400508 <__libc_init_array+0x1c>
  4004fc:	3401      	adds	r4, #1
  4004fe:	f855 3b04 	ldr.w	r3, [r5], #4
  400502:	4798      	blx	r3
  400504:	42a6      	cmp	r6, r4
  400506:	d1f9      	bne.n	4004fc <__libc_init_array+0x10>
  400508:	4e0a      	ldr	r6, [pc, #40]	; (400534 <__libc_init_array+0x48>)
  40050a:	4d0b      	ldr	r5, [pc, #44]	; (400538 <__libc_init_array+0x4c>)
  40050c:	f000 f8a8 	bl	400660 <_init>
  400510:	1b76      	subs	r6, r6, r5
  400512:	10b6      	asrs	r6, r6, #2
  400514:	bf18      	it	ne
  400516:	2400      	movne	r4, #0
  400518:	d006      	beq.n	400528 <__libc_init_array+0x3c>
  40051a:	3401      	adds	r4, #1
  40051c:	f855 3b04 	ldr.w	r3, [r5], #4
  400520:	4798      	blx	r3
  400522:	42a6      	cmp	r6, r4
  400524:	d1f9      	bne.n	40051a <__libc_init_array+0x2e>
  400526:	bd70      	pop	{r4, r5, r6, pc}
  400528:	bd70      	pop	{r4, r5, r6, pc}
  40052a:	bf00      	nop
  40052c:	0040066c 	.word	0x0040066c
  400530:	0040066c 	.word	0x0040066c
  400534:	00400674 	.word	0x00400674
  400538:	0040066c 	.word	0x0040066c

0040053c <register_fini>:
  40053c:	4b02      	ldr	r3, [pc, #8]	; (400548 <register_fini+0xc>)
  40053e:	b113      	cbz	r3, 400546 <register_fini+0xa>
  400540:	4802      	ldr	r0, [pc, #8]	; (40054c <register_fini+0x10>)
  400542:	f000 b805 	b.w	400550 <atexit>
  400546:	4770      	bx	lr
  400548:	00000000 	.word	0x00000000
  40054c:	0040055d 	.word	0x0040055d

00400550 <atexit>:
  400550:	2300      	movs	r3, #0
  400552:	4601      	mov	r1, r0
  400554:	461a      	mov	r2, r3
  400556:	4618      	mov	r0, r3
  400558:	f000 b81e 	b.w	400598 <__register_exitproc>

0040055c <__libc_fini_array>:
  40055c:	b538      	push	{r3, r4, r5, lr}
  40055e:	4c0a      	ldr	r4, [pc, #40]	; (400588 <__libc_fini_array+0x2c>)
  400560:	4d0a      	ldr	r5, [pc, #40]	; (40058c <__libc_fini_array+0x30>)
  400562:	1b64      	subs	r4, r4, r5
  400564:	10a4      	asrs	r4, r4, #2
  400566:	d00a      	beq.n	40057e <__libc_fini_array+0x22>
  400568:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40056c:	3b01      	subs	r3, #1
  40056e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400572:	3c01      	subs	r4, #1
  400574:	f855 3904 	ldr.w	r3, [r5], #-4
  400578:	4798      	blx	r3
  40057a:	2c00      	cmp	r4, #0
  40057c:	d1f9      	bne.n	400572 <__libc_fini_array+0x16>
  40057e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400582:	f000 b877 	b.w	400674 <_fini>
  400586:	bf00      	nop
  400588:	00400684 	.word	0x00400684
  40058c:	00400680 	.word	0x00400680

00400590 <__retarget_lock_acquire_recursive>:
  400590:	4770      	bx	lr
  400592:	bf00      	nop

00400594 <__retarget_lock_release_recursive>:
  400594:	4770      	bx	lr
  400596:	bf00      	nop

00400598 <__register_exitproc>:
  400598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40059c:	4d2c      	ldr	r5, [pc, #176]	; (400650 <__register_exitproc+0xb8>)
  40059e:	4606      	mov	r6, r0
  4005a0:	6828      	ldr	r0, [r5, #0]
  4005a2:	4698      	mov	r8, r3
  4005a4:	460f      	mov	r7, r1
  4005a6:	4691      	mov	r9, r2
  4005a8:	f7ff fff2 	bl	400590 <__retarget_lock_acquire_recursive>
  4005ac:	4b29      	ldr	r3, [pc, #164]	; (400654 <__register_exitproc+0xbc>)
  4005ae:	681c      	ldr	r4, [r3, #0]
  4005b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4005b4:	2b00      	cmp	r3, #0
  4005b6:	d03e      	beq.n	400636 <__register_exitproc+0x9e>
  4005b8:	685a      	ldr	r2, [r3, #4]
  4005ba:	2a1f      	cmp	r2, #31
  4005bc:	dc1c      	bgt.n	4005f8 <__register_exitproc+0x60>
  4005be:	f102 0e01 	add.w	lr, r2, #1
  4005c2:	b176      	cbz	r6, 4005e2 <__register_exitproc+0x4a>
  4005c4:	2101      	movs	r1, #1
  4005c6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
  4005ca:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
  4005ce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4005d2:	4091      	lsls	r1, r2
  4005d4:	4308      	orrs	r0, r1
  4005d6:	2e02      	cmp	r6, #2
  4005d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4005dc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
  4005e0:	d023      	beq.n	40062a <__register_exitproc+0x92>
  4005e2:	3202      	adds	r2, #2
  4005e4:	f8c3 e004 	str.w	lr, [r3, #4]
  4005e8:	6828      	ldr	r0, [r5, #0]
  4005ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4005ee:	f7ff ffd1 	bl	400594 <__retarget_lock_release_recursive>
  4005f2:	2000      	movs	r0, #0
  4005f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4005f8:	4b17      	ldr	r3, [pc, #92]	; (400658 <__register_exitproc+0xc0>)
  4005fa:	b30b      	cbz	r3, 400640 <__register_exitproc+0xa8>
  4005fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400600:	f3af 8000 	nop.w
  400604:	4603      	mov	r3, r0
  400606:	b1d8      	cbz	r0, 400640 <__register_exitproc+0xa8>
  400608:	2000      	movs	r0, #0
  40060a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  40060e:	f04f 0e01 	mov.w	lr, #1
  400612:	6058      	str	r0, [r3, #4]
  400614:	6019      	str	r1, [r3, #0]
  400616:	4602      	mov	r2, r0
  400618:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40061c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400620:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
  400624:	2e00      	cmp	r6, #0
  400626:	d0dc      	beq.n	4005e2 <__register_exitproc+0x4a>
  400628:	e7cc      	b.n	4005c4 <__register_exitproc+0x2c>
  40062a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
  40062e:	4301      	orrs	r1, r0
  400630:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
  400634:	e7d5      	b.n	4005e2 <__register_exitproc+0x4a>
  400636:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40063a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40063e:	e7bb      	b.n	4005b8 <__register_exitproc+0x20>
  400640:	6828      	ldr	r0, [r5, #0]
  400642:	f7ff ffa7 	bl	400594 <__retarget_lock_release_recursive>
  400646:	f04f 30ff 	mov.w	r0, #4294967295
  40064a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40064e:	bf00      	nop
  400650:	20000520 	.word	0x20000520
  400654:	0040065c 	.word	0x0040065c
  400658:	00000000 	.word	0x00000000

0040065c <_global_impure_ptr>:
  40065c:	200000f8                                ... 

00400660 <_init>:
  400660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400662:	bf00      	nop
  400664:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400666:	bc08      	pop	{r3}
  400668:	469e      	mov	lr, r3
  40066a:	4770      	bx	lr

0040066c <__init_array_start>:
  40066c:	0040053d 	.word	0x0040053d

00400670 <__frame_dummy_init_array_entry>:
  400670:	004000f5                                ..@.

00400674 <_fini>:
  400674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400676:	bf00      	nop
  400678:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40067a:	bc08      	pop	{r3}
  40067c:	469e      	mov	lr, r3
  40067e:	4770      	bx	lr

00400680 <__fini_array_start>:
  400680:	004000d1 	.word	0x004000d1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemInit>:
	EFC->EEFC_FMR = EEFC_FMR_FWS(3);
2000000c:	f44f 7240 	mov.w	r2, #768	; 0x300
20000010:	4b1f      	ldr	r3, [pc, #124]	; (20000090 <SystemInit+0x84>)
20000012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000014:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
20000018:	6a1b      	ldr	r3, [r3, #32]
2000001a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
2000001e:	d107      	bne.n	20000030 <SystemInit+0x24>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000020:	4a1c      	ldr	r2, [pc, #112]	; (20000094 <SystemInit+0x88>)
20000022:	4b1d      	ldr	r3, [pc, #116]	; (20000098 <SystemInit+0x8c>)
20000024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000026:	461a      	mov	r2, r3
20000028:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000002a:	f013 0f01 	tst.w	r3, #1
2000002e:	d0fb      	beq.n	20000028 <SystemInit+0x1c>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000030:	4a1a      	ldr	r2, [pc, #104]	; (2000009c <SystemInit+0x90>)
20000032:	4b19      	ldr	r3, [pc, #100]	; (20000098 <SystemInit+0x8c>)
20000034:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000036:	461a      	mov	r2, r3
20000038:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000003a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
2000003e:	d0fb      	beq.n	20000038 <SystemInit+0x2c>
		PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000040:	4a15      	ldr	r2, [pc, #84]	; (20000098 <SystemInit+0x8c>)
20000042:	6b13      	ldr	r3, [r2, #48]	; 0x30
20000044:	f023 0303 	bic.w	r3, r3, #3
20000048:	f043 0301 	orr.w	r3, r3, #1
2000004c:	6313      	str	r3, [r2, #48]	; 0x30
		while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000004e:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000050:	f013 0f08 	tst.w	r3, #8
20000054:	d0fb      	beq.n	2000004e <SystemInit+0x42>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000056:	4a12      	ldr	r2, [pc, #72]	; (200000a0 <SystemInit+0x94>)
20000058:	4b0f      	ldr	r3, [pc, #60]	; (20000098 <SystemInit+0x8c>)
2000005a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2000005c:	461a      	mov	r2, r3
2000005e:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000060:	f013 0f02 	tst.w	r3, #2
20000064:	d0fb      	beq.n	2000005e <SystemInit+0x52>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000066:	2211      	movs	r2, #17
20000068:	4b0b      	ldr	r3, [pc, #44]	; (20000098 <SystemInit+0x8c>)
2000006a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000006c:	461a      	mov	r2, r3
2000006e:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000070:	f013 0f08 	tst.w	r3, #8
20000074:	d0fb      	beq.n	2000006e <SystemInit+0x62>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000076:	2212      	movs	r2, #18
20000078:	4b07      	ldr	r3, [pc, #28]	; (20000098 <SystemInit+0x8c>)
2000007a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000007c:	461a      	mov	r2, r3
2000007e:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000080:	f013 0f08 	tst.w	r3, #8
20000084:	d0fb      	beq.n	2000007e <SystemInit+0x72>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000086:	4a07      	ldr	r2, [pc, #28]	; (200000a4 <SystemInit+0x98>)
20000088:	4b07      	ldr	r3, [pc, #28]	; (200000a8 <SystemInit+0x9c>)
2000008a:	601a      	str	r2, [r3, #0]
2000008c:	4770      	bx	lr
2000008e:	bf00      	nop
20000090:	400e0a00 	.word	0x400e0a00
20000094:	00370809 	.word	0x00370809
20000098:	400e0400 	.word	0x400e0400
2000009c:	01370809 	.word	0x01370809
200000a0:	201f3f03 	.word	0x201f3f03
200000a4:	03d09000 	.word	0x03d09000
200000a8:	200000f0 	.word	0x200000f0

200000ac <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200000ac:	4b0c      	ldr	r3, [pc, #48]	; (200000e0 <system_init_flash+0x34>)
200000ae:	4298      	cmp	r0, r3
200000b0:	d90c      	bls.n	200000cc <system_init_flash+0x20>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200000b2:	4b0c      	ldr	r3, [pc, #48]	; (200000e4 <system_init_flash+0x38>)
200000b4:	4298      	cmp	r0, r3
200000b6:	d90d      	bls.n	200000d4 <system_init_flash+0x28>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200000b8:	4b0b      	ldr	r3, [pc, #44]	; (200000e8 <system_init_flash+0x3c>)
200000ba:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(2);
200000bc:	bf94      	ite	ls
200000be:	f44f 7200 	movls.w	r2, #512	; 0x200
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(3);
200000c2:	f44f 7240 	movhi.w	r2, #768	; 0x300
200000c6:	4b09      	ldr	r3, [pc, #36]	; (200000ec <system_init_flash+0x40>)
200000c8:	601a      	str	r2, [r3, #0]
200000ca:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
200000cc:	2200      	movs	r2, #0
200000ce:	4b07      	ldr	r3, [pc, #28]	; (200000ec <system_init_flash+0x40>)
200000d0:	601a      	str	r2, [r3, #0]
200000d2:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
200000d4:	f44f 7280 	mov.w	r2, #256	; 0x100
200000d8:	4b04      	ldr	r3, [pc, #16]	; (200000ec <system_init_flash+0x40>)
200000da:	601a      	str	r2, [r3, #0]
200000dc:	4770      	bx	lr
200000de:	bf00      	nop
200000e0:	0103663f 	.word	0x0103663f
200000e4:	01c9c37f 	.word	0x01c9c37f
200000e8:	0337f97f 	.word	0x0337f97f
200000ec:	400e0a00 	.word	0x400e0a00

200000f0 <SystemCoreClock>:
200000f0:	003d0900 00000000                       ..=.....

200000f8 <impure_data>:
200000f8:	00000000 200003e4 2000044c 200004b4     ....... L.. ... 
	...
200001a0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200001b0:	0005deec 0000000b 00000000 00000000     ................
	...

20000520 <__atexit_recursive_mutex>:
20000520:	20000540                                @.. 
